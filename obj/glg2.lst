
obj/glg2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000039a4  00003a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f2  00800112  00800112  00003a6a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  00003a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000225  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000272e  00000000  00000000  00003d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  000064a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023e0  00000000  00000000  00006dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  000091a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  00009478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000300e  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000cb16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_1>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_11>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_18>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__c.1991>:
      68:	4f 70 65 6e 20 25 73 0a 00                          Open %s..

00000071 <__c.1989>:
      71:	25 30 32 75 25 30 32 75 25 30 32 75 2e 4c 4f 47     %02u%02u%02u.LOG
	...

00000082 <__c.1987>:
      82:	25 73 00                                            %s.

00000085 <__c.1984>:
      85:	46 53 20 4f 6b 0a 00                                FS Ok..

0000008c <__c.1981>:
      8c:	46 53 20 65 72 72 6f 72 0a 00                       FS error..

00000096 <__c.1843>:
      96:	24 47 50 52 4d 43 00                                $GPRMC.

0000009d <__c.1909>:
      9d:	45 78 69 74 20 73 6c 65 65 70 0d 0a 00              Exit sleep...

000000aa <__c.1896>:
      aa:	45 6e 74 65 72 20 73 6c 65 65 70 28 25 64 29 0d     Enter sleep(%d).
      ba:	0a 00                                               ..

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e4 ea       	ldi	r30, 0xA4	; 164
      d0:	f9 e3       	ldi	r31, 0x39	; 57
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <.do_copy_data_start>

000000d4 <.do_copy_data_loop>:
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0

000000d8 <.do_copy_data_start>:
      d8:	a2 31       	cpi	r26, 0x12	; 18
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <.do_copy_data_loop>

000000de <__do_clear_bss>:
      de:	16 e0       	ldi	r17, 0x06	; 6
      e0:	a2 e1       	ldi	r26, 0x12	; 18
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a4 30       	cpi	r26, 0x04	; 4
      ea:	b1 07       	cpc	r27, r17
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 17 05 	call	0xa2e	; 0xa2e <main>
      f2:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <xmit>:
#if BIDIR
	ldi	r23, BPS-1	;Pre-idle time for bidirectional data line
5:	dec	r23     	;
	brne	5b		;/
#endif
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
      fa:	0f b6       	in	r0, 0x3f	; 63

	com	r24		;C = start bit
      fc:	80 95       	com	r24
	ldi	r25, 10		;Bit counter
      fe:	9a e0       	ldi	r25, 0x0A	; 10
	cli			;Start critical section
     100:	f8 94       	cli

1:	ldi	r23, BPS-1	;----- Bit transferring loop 
     102:	73 e4       	ldi	r23, 0x43	; 67
2:	dec	r23     	;Wait for a bit time
     104:	7a 95       	dec	r23
	brne	2b		;/
     106:	f1 f7       	brne	.-4      	; 0x104 <xmit+0xa>
	brcs	3f		;MISO = bit to be sent
     108:	08 f0       	brcs	.+2      	; 0x10c <xmit+0x12>
	OUT_1			;
     10a:	5f 98       	cbi	0x0b, 7	; 11
3:	brcc	4f		;
     10c:	08 f4       	brcc	.+2      	; 0x110 <xmit+0x16>
	OUT_0			;/
     10e:	5f 9a       	sbi	0x0b, 7	; 11
4:	lsr	r24     	;Get next bit into C
     110:	86 95       	lsr	r24
	dec	r25     	;All bits sent?
     112:	9a 95       	dec	r25
	brne	1b	     	;  no, coutinue
     114:	b1 f7       	brne	.-20     	; 0x102 <xmit+0x8>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
     116:	0f be       	out	0x3f, r0	; 63
	ret
     118:	08 95       	ret

0000011a <xputc>:

.func xputc
.global xputc
xputc:
#if CR_CRLF
	cpi	r24, 10		;LF --> CRLF
     11a:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
     11c:	19 f4       	brne	.+6      	; 0x124 <xputc+0xa>
	ldi	r24, 13		;
     11e:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
     120:	01 d0       	rcall	.+2      	; 0x124 <xputc+0xa>
	ldi	r24, 10		;/
     122:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
     124:	ff 93       	push	r31
	push	ZL
     126:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     128:	e0 91 12 01 	lds	r30, 0x0112
	lds	ZH, xfunc_out+1	;/
     12c:	f0 91 13 01 	lds	r31, 0x0113
	sbiw	ZL, 0		;Skip if null
     130:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     132:	09 f0       	breq	.+2      	; 0x136 <xputc+0x1c>
	icall
     134:	09 95       	icall
2:	pop	ZL
     136:	ef 91       	pop	r30
	pop	ZH
     138:	ff 91       	pop	r31
	ret
     13a:	08 95       	ret

0000013c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     13c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     13e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     140:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     142:	11 f0       	breq	.+4      	; 0x148 <xputs+0xc>
	rcall	xputc
     144:	ea df       	rcall	.-44     	; 0x11a <xputc>
	rjmp	1b
     146:	fb cf       	rjmp	.-10     	; 0x13e <xputs+0x2>
2:	ret
     148:	08 95       	ret

0000014a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     14a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     14c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     14e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     150:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     152:	0c c0       	rjmp	.+24     	; 0x16c <xitoa+0x22>
	neg	r20		;
     154:	41 95       	neg	r20
	sbrs	r25, 7		;
     156:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     158:	09 c0       	rjmp	.+18     	; 0x16c <xitoa+0x22>
	ldi	r30, '-'	;
     15a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     15c:	60 95       	com	r22
	com	r23		;
     15e:	70 95       	com	r23
	com	r24		;
     160:	80 95       	com	r24
	com	r25		;
     162:	90 95       	com	r25
	adc	r22, r1		;
     164:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     166:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     168:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     16a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     16c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     16e:	02 c0       	rjmp	.+4      	; 0x174 <xitoa+0x2a>
	neg	r18		;
     170:	21 95       	neg	r18
	ldi	r19, '0'	;/
     172:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     174:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     176:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     178:	66 0f       	add	r22, r22
	rol	r23		;
     17a:	77 1f       	adc	r23, r23
	rol	r24		;
     17c:	88 1f       	adc	r24, r24
	rol	r25		;
     17e:	99 1f       	adc	r25, r25
	rol	r26		;
     180:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     182:	a4 17       	cp	r26, r20
	brcs	3f		;
     184:	10 f0       	brcs	.+4      	; 0x18a <xitoa+0x40>
	sub	r26, r20	;
     186:	a4 1b       	sub	r26, r20
	inc	r22		;
     188:	63 95       	inc	r22
3:	dec	r21		;
     18a:	5a 95       	dec	r21
	brne	2b		;/
     18c:	a9 f7       	brne	.-22     	; 0x178 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     18e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     190:	08 f0       	brcs	.+2      	; 0x194 <xitoa+0x4a>
	subi	r26, -7		;
     192:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     194:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     196:	af 93       	push	r26
	inc	r31		;/
     198:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     19a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     19c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     19e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     1a0:	91 05       	cpc	r25, r1
	brne	1b		;/
     1a2:	41 f7       	brne	.-48     	; 0x174 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     1a4:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     1a6:	11 f4       	brne	.+4      	; 0x1ac <xitoa+0x62>
	push	r30		;
     1a8:	ef 93       	push	r30
	inc	r31		;/
     1aa:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     1ac:	f2 17       	cp	r31, r18
	brcc	6f		;
     1ae:	18 f4       	brcc	.+6      	; 0x1b6 <xitoa+0x6c>
	push	r19		;
     1b0:	3f 93       	push	r19
	inc	r31		;
     1b2:	f3 95       	inc	r31
	rjmp	5b		;/
     1b4:	fb cf       	rjmp	.-10     	; 0x1ac <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     1b6:	8f 91       	pop	r24
	rcall	xputc		;
     1b8:	b0 df       	rcall	.-160    	; 0x11a <xputc>
	dec	r31		;
     1ba:	fa 95       	dec	r31
	brne	6b		;/
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <xitoa+0x6c>

	ret
     1be:	08 95       	ret

000001c0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     1c0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     1c2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     1c4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     1c6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     1c8:	21 f0       	breq	.+8      	; 0x1d2 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     1ca:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     1cc:	19 f0       	breq	.+6      	; 0x1d4 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     1ce:	a5 df       	rcall	.-182    	; 0x11a <xputc>
	rjmp	0b		;/
     1d0:	f9 cf       	rjmp	.-14     	; 0x1c4 <xvprintf+0x4>
90:	ret
     1d2:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     1d4:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     1d6:	e8 94       	clt
	_LPMI	r21		;Get flags
     1d8:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     1da:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     1dc:	c1 f3       	breq	.-16     	; 0x1ce <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     1de:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     1e0:	11 f4       	brne	.+4      	; 0x1e6 <xvprintf+0x26>
	set			;/
     1e2:	68 94       	set
22:	_LPMI	r21		;Get width
     1e4:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     1e6:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     1e8:	48 f4       	brcc	.+18     	; 0x1fc <xvprintf+0x3c>
	subi	r21, '0'	;
     1ea:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     1ec:	90 f3       	brcs	.-28     	; 0x1d2 <xvprintf+0x12>
	lsl	r18		;
     1ee:	22 0f       	add	r18, r18
	mov	r0, r18		;
     1f0:	02 2e       	mov	r0, r18
	lsl	r18		;
     1f2:	22 0f       	add	r18, r18
	lsl	r18		;
     1f4:	22 0f       	add	r18, r18
	add	r18, r0		;
     1f6:	20 0d       	add	r18, r0
	add	r18, r21	;
     1f8:	25 0f       	add	r18, r21
	rjmp	22b		;/
     1fa:	f4 cf       	rjmp	.-24     	; 0x1e4 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     1fc:	0e f4       	brtc	.+2      	; 0x200 <xvprintf+0x40>
	neg	r18		;
     1fe:	21 95       	neg	r18
25:	ld	r24, Y+		;
     200:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     202:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     204:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     206:	19 f3       	breq	.-58     	; 0x1ce <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     208:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     20a:	29 f1       	breq	.+74     	; 0x256 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     20c:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     20e:	59 f1       	breq	.+86     	; 0x266 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     210:	bc 01       	movw	r22, r24
	clr	r24		;
     212:	88 27       	eor	r24, r24
	clr	r25		;
     214:	99 27       	eor	r25, r25
	clt			;/
     216:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     218:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     21a:	21 f4       	brne	.+8      	; 0x224 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     21c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     21e:	99 91       	ld	r25, Y+
	set			;
     220:	68 94       	set
	_LPMI	r21		;/
     222:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     224:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     226:	39 f4       	brne	.+14     	; 0x236 <xvprintf+0x76>
	ldi	r20, -10	;
     228:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     22a:	7e f0       	brts	.+30     	; 0x24a <xvprintf+0x8a>
	sbrs	r23, 7		;
     22c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     22e:	0d c0       	rjmp	.+26     	; 0x24a <xvprintf+0x8a>
	ldi	r24, -1		;
     230:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     232:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     234:	0a c0       	rjmp	.+20     	; 0x24a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     236:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     238:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     23a:	39 f0       	breq	.+14     	; 0x24a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     23c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     23e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     240:	21 f0       	breq	.+8      	; 0x24a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     242:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     244:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     246:	09 f0       	breq	.+2      	; 0x24a <xvprintf+0x8a>
	ret			;abort
     248:	08 95       	ret
40:	push	ZH		;Output the value
     24a:	ff 93       	push	r31
	push	ZL		;
     24c:	ef 93       	push	r30
	rcall	xitoa		;
     24e:	7d df       	rcall	.-262    	; 0x14a <xitoa>
42:	pop	ZL		;
     250:	ef 91       	pop	r30
	pop	ZH		;
     252:	ff 91       	pop	r31
	rjmp	0b		;/
     254:	b7 cf       	rjmp	.-146    	; 0x1c4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     256:	ff 93       	push	r31
	push	ZL
     258:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     25a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     25c:	81 91       	ld	r24, Z+
	cpi	r24, 0
     25e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     260:	b9 f3       	breq	.-18     	; 0x250 <xvprintf+0x90>
	rcall	xputc
     262:	5b df       	rcall	.-330    	; 0x11a <xputc>
	rjmp	51b
     264:	fb cf       	rjmp	.-10     	; 0x25c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     266:	ff 93       	push	r31
	push	ZL
     268:	ef 93       	push	r30
	rcall	xputs
     26a:	68 df       	rcall	.-304    	; 0x13c <xputs>
	rjmp	42b
     26c:	f1 cf       	rjmp	.-30     	; 0x250 <xvprintf+0x90>

0000026e <xprintf>:


.func xprintf
.global xprintf
xprintf:
	push	YH
     26e:	df 93       	push	r29
	push	YL
     270:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     272:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     274:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     276:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     278:	a3 df       	rcall	.-186    	; 0x1c0 <xvprintf>
	pop	YL
     27a:	cf 91       	pop	r28
	pop	YH
     27c:	df 91       	pop	r29
	ret
     27e:	08 95       	ret

00000280 <putram>:

#if USE_XSPRINTF

.func xsprintf
putram:
	_MOVW	ZH,ZL, r15,r14
     280:	f7 01       	movw	r30, r14
	st	Z+, r24
     282:	81 93       	st	Z+, r24
	_MOVW	r15,r14, ZH,ZL
     284:	7f 01       	movw	r14, r30
	ret
     286:	08 95       	ret

00000288 <xsprintf>:
.global xsprintf
xsprintf:
	push	YH
     288:	df 93       	push	r29
	push	YL
     28a:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     28c:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     28e:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     290:	25 96       	adiw	r28, 0x05	; 5
	lds	ZL, xfunc_out+0	;Save registered output function
     292:	e0 91 12 01 	lds	r30, 0x0112
	lds	ZH, xfunc_out+1	;
     296:	f0 91 13 01 	lds	r31, 0x0113
	push	ZL		;
     29a:	ef 93       	push	r30
	push	ZH		;/
     29c:	ff 93       	push	r31
	ldi	ZL, lo8(pm(putram));Set local output function
     29e:	e0 e4       	ldi	r30, 0x40	; 64
	ldi	ZH, hi8(pm(putram));
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
	sts	xfunc_out+0, ZL	;
     2a2:	e0 93 12 01 	sts	0x0112, r30
	sts	xfunc_out+1, ZH	;/
     2a6:	f0 93 13 01 	sts	0x0113, r31
	push	r15		;Initialize pointer to string buffer
     2aa:	ff 92       	push	r15
	push	r14		;
     2ac:	ef 92       	push	r14
	ld	r14, Y+		;
     2ae:	e9 90       	ld	r14, Y+
	ld	r15, Y+		;/
     2b0:	f9 90       	ld	r15, Y+
	rcall	xvprintf
     2b2:	86 df       	rcall	.-244    	; 0x1c0 <xvprintf>
	_MOVW	ZH,ZL, r15,r14	;Terminate string
     2b4:	f7 01       	movw	r30, r14
	st	Z, r1		;
     2b6:	10 82       	st	Z, r1
	pop	r14		;
     2b8:	ef 90       	pop	r14
	pop	r15		;/
     2ba:	ff 90       	pop	r15
	pop	ZH		;Restore registered output function
     2bc:	ff 91       	pop	r31
	pop	ZL		;
     2be:	ef 91       	pop	r30
	sts	xfunc_out+0, ZL	;
     2c0:	e0 93 12 01 	sts	0x0112, r30
	sts	xfunc_out+1, ZH	;/
     2c4:	f0 93 13 01 	sts	0x0113, r31
	pop	YL
     2c8:	cf 91       	pop	r28
	pop	YH
     2ca:	df 91       	pop	r29
	ret
     2cc:	08 95       	ret

000002ce <xatoi>:

#if USE_XATOI
.func xatoi
.global xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
     2ce:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
     2d0:	dc 01       	movw	r26, r24
	ld	ZL, X+
     2d2:	ed 91       	ld	r30, X+
	ld	ZH, X+
     2d4:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
     2d6:	22 27       	eor	r18, r18
	clr	r19		;
     2d8:	33 27       	eor	r19, r19
	clr	r20		;
     2da:	44 27       	eor	r20, r20
	clr	r21		;/
     2dc:	55 27       	eor	r21, r21
	clt			;T = 0;
     2de:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
     2e0:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
     2e4:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
     2e6:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
     2e8:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
     2ea:	e1 f3       	breq	.-8      	; 0x2e4 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
     2ec:	a8 f1       	brcs	.+106    	; 0x358 <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
     2ee:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <xatoi+0x28>
	set			; continue;
     2f2:	68 94       	set
	rjmp	40b		;}
     2f4:	f7 cf       	rjmp	.-18     	; 0x2e4 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
     2f6:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
     2f8:	78 f5       	brcc	.+94     	; 0x358 <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
     2fa:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
     2fc:	68 f1       	brcs	.+90     	; 0x358 <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
     2fe:	71 f4       	brne	.+28     	; 0x31c <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
     300:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
     302:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
     304:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
     306:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
     308:	48 f1       	brcs	.+82     	; 0x35c <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
     30a:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
     30c:	11 f4       	brne	.+4      	; 0x312 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
     30e:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
     310:	03 c0       	rjmp	.+6      	; 0x318 <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
     312:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
     314:	19 f4       	brne	.+6      	; 0x31c <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
     316:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
     318:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
     31a:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
     31c:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
     31e:	f0 f0       	brcs	.+60     	; 0x35c <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
     320:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
     322:	08 f0       	brcs	.+2      	; 0x326 <xatoi+0x58>
	subi	r22, 0x20	;/
     324:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
     326:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
     328:	b8 f0       	brcs	.+46     	; 0x358 <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
     32a:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
     32c:	18 f0       	brcs	.+6      	; 0x334 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
     32e:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
     330:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
     332:	90 f0       	brcs	.+36     	; 0x358 <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
     334:	69 17       	cp	r22, r25
	brcc	70f		;/
     336:	80 f4       	brcc	.+32     	; 0x358 <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
     338:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
     33a:	77 1b       	sub	r23, r23
61:	brcc	62f		;
     33c:	08 f4       	brcc	.+2      	; 0x340 <xatoi+0x72>
	add	r23, r25	;
     33e:	79 0f       	add	r23, r25
62:	lsr	r23		;
     340:	76 95       	lsr	r23
	ror	r21		;
     342:	57 95       	ror	r21
	ror	r20		;
     344:	47 95       	ror	r20
	ror	r19		;
     346:	37 95       	ror	r19
	ror	r18		;
     348:	27 95       	ror	r18
	dec	r24		;
     34a:	8a 95       	dec	r24
	brne	61b		;/
     34c:	b9 f7       	brne	.-18     	; 0x33c <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
     34e:	26 0f       	add	r18, r22
	adc	r19, r24	;
     350:	38 1f       	adc	r19, r24
	adc	r20, r24	;
     352:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
     354:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
     356:	e0 cf       	rjmp	.-64     	; 0x318 <xatoi+0x4a>

70:	ldi	r24, 0
     358:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
     35a:	01 c0       	rjmp	.+2      	; 0x35e <xatoi+0x90>
80:	ldi	r24, 1
     35c:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
     35e:	4e f4       	brtc	.+18     	; 0x372 <xatoi+0xa4>
	clr	r22
     360:	66 27       	eor	r22, r22
	com	r18
     362:	20 95       	com	r18
	com	r19
     364:	30 95       	com	r19
	com	r20
     366:	40 95       	com	r20
	com	r21
     368:	50 95       	com	r21
	adc	r18, r22
     36a:	26 1f       	adc	r18, r22
	adc	r19, r22
     36c:	36 1f       	adc	r19, r22
	adc	r20, r22
     36e:	46 1f       	adc	r20, r22
	adc	r21, r22
     370:	56 1f       	adc	r21, r22
82:	st	-X, ZH
     372:	fe 93       	st	-X, r31
	st	-X, ZL
     374:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
     376:	d0 01       	movw	r26, r0
	st	X+, r18
     378:	2d 93       	st	X+, r18
	st	X+, r19
     37a:	3d 93       	st	X+, r19
	st	X+, r20
     37c:	4d 93       	st	X+, r20
	st	X+, r21
     37e:	5d 93       	st	X+, r21
	clr	r1
     380:	11 24       	eor	r1, r1
	ret
     382:	08 95       	ret

00000384 <samurai>:
     384:	1f 1d       	adc	r17, r15
     386:	1f 1e       	adc	r1, r31
     388:	1f 1e       	adc	r1, r31
     38a:	1f 1f       	adc	r17, r31
     38c:	1e 1f       	adc	r17, r30
     38e:	1e 1f       	adc	r17, r30

00000390 <mktime>:
;Size: 89/88 words

.global mktime
.func mktime
mktime:
	push	YL
     390:	cf 93       	push	r28
	push	YH
     392:	df 93       	push	r29
	_MOVW	YH,YL, r25,r24
     394:	ec 01       	movw	r28, r24
	adiw	YL, 12
     396:	2c 96       	adiw	r28, 0x0c	; 12

	ldi	r20, 138	; (365..366) * tm_year
     398:	4a e8       	ldi	r20, 0x8A	; 138
	rcall	ldcp16
     39a:	34 d0       	rcall	.+104    	; 0x404 <ldcp16>
	clr	r22
     39c:	66 27       	eor	r22, r22
	clr	r23
     39e:	77 27       	eor	r23, r23
	ldi	r19, 70
     3a0:	36 e4       	ldi	r19, 0x46	; 70
0:	ldi	XL, lo8(366)
     3a2:	ae e6       	ldi	r26, 0x6E	; 110
	ldi	XH, hi8(366)
     3a4:	b1 e0       	ldi	r27, 0x01	; 1
	mov	r21, r19
     3a6:	53 2f       	mov	r21, r19
	andi	r21, 3
     3a8:	53 70       	andi	r21, 0x03	; 3
	breq	1f
     3aa:	09 f0       	breq	.+2      	; 0x3ae <mktime+0x1e>
	sbiw	XL, 1
     3ac:	11 97       	sbiw	r26, 0x01	; 1
1:	cp	r19, r18
     3ae:	32 17       	cp	r19, r18
	breq	2f
     3b0:	29 f0       	breq	.+10     	; 0x3bc <mktime+0x2c>
	brcc	91f
     3b2:	78 f5       	brcc	.+94     	; 0x412 <ldcp16+0xe>
	add	r22, XL
     3b4:	6a 0f       	add	r22, r26
	adc	r23, XH
     3b6:	7b 1f       	adc	r23, r27
	inc	r19
     3b8:	33 95       	inc	r19
	rjmp	0b
     3ba:	f3 cf       	rjmp	.-26     	; 0x3a2 <mktime+0x12>
2:
	ldi	r20, 12		; + (28..31) * tm_mon
     3bc:	4c e0       	ldi	r20, 0x0C	; 12
	rcall	ldcp16
     3be:	22 d0       	rcall	.+68     	; 0x404 <ldcp16>
	ldi	ZL, lo8(samurai)
     3c0:	e4 e8       	ldi	r30, 0x84	; 132
	ldi	ZH, hi8(samurai)
     3c2:	f3 e0       	ldi	r31, 0x03	; 3
	ldi	r19, 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
3:	lpm
     3c6:	c8 95       	lpm
	adiw	ZL, 1
     3c8:	31 96       	adiw	r30, 0x01	; 1
	cpi	r19, 1
     3ca:	31 30       	cpi	r19, 0x01	; 1
	brne	4f
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <mktime+0x42>
	cpse	r21, r1
     3ce:	51 11       	cpse	r21, r1
	dec	r0
     3d0:	0a 94       	dec	r0
4:	cp	r19, r18
     3d2:	32 17       	cp	r19, r18
	brcc	5f
     3d4:	20 f4       	brcc	.+8      	; 0x3de <mktime+0x4e>
	add	r22, r0
     3d6:	60 0d       	add	r22, r0
	adc	r23, r1
     3d8:	71 1d       	adc	r23, r1
	inc	r19
     3da:	33 95       	inc	r19
	rjmp	3b
     3dc:	f4 cf       	rjmp	.-24     	; 0x3c6 <mktime+0x36>
5:
	mov	r20, r0		; + tm_mday
     3de:	40 2d       	mov	r20, r0
	inc	r20
     3e0:	43 95       	inc	r20
	rcall	ldcp16
     3e2:	10 d0       	rcall	.+32     	; 0x404 <ldcp16>
	subi	r18, 1
     3e4:	21 50       	subi	r18, 0x01	; 1
	brcs	91f
     3e6:	a8 f0       	brcs	.+42     	; 0x412 <ldcp16+0xe>
	add	r22, r18
     3e8:	62 0f       	add	r22, r18
	adc	r23, r1
     3ea:	71 1d       	adc	r23, r1
	clr	r24
     3ec:	88 27       	eor	r24, r24
	clr	r25
     3ee:	99 27       	eor	r25, r25
	; r25:r22 = days from orign

	ldi	r20, 24		; * 24 + tm_hour
     3f0:	48 e1       	ldi	r20, 0x18	; 24
	rcall	ldcp16
     3f2:	08 d0       	rcall	.+16     	; 0x404 <ldcp16>
	rcall	muladd3208
     3f4:	15 d0       	rcall	.+42     	; 0x420 <muladd3208>

	ldi	r20, 60		; * 60 + tm_min
     3f6:	4c e3       	ldi	r20, 0x3C	; 60
	rcall	ldcp16
     3f8:	05 d0       	rcall	.+10     	; 0x404 <ldcp16>
	rcall	muladd3208
     3fa:	12 d0       	rcall	.+36     	; 0x420 <muladd3208>

	ldi	r18, 60		; * 60 + tm_sec
     3fc:	2c e3       	ldi	r18, 0x3C	; 60
	rcall	ldcp16
     3fe:	02 d0       	rcall	.+4      	; 0x404 <ldcp16>
	rcall	muladd3208
     400:	0f d0       	rcall	.+30     	; 0x420 <muladd3208>
	rjmp	92f
     402:	0b c0       	rjmp	.+22     	; 0x41a <ldcp16+0x16>

00000404 <ldcp16>:

ldcp16:	ld	r19, -Y		; Load an item with error check (< r20)
     404:	3a 91       	ld	r19, -Y
	ld	r18, -Y
     406:	2a 91       	ld	r18, -Y
	cp	r18, r20
     408:	24 17       	cp	r18, r20
	cpc	r19, r1
     40a:	31 05       	cpc	r19, r1
	brcs	93f
     40c:	40 f0       	brcs	.+16     	; 0x41e <ldcp16+0x1a>
	pop	r0
     40e:	0f 90       	pop	r0
	pop	r0
     410:	0f 90       	pop	r0

91:	ldi	r22, -1		; parameter error
     412:	6f ef       	ldi	r22, 0xFF	; 255
	ldi	r23, -1
     414:	7f ef       	ldi	r23, 0xFF	; 255
	ldi	r24, -1
     416:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1
     418:	9f ef       	ldi	r25, 0xFF	; 255

92:	pop	YH
     41a:	df 91       	pop	r29
	pop	YL
     41c:	cf 91       	pop	r28
93:	ret
     41e:	08 95       	ret

00000420 <muladd3208>:

muladd3208:
	ldi	r21, 33		; r25:r22 *= r20;
     420:	51 e2       	ldi	r21, 0x21	; 33
	sub	r26, r26
     422:	aa 1b       	sub	r26, r26
0:	brcc	1f
     424:	08 f4       	brcc	.+2      	; 0x428 <muladd3208+0x8>
	add	r26, r20
     426:	a4 0f       	add	r26, r20
1:	ror	r26
     428:	a7 95       	ror	r26
	ror	r25
     42a:	97 95       	ror	r25
	ror	r24
     42c:	87 95       	ror	r24
	ror	r23
     42e:	77 95       	ror	r23
	ror	r22
     430:	67 95       	ror	r22
	dec	r21
     432:	5a 95       	dec	r21
	brne	0b
     434:	b9 f7       	brne	.-18     	; 0x424 <muladd3208+0x4>
	add	r22, r18	; r25:r22 += r18;
     436:	62 0f       	add	r22, r18
	adc	r23, r1
     438:	71 1d       	adc	r23, r1
	adc	r24, r1
     43a:	81 1d       	adc	r24, r1
	adc	r25, r1
     43c:	91 1d       	adc	r25, r1
	ret
     43e:	08 95       	ret

00000440 <gmtime>:
;Size: 93/89 words

.global gmtime
.func gmtime
gmtime:
	push	YL
     440:	cf 93       	push	r28
	push	YH
     442:	df 93       	push	r29

	_MOVW	ZH,ZL, r25,r24		;r21:r18 = utc
     444:	fc 01       	movw	r30, r24
	ldd	r18, Z+0		;
     446:	20 81       	ld	r18, Z
	ldd	r19, Z+1		;
     448:	31 81       	ldd	r19, Z+1	; 0x01
	ldd	r20, Z+2		;
     44a:	42 81       	ldd	r20, Z+2	; 0x02
	ldd	r21, Z+3		;/
     44c:	53 81       	ldd	r21, Z+3	; 0x03
	clr	YL			;Invalid time?
     44e:	cc 27       	eor	r28, r28
	clr	YH			;
     450:	dd 27       	eor	r29, r29
	sbrc	r21, 7			;
     452:	57 fd       	sbrc	r21, 7
	rjmp	99f			;/
     454:	3c c0       	rjmp	.+120    	; 0x4ce <gmtime+0x8e>
	ldi	YL, lo8(time_tm)
     456:	c4 e1       	ldi	r28, 0x14	; 20
	ldi	YH, hi8(time_tm)
     458:	d1 e0       	ldi	r29, 0x01	; 1
	; r21:r18 = seconds from origin

	ldi	r22, 60			;tm_sec = % 60
     45a:	6c e3       	ldi	r22, 0x3C	; 60
	rcall	div3208			;
     45c:	3c d0       	rcall	.+120    	; 0x4d6 <div3208>
	std	Y+0, r0			;
     45e:	08 82       	st	Y, r0
	std	Y+1, r1			;/
     460:	19 82       	std	Y+1, r1	; 0x01
	rcall	div3208			;tm_min = % 60
     462:	39 d0       	rcall	.+114    	; 0x4d6 <div3208>
	std	Y+2, r0			;
     464:	0a 82       	std	Y+2, r0	; 0x02
	std	Y+3, r1			;/
     466:	1b 82       	std	Y+3, r1	; 0x03
	ldi	r22, 24			;tm_hour = % 24
     468:	68 e1       	ldi	r22, 0x18	; 24
	rcall	div3208			;
     46a:	35 d0       	rcall	.+106    	; 0x4d6 <div3208>
	std	Y+4, r0			;
     46c:	0c 82       	std	Y+4, r0	; 0x04
	std	Y+5, r1			;/
     46e:	1d 82       	std	Y+5, r1	; 0x05
	; r19:r18 = days from origin

	_MOVW	ZH,ZL, r19,r18
     470:	f9 01       	movw	r30, r18
	subi	r18, lo8(-4)		;tm_wday
     472:	2c 5f       	subi	r18, 0xFC	; 252
	sbci	r19, hi8(-4)		;
     474:	3f 4f       	sbci	r19, 0xFF	; 255
	ldi	r22, 7			;
     476:	67 e0       	ldi	r22, 0x07	; 7
	rcall	div3208			;
     478:	2e d0       	rcall	.+92     	; 0x4d6 <div3208>
	std	Y+12, r0		;
     47a:	0c 86       	std	Y+12, r0	; 0x0c
	std	Y+13, r1		;/
     47c:	1d 86       	std	Y+13, r1	; 0x0d
	_MOVW	r19,r18, ZH,ZL
     47e:	9f 01       	movw	r18, r30

	ldi	XL, 70			;tm_year
     480:	a6 e4       	ldi	r26, 0x46	; 70
0:	ldi	ZL, lo8(366)		;
     482:	ee e6       	ldi	r30, 0x6E	; 110
	ldi	ZH, hi8(366)		;
     484:	f1 e0       	ldi	r31, 0x01	; 1
	mov	XH, XL			;
     486:	ba 2f       	mov	r27, r26
	andi	XH, 3			;
     488:	b3 70       	andi	r27, 0x03	; 3
	breq	1f			;
     48a:	09 f0       	breq	.+2      	; 0x48e <gmtime+0x4e>
	sbiw	ZL, 1			;
     48c:	31 97       	sbiw	r30, 0x01	; 1
1:	cp	r18, ZL			;
     48e:	2e 17       	cp	r18, r30
	cpc	r19, ZH			;
     490:	3f 07       	cpc	r19, r31
	brcs	2f			;
     492:	20 f0       	brcs	.+8      	; 0x49c <gmtime+0x5c>
	sub	r18, ZL			;
     494:	2e 1b       	sub	r18, r30
	sbc	r19, ZH			;
     496:	3f 0b       	sbc	r19, r31
	inc	XL			;
     498:	a3 95       	inc	r26
	rjmp	0b			;
     49a:	f3 cf       	rjmp	.-26     	; 0x482 <gmtime+0x42>
2:	std	Y+10, XL		;
     49c:	aa 87       	std	Y+10, r26	; 0x0a
	std	Y+11, r1		;/
     49e:	1b 86       	std	Y+11, r1	; 0x0b
	std	Y+14, r18		;tm_yday
     4a0:	2e 87       	std	Y+14, r18	; 0x0e
	std	Y+15, r19		;/
     4a2:	3f 87       	std	Y+15, r19	; 0x0f
	; r19:r18 = days in year

	ldi	ZL, lo8(samurai)	;tm_mon
     4a4:	e4 e8       	ldi	r30, 0x84	; 132
	ldi	ZH, hi8(samurai)	;
     4a6:	f3 e0       	ldi	r31, 0x03	; 3
	clr	XL			;
     4a8:	aa 27       	eor	r26, r26
3:	lpm				;
     4aa:	c8 95       	lpm
	adiw	ZL, 1			;
     4ac:	31 96       	adiw	r30, 0x01	; 1
	cpi	XL, 1			;
     4ae:	a1 30       	cpi	r26, 0x01	; 1
	brne	4f			;
     4b0:	11 f4       	brne	.+4      	; 0x4b6 <gmtime+0x76>
	cpse	XH, r1			;
     4b2:	b1 11       	cpse	r27, r1
	dec	r0			;
     4b4:	0a 94       	dec	r0
4:	cp	r18, r0			;
     4b6:	20 15       	cp	r18, r0
	cpc	r19, r1			;
     4b8:	31 05       	cpc	r19, r1
	brcs	5f			;
     4ba:	20 f0       	brcs	.+8      	; 0x4c4 <gmtime+0x84>
	sub	r18, r0			;
     4bc:	20 19       	sub	r18, r0
	sbc	r19, r1			;
     4be:	31 09       	sbc	r19, r1
	inc	XL			;
     4c0:	a3 95       	inc	r26
	rjmp	3b			;
     4c2:	f3 cf       	rjmp	.-26     	; 0x4aa <gmtime+0x6a>
5:	std	Y+8, XL			;
     4c4:	a8 87       	std	Y+8, r26	; 0x08
	std	Y+9, r1			;/
     4c6:	19 86       	std	Y+9, r1	; 0x09
	inc	r18			;tm_mday
     4c8:	23 95       	inc	r18
	std	Y+6, r18		;
     4ca:	2e 83       	std	Y+6, r18	; 0x06
	std	Y+7, r19		;/
     4cc:	3f 83       	std	Y+7, r19	; 0x07

99:	_MOVW	r25,r24, YH,YL		;Return pointer to internal tm buffer
     4ce:	ce 01       	movw	r24, r28
	pop	YH
     4d0:	df 91       	pop	r29
	pop	YL
     4d2:	cf 91       	pop	r28
	ret
     4d4:	08 95       	ret

000004d6 <div3208>:

div3208:			; r0 = r21:r18 % r22;
	clr	r0		; r21:r18 /= r22;
     4d6:	00 24       	eor	r0, r0
	ldi	r23, 32
     4d8:	70 e2       	ldi	r23, 0x20	; 32
1:	lsl	r18
     4da:	22 0f       	add	r18, r18
	rol	r19
     4dc:	33 1f       	adc	r19, r19
	rol	r20
     4de:	44 1f       	adc	r20, r20
	rol	r21
     4e0:	55 1f       	adc	r21, r21
	rol	r0
     4e2:	00 1c       	adc	r0, r0
	cp	r0, r22
     4e4:	06 16       	cp	r0, r22
	brcs	2f
     4e6:	10 f0       	brcs	.+4      	; 0x4ec <div3208+0x16>
	sub	r0, r22
     4e8:	06 1a       	sub	r0, r22
	inc	r18
     4ea:	23 95       	inc	r18
2:	dec	r23
     4ec:	7a 95       	dec	r23
	brne	1b
     4ee:	a9 f7       	brne	.-22     	; 0x4da <div3208+0x4>
	ret
     4f0:	08 95       	ret

000004f2 <__vector_1>:

struct tm *Ct;


ISR(INT0_vect)
{
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
	EIMSK = 0;
     4fc:	1d ba       	out	0x1d, r1	; 29
}
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__vector_11>:
/* 100Hz timer interrupt generated by OC1A                 */
/*---------------------------------------------------------*/


ISR(TIMER1_COMPA_vect)
{
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	2f 93       	push	r18
     514:	3f 93       	push	r19
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25
	WORD ad;
	static WORD ivt_sync;
	static BYTE bt, led, lvt, ovt;


	n = Timer;
     51a:	80 91 96 03 	lds	r24, 0x0396
	if (n) Timer = --n;;
     51e:	88 23       	and	r24, r24
     520:	19 f0       	breq	.+6      	; 0x528 <__vector_11+0x20>
     522:	81 50       	subi	r24, 0x01	; 1
     524:	80 93 96 03 	sts	0x0396, r24
	n = MmcTmr[0];
     528:	80 91 97 03 	lds	r24, 0x0397
	if (n) MmcTmr[0] = --n;;
     52c:	88 23       	and	r24, r24
     52e:	19 f0       	breq	.+6      	; 0x536 <__vector_11+0x2e>
     530:	81 50       	subi	r24, 0x01	; 1
     532:	80 93 97 03 	sts	0x0397, r24
	n = MmcTmr[1];
     536:	80 91 98 03 	lds	r24, 0x0398
	if (n) MmcTmr[1] = --n;;
     53a:	88 23       	and	r24, r24
     53c:	19 f0       	breq	.+6      	; 0x544 <__vector_11+0x3c>
     53e:	81 50       	subi	r24, 0x01	; 1
     540:	80 93 98 03 	sts	0x0398, r24

	if (++ivt_sync >= IVT_SYNC * 100) {
     544:	80 91 2a 01 	lds	r24, 0x012A
     548:	90 91 2b 01 	lds	r25, 0x012B
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	90 93 2b 01 	sts	0x012B, r25
     552:	80 93 2a 01 	sts	0x012A, r24
     556:	80 55       	subi	r24, 0x50	; 80
     558:	96 44       	sbci	r25, 0x46	; 70
     55a:	48 f0       	brcs	.+18     	; 0x56e <__vector_11+0x66>
		ivt_sync = 0;
     55c:	10 92 2b 01 	sts	0x012B, r1
     560:	10 92 2a 01 	sts	0x012A, r1
		Stat |= F_SYNC;
     564:	80 91 99 03 	lds	r24, 0x0399
     568:	84 60       	ori	r24, 0x04	; 4
     56a:	80 93 99 03 	sts	0x0399, r24
	}

	if (BUTTON) {
     56e:	4a 99       	sbic	0x09, 2	; 9
     570:	0d c0       	rjmp	.+26     	; 0x58c <__vector_11+0x84>
		if (++bt >= 100) 
     572:	80 91 29 01 	lds	r24, 0x0129
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 29 01 	sts	0x0129, r24
     57c:	84 36       	cpi	r24, 0x64	; 100
     57e:	40 f0       	brcs	.+16     	; 0x590 <__vector_11+0x88>
			Stat |= F_BTN;
     580:	80 91 99 03 	lds	r24, 0x0399
     584:	80 61       	ori	r24, 0x10	; 16
     586:	80 93 99 03 	sts	0x0399, r24
     58a:	02 c0       	rjmp	.+4      	; 0x590 <__vector_11+0x88>
	} else {
		bt = 0;
     58c:	10 92 29 01 	sts	0x0129, r1
	}
	
	
	ad = ADCL| (ADCH<<8);
     590:	30 91 78 00 	lds	r19, 0x0078
     594:	20 91 79 00 	lds	r18, 0x0079
     598:	92 2f       	mov	r25, r18
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	23 2f       	mov	r18, r19
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	28 2b       	or	r18, r24
     5a2:	39 2b       	or	r19, r25
	
	if (Stat & F_POW) {
     5a4:	80 91 99 03 	lds	r24, 0x0399
     5a8:	87 ff       	sbrs	r24, 7
     5aa:	1e c0       	rjmp	.+60     	; 0x5e8 <__vector_11+0xe0>
		if (Stat & F_GPSOK) 
     5ac:	80 91 99 03 	lds	r24, 0x0399
     5b0:	83 ff       	sbrs	r24, 3
     5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <__vector_11+0xce>
		{
			if (ad < (WORD)(VI_LBT/2/3.0*1024)) {
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	26 36       	cpi	r18, 0x66	; 102
     5b8:	38 07       	cpc	r19, r24
     5ba:	50 f4       	brcc	.+20     	; 0x5d0 <__vector_11+0xc8>
				if (++lvt >= 100)
     5bc:	80 91 27 01 	lds	r24, 0x0127
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	80 93 27 01 	sts	0x0127, r24
     5c6:	84 36       	cpi	r24, 0x64	; 100
     5c8:	88 f0       	brcs	.+34     	; 0x5ec <__vector_11+0xe4>
				{
					LED_RED_ON();
     5ca:	44 98       	cbi	0x08, 4	; 8
					LED_GREEN_OFF();
     5cc:	45 9a       	sbi	0x08, 5	; 8
     5ce:	0e c0       	rjmp	.+28     	; 0x5ec <__vector_11+0xe4>
				}
					
			} else {
				lvt = 0;
     5d0:	10 92 27 01 	sts	0x0127, r1
     5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__vector_11+0xdc>
				LED_GREEN_ON();
				LED_RED_OFF();
			}
		}
		else if(++led & 0x20)
     5d6:	80 91 28 01 	lds	r24, 0x0128
     5da:	8f 5f       	subi	r24, 0xFF	; 255
     5dc:	80 93 28 01 	sts	0x0128, r24
     5e0:	85 ff       	sbrs	r24, 5
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__vector_11+0xe0>
		{
			LED_GREEN_ON();
     5e4:	45 98       	cbi	0x08, 5	; 8
     5e6:	01 c0       	rjmp	.+2      	; 0x5ea <__vector_11+0xe2>
		else {
			LED_GREEN_OFF();
			LED_RED_OFF();
		}
	} else {
		LED_GREEN_OFF();
     5e8:	45 9a       	sbi	0x08, 5	; 8
		LED_RED_OFF();
     5ea:	44 9a       	sbi	0x08, 4	; 8
	}
	
	if (ad < (WORD)(VI_OBT/2/3.0*1024)) {
     5ec:	24 54       	subi	r18, 0x44	; 68
     5ee:	32 40       	sbci	r19, 0x02	; 2
     5f0:	68 f4       	brcc	.+26     	; 0x60c <__vector_11+0x104>
		if (++ovt >= 100)
     5f2:	80 91 26 01 	lds	r24, 0x0126
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	80 93 26 01 	sts	0x0126, r24
     5fc:	84 36       	cpi	r24, 0x64	; 100
     5fe:	40 f0       	brcs	.+16     	; 0x610 <__vector_11+0x108>
			Stat |= F_LVD;
     600:	80 91 99 03 	lds	r24, 0x0399
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 93 99 03 	sts	0x0399, r24
     60a:	02 c0       	rjmp	.+4      	; 0x610 <__vector_11+0x108>
	} else {
		ovt = 0;
     60c:	10 92 26 01 	sts	0x0126, r1
	}
	
	ADMUX =  0b01000111;
     610:	87 e4       	ldi	r24, 0x47	; 71
     612:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 0b11000110;
     616:	86 ec       	ldi	r24, 0xC6	; 198
     618:	80 93 7a 00 	sts	0x007A, r24
}
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	3f 91       	pop	r19
     622:	2f 91       	pop	r18
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <get_fattime>:
/*---------------------------------------------------------*/


DWORD get_fattime ()
{
	return	  ((DWORD)(Ct->tm_year - 1980) << 25)
     62e:	e0 91 32 01 	lds	r30, 0x0132
     632:	f0 91 33 01 	lds	r31, 0x0133
     636:	24 81       	ldd	r18, Z+4	; 0x04
     638:	35 81       	ldd	r19, Z+5	; 0x05
     63a:	44 27       	eor	r20, r20
     63c:	37 fd       	sbrc	r19, 7
     63e:	40 95       	com	r20
     640:	54 2f       	mov	r21, r20
     642:	7b e0       	ldi	r23, 0x0B	; 11
     644:	22 0f       	add	r18, r18
     646:	33 1f       	adc	r19, r19
     648:	44 1f       	adc	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	7a 95       	dec	r23
     64e:	d1 f7       	brne	.-12     	; 0x644 <get_fattime+0x16>
     650:	86 81       	ldd	r24, Z+6	; 0x06
     652:	97 81       	ldd	r25, Z+7	; 0x07
     654:	aa 27       	eor	r26, r26
     656:	97 fd       	sbrc	r25, 7
     658:	a0 95       	com	r26
     65a:	ba 2f       	mov	r27, r26
     65c:	dc 01       	movw	r26, r24
     65e:	99 27       	eor	r25, r25
     660:	88 27       	eor	r24, r24
     662:	28 2b       	or	r18, r24
     664:	39 2b       	or	r19, r25
     666:	4a 2b       	or	r20, r26
     668:	5b 2b       	or	r21, r27
     66a:	82 81       	ldd	r24, Z+2	; 0x02
     66c:	93 81       	ldd	r25, Z+3	; 0x03
     66e:	aa 27       	eor	r26, r26
     670:	97 fd       	sbrc	r25, 7
     672:	a0 95       	com	r26
     674:	ba 2f       	mov	r27, r26
     676:	75 e0       	ldi	r23, 0x05	; 5
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	aa 1f       	adc	r26, r26
     67e:	bb 1f       	adc	r27, r27
     680:	7a 95       	dec	r23
     682:	d1 f7       	brne	.-12     	; 0x678 <get_fattime+0x4a>
     684:	28 2b       	or	r18, r24
     686:	39 2b       	or	r19, r25
     688:	4a 2b       	or	r20, r26
     68a:	5b 2b       	or	r21, r27
     68c:	80 81       	ld	r24, Z
     68e:	91 81       	ldd	r25, Z+1	; 0x01
     690:	aa 27       	eor	r26, r26
     692:	97 fd       	sbrc	r25, 7
     694:	a0 95       	com	r26
     696:	ba 2f       	mov	r27, r26
     698:	b6 95       	lsr	r27
     69a:	a7 95       	ror	r26
     69c:	97 95       	ror	r25
     69e:	87 95       	ror	r24
     6a0:	28 2b       	or	r18, r24
     6a2:	39 2b       	or	r19, r25
     6a4:	4a 2b       	or	r20, r26
     6a6:	5b 2b       	or	r21, r27
     6a8:	82 85       	ldd	r24, Z+10	; 0x0a
     6aa:	93 85       	ldd	r25, Z+11	; 0x0b
     6ac:	8c 5b       	subi	r24, 0xBC	; 188
     6ae:	97 40       	sbci	r25, 0x07	; 7
     6b0:	aa 27       	eor	r26, r26
     6b2:	97 fd       	sbrc	r25, 7
     6b4:	a0 95       	com	r26
     6b6:	ba 2f       	mov	r27, r26
     6b8:	79 e1       	ldi	r23, 0x19	; 25
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	aa 1f       	adc	r26, r26
     6c0:	bb 1f       	adc	r27, r27
     6c2:	7a 95       	dec	r23
     6c4:	d1 f7       	brne	.-12     	; 0x6ba <get_fattime+0x8c>
     6c6:	28 2b       	or	r18, r24
     6c8:	39 2b       	or	r19, r25
     6ca:	4a 2b       	or	r20, r26
     6cc:	5b 2b       	or	r21, r27
     6ce:	80 85       	ldd	r24, Z+8	; 0x08
     6d0:	91 85       	ldd	r25, Z+9	; 0x09
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	aa 27       	eor	r26, r26
     6d6:	97 fd       	sbrc	r25, 7
     6d8:	a0 95       	com	r26
     6da:	ba 2f       	mov	r27, r26
     6dc:	65 e1       	ldi	r22, 0x15	; 21
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	aa 1f       	adc	r26, r26
     6e4:	bb 1f       	adc	r27, r27
     6e6:	6a 95       	dec	r22
     6e8:	d1 f7       	brne	.-12     	; 0x6de <get_fattime+0xb0>
     6ea:	28 2b       	or	r18, r24
     6ec:	39 2b       	or	r19, r25
     6ee:	4a 2b       	or	r20, r26
     6f0:	5b 2b       	or	r21, r27
			| ((DWORD)(Ct->tm_mon + 1) << 21)
			| ((DWORD)Ct->tm_mday << 16)
			| ((DWORD)Ct->tm_hour << 11)
			| ((DWORD)Ct->tm_min << 5)
			| ((DWORD)Ct->tm_sec >> 1);
}
     6f2:	b9 01       	movw	r22, r18
     6f4:	ca 01       	movw	r24, r20
     6f6:	08 95       	ret

000006f8 <beep>:

/*--------------------------------------------------------------------------*/
/* Controls                                                                 */

void beep (BYTE len, BYTE cnt)
{
     6f8:	98 2f       	mov	r25, r24
	while (cnt--) {
		BEEP_ON();
     6fa:	42 e5       	ldi	r20, 0x52	; 82
     6fc:	33 e4       	ldi	r19, 0x43	; 67
		DLY_10MS(len);
		BEEP_OFF();
     6fe:	22 ea       	ldi	r18, 0xA2	; 162
     700:	10 c0       	rjmp	.+32     	; 0x722 <beep+0x2a>
/* Controls                                                                 */

void beep (BYTE len, BYTE cnt)
{
	while (cnt--) {
		BEEP_ON();
     702:	44 bd       	out	0x24, r20	; 36
     704:	35 bd       	out	0x25, r19	; 37
		DLY_10MS(len);
     706:	90 93 96 03 	sts	0x0396, r25
     70a:	80 91 96 03 	lds	r24, 0x0396
     70e:	88 23       	and	r24, r24
     710:	e1 f7       	brne	.-8      	; 0x70a <beep+0x12>
		BEEP_OFF();
     712:	24 bd       	out	0x24, r18	; 36
		DLY_10MS(len);
     714:	90 93 96 03 	sts	0x0396, r25
     718:	80 91 96 03 	lds	r24, 0x0396
     71c:	88 23       	and	r24, r24
     71e:	e1 f7       	brne	.-8      	; 0x718 <beep+0x20>
     720:	61 50       	subi	r22, 0x01	; 1
/*--------------------------------------------------------------------------*/
/* Controls                                                                 */

void beep (BYTE len, BYTE cnt)
{
	while (cnt--) {
     722:	66 23       	and	r22, r22
     724:	71 f7       	brne	.-36     	; 0x702 <beep+0xa>
		BEEP_ON();
		DLY_10MS(len);
		BEEP_OFF();
		DLY_10MS(len);
	}
}
     726:	08 95       	ret

00000728 <gp_comp>:



/* Compare sentence header string */
BYTE gp_comp (const char *str1, const prog_char *str2)
{
     728:	dc 01       	movw	r26, r24
     72a:	fb 01       	movw	r30, r22
	char c;

	do {
		c = pgm_read_byte(str2++);
     72c:	6f 5f       	subi	r22, 0xFF	; 255
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	94 91       	lpm	r25, Z+
	} while (c && c == *str1++);
     732:	99 23       	and	r25, r25
     734:	29 f0       	breq	.+10     	; 0x740 <gp_comp+0x18>
     736:	8c 91       	ld	r24, X
     738:	98 17       	cp	r25, r24
     73a:	11 f4       	brne	.+4      	; 0x740 <gp_comp+0x18>
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	f5 cf       	rjmp	.-22     	; 0x72a <gp_comp+0x2>
	return c;
}
     740:	89 2f       	mov	r24, r25
     742:	08 95       	ret

00000744 <gp_val>:

static
BYTE gp_val (
	const BYTE *db
)
{
     744:	fc 01       	movw	r30, r24
	BYTE n, m;


	n = *db++ - '0';
     746:	90 81       	ld	r25, Z
     748:	90 53       	subi	r25, 0x30	; 48
	if (n >= 10) return 0;
     74a:	9a 30       	cpi	r25, 0x0A	; 10
     74c:	50 f4       	brcc	.+20     	; 0x762 <gp_val+0x1e>
	m = *db - '0';
     74e:	21 81       	ldd	r18, Z+1	; 0x01
     750:	20 53       	subi	r18, 0x30	; 48
	if (m >= 10) return 0;
     752:	2a 30       	cpi	r18, 0x0A	; 10
     754:	30 f4       	brcc	.+12     	; 0x762 <gp_val+0x1e>

	return n * 10 + m;
     756:	8a e0       	ldi	r24, 0x0A	; 10
     758:	98 9f       	mul	r25, r24
     75a:	c0 01       	movw	r24, r0
     75c:	11 24       	eor	r1, r1
     75e:	82 0f       	add	r24, r18
     760:	08 95       	ret
     762:	80 e0       	ldi	r24, 0x00	; 0
}
     764:	08 95       	ret

00000766 <gp_rmctime>:

static
int gp_rmctime (	/* 1:An RMC sentence with valid flag is detected */
	const char *str
)
{
     766:	a6 e1       	ldi	r26, 0x16	; 22
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e9 eb       	ldi	r30, 0xB9	; 185
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__+0x18>
     772:	7c 01       	movw	r14, r24
     774:	dc 01       	movw	r26, r24
	const BYTE *p;
	struct tm tmc;
	time_t utc;


	if (gp_comp(str, PSTR("$GPRMC"))) return 0;	/* Not the RMC */
     776:	26 e9       	ldi	r18, 0x96	; 150
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
BYTE gp_comp (const char *str1, const prog_char *str2)
{
	char c;

	do {
		c = pgm_read_byte(str2++);
     77c:	2f 5f       	subi	r18, 0xFF	; 255
     77e:	3f 4f       	sbci	r19, 0xFF	; 255
     780:	94 91       	lpm	r25, Z+
	} while (c && c == *str1++);
     782:	99 23       	and	r25, r25
     784:	31 f0       	breq	.+12     	; 0x792 <gp_rmctime+0x2c>
     786:	8c 91       	ld	r24, X
     788:	98 17       	cp	r25, r24
     78a:	09 f0       	breq	.+2      	; 0x78e <gp_rmctime+0x28>
     78c:	83 c0       	rjmp	.+262    	; 0x894 <gp_rmctime+0x12e>
     78e:	11 96       	adiw	r26, 0x01	; 1
     790:	f4 cf       	rjmp	.-24     	; 0x77a <gp_rmctime+0x14>
     792:	f7 01       	movw	r30, r14
     794:	82 e0       	ldi	r24, 0x02	; 2
	BYTE c;


	while (col) {
		do {
			c = *buf++;
     796:	90 81       	ld	r25, Z
			if (c <= ' ') return NULL;
     798:	91 32       	cpi	r25, 0x21	; 33
     79a:	50 f0       	brcs	.+20     	; 0x7b0 <gp_rmctime+0x4a>
	BYTE c;


	while (col) {
		do {
			c = *buf++;
     79c:	31 96       	adiw	r30, 0x01	; 1
			if (c <= ' ') return NULL;
		} while (c != ',');
     79e:	9c 32       	cpi	r25, 0x2C	; 44
     7a0:	d1 f7       	brne	.-12     	; 0x796 <gp_rmctime+0x30>
		col--;
     7a2:	81 50       	subi	r24, 0x01	; 1
	BYTE col			/* Column number (0 is the 1st item) */
) {
	BYTE c;


	while (col) {
     7a4:	c1 f7       	brne	.-16     	; 0x796 <gp_rmctime+0x30>


	if (gp_comp(str, PSTR("$GPRMC"))) return 0;	/* Not the RMC */

	p = gp_col(str, 2);		/* Get status */
	if (!p || *p != 'A') {
     7a6:	30 97       	sbiw	r30, 0x00	; 0
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <gp_rmctime+0x4a>
     7aa:	80 81       	ld	r24, Z
     7ac:	81 34       	cpi	r24, 0x41	; 65
     7ae:	31 f0       	breq	.+12     	; 0x7bc <gp_rmctime+0x56>
		Stat &= ~F_GPSOK;
     7b0:	80 91 99 03 	lds	r24, 0x0399
     7b4:	87 7f       	andi	r24, 0xF7	; 247
     7b6:	80 93 99 03 	sts	0x0399, r24
     7ba:	6c c0       	rjmp	.+216    	; 0x894 <gp_rmctime+0x12e>
		return 0;
     7bc:	87 01       	movw	r16, r14
     7be:	81 e0       	ldi	r24, 0x01	; 1
	BYTE c;


	while (col) {
		do {
			c = *buf++;
     7c0:	f8 01       	movw	r30, r16
     7c2:	90 81       	ld	r25, Z
			if (c <= ' ') return NULL;
     7c4:	91 32       	cpi	r25, 0x21	; 33
     7c6:	08 f4       	brcc	.+2      	; 0x7ca <gp_rmctime+0x64>
     7c8:	65 c0       	rjmp	.+202    	; 0x894 <gp_rmctime+0x12e>
	BYTE c;


	while (col) {
		do {
			c = *buf++;
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
			if (c <= ' ') return NULL;
		} while (c != ',');
     7ce:	9c 32       	cpi	r25, 0x2C	; 44
     7d0:	b9 f7       	brne	.-18     	; 0x7c0 <gp_rmctime+0x5a>
		col--;
     7d2:	81 50       	subi	r24, 0x01	; 1
	BYTE col			/* Column number (0 is the 1st item) */
) {
	BYTE c;


	while (col) {
     7d4:	a9 f7       	brne	.-22     	; 0x7c0 <gp_rmctime+0x5a>
		Stat &= ~F_GPSOK;
		return 0;
	}

	p = gp_col(str, 1);		/* Get h:m:s */
	if (!p) return 0;
     7d6:	01 15       	cp	r16, r1
     7d8:	11 05       	cpc	r17, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <gp_rmctime+0x78>
     7dc:	5b c0       	rjmp	.+182    	; 0x894 <gp_rmctime+0x12e>
	tmc.tm_hour = gp_val(p);
     7de:	c8 01       	movw	r24, r16
     7e0:	0e 94 a2 03 	call	0x744	; 0x744 <gp_val>
     7e4:	89 87       	std	Y+9, r24	; 0x09
     7e6:	1a 86       	std	Y+10, r1	; 0x0a
	tmc.tm_min = gp_val(p+2);
     7e8:	c8 01       	movw	r24, r16
     7ea:	02 96       	adiw	r24, 0x02	; 2
     7ec:	0e 94 a2 03 	call	0x744	; 0x744 <gp_val>
     7f0:	8f 83       	std	Y+7, r24	; 0x07
     7f2:	18 86       	std	Y+8, r1	; 0x08
	tmc.tm_sec = gp_val(p+4);
     7f4:	c8 01       	movw	r24, r16
     7f6:	04 96       	adiw	r24, 0x04	; 4
     7f8:	0e 94 a2 03 	call	0x744	; 0x744 <gp_val>
     7fc:	8d 83       	std	Y+5, r24	; 0x05
     7fe:	1e 82       	std	Y+6, r1	; 0x06
     800:	89 e0       	ldi	r24, 0x09	; 9
	BYTE c;


	while (col) {
		do {
			c = *buf++;
     802:	f7 01       	movw	r30, r14
     804:	90 81       	ld	r25, Z
			if (c <= ' ') return NULL;
     806:	91 32       	cpi	r25, 0x21	; 33
     808:	08 f4       	brcc	.+2      	; 0x80c <gp_rmctime+0xa6>
     80a:	44 c0       	rjmp	.+136    	; 0x894 <gp_rmctime+0x12e>
	BYTE c;


	while (col) {
		do {
			c = *buf++;
     80c:	08 94       	sec
     80e:	e1 1c       	adc	r14, r1
     810:	f1 1c       	adc	r15, r1
			if (c <= ' ') return NULL;
		} while (c != ',');
     812:	9c 32       	cpi	r25, 0x2C	; 44
     814:	b1 f7       	brne	.-20     	; 0x802 <gp_rmctime+0x9c>
		col--;
     816:	81 50       	subi	r24, 0x01	; 1
	BYTE col			/* Column number (0 is the 1st item) */
) {
	BYTE c;


	while (col) {
     818:	a1 f7       	brne	.-24     	; 0x802 <gp_rmctime+0x9c>
	tmc.tm_hour = gp_val(p);
	tmc.tm_min = gp_val(p+2);
	tmc.tm_sec = gp_val(p+4);

	p = gp_col(str, 9);		/* Get y:m:d */
	if (!p) return 0;
     81a:	e1 14       	cp	r14, r1
     81c:	f1 04       	cpc	r15, r1
     81e:	d1 f1       	breq	.+116    	; 0x894 <gp_rmctime+0x12e>
	tmc.tm_mday = gp_val(p);
     820:	c7 01       	movw	r24, r14
     822:	0e 94 a2 03 	call	0x744	; 0x744 <gp_val>
     826:	8b 87       	std	Y+11, r24	; 0x0b
     828:	1c 86       	std	Y+12, r1	; 0x0c
	tmc.tm_mon = gp_val(p+2) - 1;
     82a:	c7 01       	movw	r24, r14
     82c:	02 96       	adiw	r24, 0x02	; 2
     82e:	0e 94 a2 03 	call	0x744	; 0x744 <gp_val>
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	9e 87       	std	Y+14, r25	; 0x0e
     838:	8d 87       	std	Y+13, r24	; 0x0d
	tmc.tm_year = gp_val(p+4) + 100;
     83a:	c7 01       	movw	r24, r14
     83c:	04 96       	adiw	r24, 0x04	; 4
     83e:	0e 94 a2 03 	call	0x744	; 0x744 <gp_val>
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	8c 59       	subi	r24, 0x9C	; 156
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	98 8b       	std	Y+16, r25	; 0x10
     84a:	8f 87       	std	Y+15, r24	; 0x0f

	utc = mktime(&tmc);				/* Check time validity */
     84c:	ce 01       	movw	r24, r28
     84e:	05 96       	adiw	r24, 0x05	; 5
     850:	0e 94 c8 01 	call	0x390	; 0x390 <mktime>
	if (utc == -1) return 0;
     854:	6f 3f       	cpi	r22, 0xFF	; 255
     856:	ff ef       	ldi	r31, 0xFF	; 255
     858:	7f 07       	cpc	r23, r31
     85a:	ff ef       	ldi	r31, 0xFF	; 255
     85c:	8f 07       	cpc	r24, r31
     85e:	ff ef       	ldi	r31, 0xFF	; 255
     860:	9f 07       	cpc	r25, r31
     862:	c1 f0       	breq	.+48     	; 0x894 <gp_rmctime+0x12e>
	utc += 3600 * 9;				/* Create time in JST*/
     864:	60 57       	subi	r22, 0x70	; 112
     866:	71 48       	sbci	r23, 0x81	; 129
     868:	8f 4f       	sbci	r24, 0xFF	; 255
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	7a 83       	std	Y+2, r23	; 0x02
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	9c 83       	std	Y+4, r25	; 0x04
	Ct = gmtime(&utc);
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	0e 94 20 02 	call	0x440	; 0x440 <gmtime>
     87c:	90 93 33 01 	sts	0x0133, r25
     880:	80 93 32 01 	sts	0x0132, r24

	Stat |= F_GPSOK;
     884:	80 91 99 03 	lds	r24, 0x0399
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	80 93 99 03 	sts	0x0399, r24
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <gp_rmctime+0x132>
	return 1;
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
}
     898:	c9 01       	movw	r24, r18
     89a:	66 96       	adiw	r28, 0x16	; 22
     89c:	e6 e0       	ldi	r30, 0x06	; 6
     89e:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x18>

000008a2 <enter_sleep>:
/* Power control */

void enter_sleep (
	int cause	/* 0:User, 1:Low battery, 2:Disk error */
)
{
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	ec 01       	movw	r28, r24
	UCSR0B = 0;			/* Disable UART */
     8a8:	10 92 c1 00 	sts	0x00C1, r1

	SPCR = 0;			/* Disable SPI */
     8ac:	1c bc       	out	0x2c, r1	; 44
	PORTB &= ~_BV(2);	/* MMC CS = L */
     8ae:	2a 98       	cbi	0x05, 2	; 5

	POWER_OFF();		/* MMC/GPS power off */
     8b0:	5b 98       	cbi	0x0b, 3	; 11

	Stat = 0;
     8b2:	10 92 99 03 	sts	0x0399, r1
	if (cause)
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	41 f0       	breq	.+16     	; 0x8ca <enter_sleep+0x28>
		beep(30, 3);	/* Three long beep (stopped due to error) */
     8ba:	8e e1       	ldi	r24, 0x1E	; 30
     8bc:	63 e0       	ldi	r22, 0x03	; 3
     8be:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <beep>
	else
		beep(50, 1);	/* One long beep (stopped by button or low battery) */

	if (cause == 1)		/* Stop GPS backup if low battery */
     8c2:	c1 30       	cpi	r28, 0x01	; 1
     8c4:	d1 05       	cpc	r29, r1
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <enter_sleep+0x32>
     8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <enter_sleep+0x36>

	Stat = 0;
	if (cause)
		beep(30, 3);	/* Three long beep (stopped due to error) */
	else
		beep(50, 1);	/* One long beep (stopped by button or low battery) */
     8ca:	82 e3       	ldi	r24, 0x32	; 50
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <beep>
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <enter_sleep+0x36>

	if (cause == 1)		/* Stop GPS backup if low battery */
		BACKUP_OFF();
     8d4:	3a 98       	cbi	0x07, 2	; 7
     8d6:	42 98       	cbi	0x08, 2	; 8

	xprintf(PSTR("Enter sleep(%d)\r\n"), cause);
     8d8:	00 d0       	rcall	.+0      	; 0x8da <enter_sleep+0x38>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <enter_sleep+0x3a>
     8dc:	8a ea       	ldi	r24, 0xAA	; 170
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	ed b7       	in	r30, 0x3d	; 61
     8e2:	fe b7       	in	r31, 0x3e	; 62
     8e4:	92 83       	std	Z+2, r25	; 0x02
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	d4 83       	std	Z+4, r29	; 0x04
     8ea:	c3 83       	std	Z+3, r28	; 0x03
     8ec:	0e 94 37 01 	call	0x26e	; 0x26e <xprintf>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0

	do {
		/* Wait for button is released */
		while (BUTTON) DLY_10MS(5);
     8f8:	65 e0       	ldi	r22, 0x05	; 5

		/* Enter sleep mode */
		TIMSK1 = 0;				/* Disable TC1.oca interrupt */
		ADCSRA = 0;				/* Disable ADC */
		cli();
		EIFR = _BV(INTF0);		/* Enable INT0 */
     8fa:	91 e0       	ldi	r25, 0x01	; 1
		EIMSK = _BV(INT0);
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
		sleep_enable();
		MCUCR = _BV(BODS)|_BV(BODSE);	/* Disable BOD while sleep */
     8fc:	50 e6       	ldi	r21, 0x60	; 96
		MCUCR = _BV(BODS);
     8fe:	40 e4       	ldi	r20, 0x40	; 64
		sei();
		sleep_cpu();
		sleep_disable();

		/* Wakeup, delay 1sec */
		TIMSK1 = _BV(OCIE1A);	/* Enable TC1.oca interrupt */
     900:	32 e0       	ldi	r19, 0x02	; 2
		DLY_10MS(100);
     902:	24 e6       	ldi	r18, 0x64	; 100
     904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0x13>

	xprintf(PSTR("Enter sleep(%d)\r\n"), cause);

	do {
		/* Wait for button is released */
		while (BUTTON) DLY_10MS(5);
     906:	60 93 96 03 	sts	0x0396, r22
     90a:	80 91 96 03 	lds	r24, 0x0396
     90e:	88 23       	and	r24, r24
     910:	e1 f7       	brne	.-8      	; 0x90a <__stack+0xb>
     912:	4a 9b       	sbis	0x09, 2	; 9
     914:	f8 cf       	rjmp	.-16     	; 0x906 <__stack+0x7>

		/* Enter sleep mode */
		TIMSK1 = 0;				/* Disable TC1.oca interrupt */
     916:	10 92 6f 00 	sts	0x006F, r1
		ADCSRA = 0;				/* Disable ADC */
     91a:	10 92 7a 00 	sts	0x007A, r1
		cli();
     91e:	f8 94       	cli
		EIFR = _BV(INTF0);		/* Enable INT0 */
     920:	9c bb       	out	0x1c, r25	; 28
		EIMSK = _BV(INT0);
     922:	9d bb       	out	0x1d, r25	; 29
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     924:	83 b7       	in	r24, 0x33	; 51
     926:	81 7f       	andi	r24, 0xF1	; 241
     928:	84 60       	ori	r24, 0x04	; 4
     92a:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
     92c:	83 b7       	in	r24, 0x33	; 51
     92e:	81 60       	ori	r24, 0x01	; 1
     930:	83 bf       	out	0x33, r24	; 51
		MCUCR = _BV(BODS)|_BV(BODSE);	/* Disable BOD while sleep */
     932:	55 bf       	out	0x35, r21	; 53
		MCUCR = _BV(BODS);
     934:	45 bf       	out	0x35, r20	; 53
		sei();
     936:	78 94       	sei
		sleep_cpu();
     938:	88 95       	sleep
		sleep_disable();
     93a:	83 b7       	in	r24, 0x33	; 51
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	83 bf       	out	0x33, r24	; 51

		/* Wakeup, delay 1sec */
		TIMSK1 = _BV(OCIE1A);	/* Enable TC1.oca interrupt */
     940:	30 93 6f 00 	sts	0x006F, r19
		DLY_10MS(100);
     944:	20 93 96 03 	sts	0x0396, r18
     948:	80 91 96 03 	lds	r24, 0x0396
     94c:	88 23       	and	r24, r24
     94e:	e1 f7       	brne	.-8      	; 0x948 <__stack+0x49>
	} while (!BUTTON);
     950:	4a 99       	sbic	0x09, 2	; 9
     952:	df cf       	rjmp	.-66     	; 0x912 <__stack+0x13>

	xputs(PSTR("Exit sleep\r\n"));
     954:	8d e9       	ldi	r24, 0x9D	; 157
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 9e 00 	call	0x13c	; 0x13c <xputs>

	Stat = F_POW;
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	80 93 99 03 	sts	0x0399, r24
	beep(5, 1);		/* Single beep. */
     962:	85 e0       	ldi	r24, 0x05	; 5
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <beep>

	BACKUP_ON();			/* GPS backup on */
     96a:	42 9a       	sbi	0x08, 2	; 8
     96c:	3a 9a       	sbi	0x07, 2	; 7
	POWER_ON();				/* MMC/GPS power ON */
     96e:	5b 9a       	sbi	0x0b, 3	; 11
	DLY_10MS(10);			/* Delay 100ms */
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	80 93 96 03 	sts	0x0396, r24
     976:	80 91 96 03 	lds	r24, 0x0396
     97a:	88 23       	and	r24, r24
     97c:	e1 f7       	brne	.-8      	; 0x976 <__stack+0x77>

	PORTB |= _BV(2);		/* MMC CS = H */
     97e:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 0b01010000;		/* Initialize SPI port (Mode 0) */
     980:	80 e5       	ldi	r24, 0x50	; 80
     982:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0b00000001;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	8d bd       	out	0x2d, r24	; 45

	uart_init();
     988:	0e 94 be 09 	call	0x137c	; 0x137c <uart_init>

	/* Wait for button is released */
	while (BUTTON) DLY_10MS(5);
     98c:	95 e0       	ldi	r25, 0x05	; 5
     98e:	06 c0       	rjmp	.+12     	; 0x99c <__stack+0x9d>
     990:	90 93 96 03 	sts	0x0396, r25
     994:	80 91 96 03 	lds	r24, 0x0396
     998:	88 23       	and	r24, r24
     99a:	e1 f7       	brne	.-8      	; 0x994 <__stack+0x95>
     99c:	4a 9b       	sbis	0x09, 2	; 9
     99e:	f8 cf       	rjmp	.-16     	; 0x990 <__stack+0x91>

	Stat = F_POW;
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	80 93 99 03 	sts	0x0399, r24
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <get_line>:

int get_line (		/* 0:Button, -1:LVD, >0: Number of bytes received. */
	char *buff,
	UINT sz_buf
)
{
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	8c 01       	movw	r16, r24
     9ba:	7b 01       	movw	r14, r22
     9bc:	c0 e0       	ldi	r28, 0x00	; 0
     9be:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	UINT i = 0;

	for (;;) {
		if (Stat & F_BTN) return 0;		/* Button detected */
     9c0:	80 91 99 03 	lds	r24, 0x0399
     9c4:	84 fd       	sbrc	r24, 4
     9c6:	2b c0       	rjmp	.+86     	; 0xa1e <get_line+0x72>
		if (Stat & F_LVD) return -1;	/* Low battery is detected */
     9c8:	80 91 99 03 	lds	r24, 0x0399
     9cc:	80 ff       	sbrs	r24, 0
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <get_line+0x2a>
     9d0:	2f ef       	ldi	r18, 0xFF	; 255
     9d2:	3f ef       	ldi	r19, 0xFF	; 255
     9d4:	26 c0       	rjmp	.+76     	; 0xa22 <get_line+0x76>
		c = uart_get();	/* Get a byte */
     9d6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <uart_get>
		if (!c) {		/* Sleep if no data arrived */
     9da:	88 23       	and	r24, r24
     9dc:	59 f4       	brne	.+22     	; 0x9f4 <get_line+0x48>
			set_sleep_mode(SLEEP_MODE_IDLE);
     9de:	83 b7       	in	r24, 0x33	; 51
     9e0:	81 7f       	andi	r24, 0xF1	; 241
     9e2:	83 bf       	out	0x33, r24	; 51
			sleep_mode();
     9e4:	83 b7       	in	r24, 0x33	; 51
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	83 bf       	out	0x33, r24	; 51
     9ea:	88 95       	sleep
     9ec:	83 b7       	in	r24, 0x33	; 51
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	83 bf       	out	0x33, r24	; 51
     9f2:	e6 cf       	rjmp	.-52     	; 0x9c0 <get_line+0x14>
			continue;
		}
		if (i == 0 && c != '$') continue;	/* Find start of line */
     9f4:	20 97       	sbiw	r28, 0x00	; 0
     9f6:	11 f4       	brne	.+4      	; 0x9fc <get_line+0x50>
     9f8:	84 32       	cpi	r24, 0x24	; 36
     9fa:	11 f7       	brne	.-60     	; 0x9c0 <get_line+0x14>
		buff[i++] = c;
     9fc:	f8 01       	movw	r30, r16
     9fe:	ec 0f       	add	r30, r28
     a00:	fd 1f       	adc	r31, r29
     a02:	80 83       	st	Z, r24
     a04:	21 96       	adiw	r28, 0x01	; 1
		if (c == '\n') { buff[i] = 0; break; }	/* End of line */
     a06:	8a 30       	cpi	r24, 0x0A	; 10
     a08:	31 f4       	brne	.+12     	; 0xa16 <get_line+0x6a>
     a0a:	0c 0f       	add	r16, r28
     a0c:	1d 1f       	adc	r17, r29
     a0e:	f8 01       	movw	r30, r16
     a10:	10 82       	st	Z, r1
		if (i >= sz_buf) { i = 0; continue; }	/* Buffer overflow (abort this line) */
	}

	return i;
     a12:	9e 01       	movw	r18, r28
     a14:	06 c0       	rjmp	.+12     	; 0xa22 <get_line+0x76>
			continue;
		}
		if (i == 0 && c != '$') continue;	/* Find start of line */
		buff[i++] = c;
		if (c == '\n') { buff[i] = 0; break; }	/* End of line */
		if (i >= sz_buf) { i = 0; continue; }	/* Buffer overflow (abort this line) */
     a16:	ce 15       	cp	r28, r14
     a18:	df 05       	cpc	r29, r15
     a1a:	80 f6       	brcc	.-96     	; 0x9bc <get_line+0x10>
     a1c:	d1 cf       	rjmp	.-94     	; 0x9c0 <get_line+0x14>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
	}

	return i;
}
     a22:	c9 01       	movw	r24, r18
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	e6 e0       	ldi	r30, 0x06	; 6
     a2a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x18>

00000a2e <main>:
/*-----------------------------------------------------------------------*/
/* Main                                                                  */


int main (void)
{
     a2e:	a2 e0       	ldi	r26, 0x02	; 2
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	ed e1       	ldi	r30, 0x1D	; 29
     a34:	f5 e0       	ldi	r31, 0x05	; 5
     a36:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__prologue_saves__+0x4>


static
void ioinit (void)
{
	PORTB = 0b11000011;	 	// Port B
     a3a:	83 ec       	ldi	r24, 0xC3	; 195
     a3c:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b00101100;
     a3e:	8c e2       	ldi	r24, 0x2C	; 44
     a40:	84 b9       	out	0x04, r24	; 4

	PORTC = 0b111011;		// Port C
     a42:	8b e3       	ldi	r24, 0x3B	; 59
     a44:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b110000;
     a46:	80 e3       	ldi	r24, 0x30	; 48
     a48:	87 b9       	out	0x07, r24	; 7

	PORTD = 0b00010100;		// Port D
     a4a:	84 e1       	ldi	r24, 0x14	; 20
     a4c:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0b11101000;
     a4e:	88 ee       	ldi	r24, 0xE8	; 232
     a50:	8a b9       	out	0x0a, r24	; 10

	OCR1A = F_CPU/8/100-1;		// Timer1: 100Hz interval (OC1A)
     a52:	8f e0       	ldi	r24, 0x0F	; 15
     a54:	97 e2       	ldi	r25, 0x27	; 39
     a56:	90 93 89 00 	sts	0x0089, r25
     a5a:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = 0b00001010;
     a5e:	8a e0       	ldi	r24, 0x0A	; 10
     a60:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = _BV(OCIE1A);		// Enable TC1.oca interrupt
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	80 93 6f 00 	sts	0x006F, r24

	OCR0A = F_CPU/64/4000/2-1;	// Timer0: 4kHz sound (OC0A)
     a6a:	8e e0       	ldi	r24, 0x0E	; 14
     a6c:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0b10100010;
     a6e:	82 ea       	ldi	r24, 0xA2	; 162
     a70:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	85 bd       	out	0x25, r24	; 37

	ACSR = _BV(ACD);		/* Disable analog comp */
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	80 bf       	out	0x30, r24	; 48

	sei();
     a7a:	78 94       	sei
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
	ioinit();

	ls = 0;
	for (;;) {
		enter_sleep(ls);
		DLY_10MS(10);			/* Delay 100ms */
     a80:	8a e0       	ldi	r24, 0x0A	; 10
     a82:	c8 2e       	mov	r12, r24
		}
		xputs(PSTR("FS Ok\n"));

		log = 0;
		for (;;) {
			ls = get_line(Line, sizeof Line);
     a84:	ba e9       	ldi	r27, 0x9A	; 154
     a86:	eb 2e       	mov	r14, r27
     a88:	b3 e0       	ldi	r27, 0x03	; 3
     a8a:	fb 2e       	mov	r15, r27
			if (ls <= 0) break;
			xprintf(PSTR("%s"), Line);
     a8c:	a2 e8       	ldi	r26, 0x82	; 130
     a8e:	4a 2e       	mov	r4, r26
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	5a 2e       	mov	r5, r26
					}
					beep(5, 2);		/* Two beeps. Start logging. */
				}
			} else {
				gp_rmctime(Line);
				f_write(&File1, Line, ls, &bw);
     a94:	3e 01       	movw	r6, r28
     a96:	08 94       	sec
     a98:	61 1c       	adc	r6, r1
     a9a:	71 1c       	adc	r7, r1
			xprintf(PSTR("%s"), Line);

			if (!log) {
				log = gp_rmctime(Line);
				if (log) {	/* Initial wait for valid RMC sentence */
					xsprintf(Line, PSTR("%02u%02u%02u.LOG"), Ct->tm_year % 100, Ct->tm_mon + 1, Ct->tm_mday);
     a9c:	f1 e7       	ldi	r31, 0x71	; 113
     a9e:	8f 2e       	mov	r8, r31
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	9f 2e       	mov	r9, r31
					xprintf(PSTR("Open %s\n"), Line);
     aa4:	e8 e6       	ldi	r30, 0x68	; 104
     aa6:	ae 2e       	mov	r10, r30
     aa8:	e0 e0       	ldi	r30, 0x00	; 0
     aaa:	be 2e       	mov	r11, r30
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <main+0x84>
	TCCR0A = 0b10100010;
	TCCR0B = 0b00000011;

	ACSR = _BV(ACD);		/* Disable analog comp */

	sei();
     aae:	02 e0       	ldi	r16, 0x02	; 2
     ab0:	10 e0       	ldi	r17, 0x00	; 0

	ioinit();

	ls = 0;
	for (;;) {
		enter_sleep(ls);
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <enter_sleep>
		DLY_10MS(10);			/* Delay 100ms */
     ab8:	c0 92 96 03 	sts	0x0396, r12
     abc:	80 91 96 03 	lds	r24, 0x0396
     ac0:	88 23       	and	r24, r24
     ac2:	e1 f7       	brne	.-8      	; 0xabc <main+0x8e>
		gp_init();				/* Initialize GPS module */

		f_mount(0, &Fatfs);
     ac4:	64 e3       	ldi	r22, 0x34	; 52
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <f_mount>
		if (f_open(&File1, ")(", 0) != FR_NO_FILE) {	/* Force disk mounted */
     acc:	82 e6       	ldi	r24, 0x62	; 98
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <f_open>
     ada:	04 97       	sbiw	r24, 0x04	; 4
     adc:	29 f0       	breq	.+10     	; 0xae8 <main+0xba>
			xputs(PSTR("FS error\n"));
     ade:	8c e8       	ldi	r24, 0x8C	; 140
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 9e 00 	call	0x13c	; 0x13c <xputs>
     ae6:	e3 cf       	rjmp	.-58     	; 0xaae <main+0x80>
			ls = 2; continue;
		}
		xputs(PSTR("FS Ok\n"));
     ae8:	85 e8       	ldi	r24, 0x85	; 133
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 9e 00 	call	0x13c	; 0x13c <xputs>
     af0:	dd 24       	eor	r13, r13

		log = 0;
		for (;;) {
			ls = get_line(Line, sizeof Line);
     af2:	8a e9       	ldi	r24, 0x9A	; 154
     af4:	93 e0       	ldi	r25, 0x03	; 3
     af6:	64 e6       	ldi	r22, 0x64	; 100
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <get_line>
     afe:	8c 01       	movw	r16, r24
			if (ls <= 0) break;
     b00:	18 16       	cp	r1, r24
     b02:	19 06       	cpc	r1, r25
     b04:	0c f0       	brlt	.+2      	; 0xb08 <main+0xda>
     b06:	9b c0       	rjmp	.+310    	; 0xc3e <main+0x210>
			xprintf(PSTR("%s"), Line);
     b08:	00 d0       	rcall	.+0      	; 0xb0a <main+0xdc>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <main+0xde>
     b0c:	ad b7       	in	r26, 0x3d	; 61
     b0e:	be b7       	in	r27, 0x3e	; 62
     b10:	12 96       	adiw	r26, 0x02	; 2
     b12:	5c 92       	st	X, r5
     b14:	4e 92       	st	-X, r4
     b16:	11 97       	sbiw	r26, 0x01	; 1
     b18:	14 96       	adiw	r26, 0x04	; 4
     b1a:	fc 92       	st	X, r15
     b1c:	ee 92       	st	-X, r14
     b1e:	13 97       	sbiw	r26, 0x03	; 3
     b20:	0e 94 37 01 	call	0x26e	; 0x26e <xprintf>

			if (!log) {
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	dd 20       	and	r13, r13
     b2e:	09 f0       	breq	.+2      	; 0xb32 <main+0x104>
     b30:	65 c0       	rjmp	.+202    	; 0xbfc <main+0x1ce>
				log = gp_rmctime(Line);
     b32:	c7 01       	movw	r24, r14
     b34:	0e 94 b3 03 	call	0x766	; 0x766 <gp_rmctime>
     b38:	d8 2e       	mov	r13, r24
				if (log) {	/* Initial wait for valid RMC sentence */
     b3a:	88 23       	and	r24, r24
     b3c:	d1 f2       	breq	.-76     	; 0xaf2 <main+0xc4>
					xsprintf(Line, PSTR("%02u%02u%02u.LOG"), Ct->tm_year % 100, Ct->tm_mon + 1, Ct->tm_mday);
     b3e:	20 91 32 01 	lds	r18, 0x0132
     b42:	30 91 33 01 	lds	r19, 0x0133
     b46:	ed b7       	in	r30, 0x3d	; 61
     b48:	fe b7       	in	r31, 0x3e	; 62
     b4a:	3a 97       	sbiw	r30, 0x0a	; 10
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	fe bf       	out	0x3e, r31	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	ed bf       	out	0x3d, r30	; 61
     b56:	31 96       	adiw	r30, 0x01	; 1
     b58:	ad b7       	in	r26, 0x3d	; 61
     b5a:	be b7       	in	r27, 0x3e	; 62
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	fc 92       	st	X, r15
     b60:	ee 92       	st	-X, r14
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	93 82       	std	Z+3, r9	; 0x03
     b66:	82 82       	std	Z+2, r8	; 0x02
     b68:	d9 01       	movw	r26, r18
     b6a:	1a 96       	adiw	r26, 0x0a	; 10
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	1b 97       	sbiw	r26, 0x0b	; 11
     b72:	64 e6       	ldi	r22, 0x64	; 100
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <__divmodhi4>
     b7a:	95 83       	std	Z+5, r25	; 0x05
     b7c:	84 83       	std	Z+4, r24	; 0x04
     b7e:	d9 01       	movw	r26, r18
     b80:	18 96       	adiw	r26, 0x08	; 8
     b82:	8d 91       	ld	r24, X+
     b84:	9c 91       	ld	r25, X
     b86:	19 97       	sbiw	r26, 0x09	; 9
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	97 83       	std	Z+7, r25	; 0x07
     b8c:	86 83       	std	Z+6, r24	; 0x06
     b8e:	16 96       	adiw	r26, 0x06	; 6
     b90:	8d 91       	ld	r24, X+
     b92:	9c 91       	ld	r25, X
     b94:	17 97       	sbiw	r26, 0x07	; 7
     b96:	91 87       	std	Z+9, r25	; 0x09
     b98:	80 87       	std	Z+8, r24	; 0x08
     b9a:	0e 94 44 01 	call	0x288	; 0x288 <xsprintf>
					xprintf(PSTR("Open %s\n"), Line);
     b9e:	ed b7       	in	r30, 0x3d	; 61
     ba0:	fe b7       	in	r31, 0x3e	; 62
     ba2:	36 96       	adiw	r30, 0x06	; 6
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	fe bf       	out	0x3e, r31	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	ed bf       	out	0x3d, r30	; 61
     bae:	b2 82       	std	Z+2, r11	; 0x02
     bb0:	a1 82       	std	Z+1, r10	; 0x01
     bb2:	f4 82       	std	Z+4, r15	; 0x04
     bb4:	e3 82       	std	Z+3, r14	; 0x03
     bb6:	0e 94 37 01 	call	0x26e	; 0x26e <xprintf>
					if (f_open(&File1, Line, FA_WRITE | FA_OPEN_ALWAYS)		/* Open log file */
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	82 e6       	ldi	r24, 0x62	; 98
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	b7 01       	movw	r22, r14
     bc8:	42 e1       	ldi	r20, 0x12	; 18
     bca:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <f_open>
     bce:	89 2b       	or	r24, r25
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <main+0x1a6>
     bd2:	6d cf       	rjmp	.-294    	; 0xaae <main+0x80>
     bd4:	40 91 6c 03 	lds	r20, 0x036C
     bd8:	50 91 6d 03 	lds	r21, 0x036D
     bdc:	60 91 6e 03 	lds	r22, 0x036E
     be0:	70 91 6f 03 	lds	r23, 0x036F
     be4:	82 e6       	ldi	r24, 0x62	; 98
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <f_lseek>
     bec:	89 2b       	or	r24, r25
     bee:	09 f0       	breq	.+2      	; 0xbf2 <main+0x1c4>
     bf0:	5e cf       	rjmp	.-324    	; 0xaae <main+0x80>
						|| f_lseek(&File1, File1.fsize)) {					/* Append mode */
						log = 0; ls = 2; break;		/* Failed to open log file */
					}
					beep(5, 2);		/* Two beeps. Start logging. */
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <beep>
     bfa:	7b cf       	rjmp	.-266    	; 0xaf2 <main+0xc4>
				}
			} else {
				gp_rmctime(Line);
     bfc:	c7 01       	movw	r24, r14
     bfe:	0e 94 b3 03 	call	0x766	; 0x766 <gp_rmctime>
				f_write(&File1, Line, ls, &bw);
     c02:	82 e6       	ldi	r24, 0x62	; 98
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	b7 01       	movw	r22, r14
     c08:	a8 01       	movw	r20, r16
     c0a:	93 01       	movw	r18, r6
     c0c:	0e 94 87 10 	call	0x210e	; 0x210e <f_write>
				if ((int)bw != ls) {
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	80 17       	cp	r24, r16
     c16:	91 07       	cpc	r25, r17
     c18:	e9 f4       	brne	.+58     	; 0xc54 <main+0x226>
					ls = 2; break;
				}
				if (Stat & F_SYNC) {
     c1a:	80 91 99 03 	lds	r24, 0x0399
     c1e:	82 ff       	sbrs	r24, 2
     c20:	68 cf       	rjmp	.-304    	; 0xaf2 <main+0xc4>
					if (f_sync(&File1)) {
     c22:	82 e6       	ldi	r24, 0x62	; 98
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	0e 94 dd 15 	call	0x2bba	; 0x2bba <f_sync>
     c2a:	89 2b       	or	r24, r25
     c2c:	99 f4       	brne	.+38     	; 0xc54 <main+0x226>
						ls = 2; break;
					}
					cli(); Stat &= ~F_SYNC; sei();
     c2e:	f8 94       	cli
     c30:	80 91 99 03 	lds	r24, 0x0399
     c34:	8b 7f       	andi	r24, 0xFB	; 251
     c36:	80 93 99 03 	sts	0x0399, r24
     c3a:	78 94       	sei
     c3c:	5a cf       	rjmp	.-332    	; 0xaf2 <main+0xc4>
				}
			}
		}

		if (log && f_close(&File1)) ls = 2;
     c3e:	dd 20       	and	r13, r13
     c40:	09 f4       	brne	.+2      	; 0xc44 <main+0x216>
     c42:	37 cf       	rjmp	.-402    	; 0xab2 <main+0x84>
     c44:	82 e6       	ldi	r24, 0x62	; 98
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	0e 94 99 16 	call	0x2d32	; 0x2d32 <f_close>
     c4c:	89 2b       	or	r24, r25
     c4e:	09 f0       	breq	.+2      	; 0xc52 <main+0x224>
     c50:	2e cf       	rjmp	.-420    	; 0xaae <main+0x80>
     c52:	2f cf       	rjmp	.-418    	; 0xab2 <main+0x84>
     c54:	02 e0       	ldi	r16, 0x02	; 2
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	f5 cf       	rjmp	.-22     	; 0xc44 <main+0x216>

00000c5a <wait_ready>:
BYTE wait_ready (void)
{
	BYTE res;


	MmcTmr[1] = 50;	/* Wait for ready in timeout of 500ms */
     c5a:	82 e3       	ldi	r24, 0x32	; 50
     c5c:	80 93 98 03 	sts	0x0398, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c64:	0d b4       	in	r0, 0x2d	; 45
     c66:	07 fe       	sbrs	r0, 7
     c68:	fd cf       	rjmp	.-6      	; 0xc64 <wait_ready+0xa>
	return SPDR;
     c6a:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     c6c:	2f ef       	ldi	r18, 0xFF	; 255
     c6e:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c70:	0d b4       	in	r0, 0x2d	; 45
     c72:	07 fe       	sbrs	r0, 7
     c74:	fd cf       	rjmp	.-6      	; 0xc70 <wait_ready+0x16>
	return SPDR;
     c76:	9e b5       	in	r25, 0x2e	; 46

	MmcTmr[1] = 50;	/* Wait for ready in timeout of 500ms */
	rcvr_spi();
	do
		res = rcvr_spi();
	while ((res != 0xFF) && MmcTmr[1]);
     c78:	9f 3f       	cpi	r25, 0xFF	; 255
     c7a:	21 f0       	breq	.+8      	; 0xc84 <wait_ready+0x2a>
     c7c:	80 91 98 03 	lds	r24, 0x0398
     c80:	88 23       	and	r24, r24
     c82:	a9 f7       	brne	.-22     	; 0xc6e <wait_ready+0x14>

	return res;
}
     c84:	89 2f       	mov	r24, r25
     c86:	08 95       	ret

00000c88 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be even number) */
)
{
     c88:	fc 01       	movw	r30, r24
	BYTE token;


	MmcTmr[0] = 10;
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	80 93 97 03 	sts	0x0397, r24
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     c90:	9f ef       	ldi	r25, 0xFF	; 255
     c92:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     c94:	0d b4       	in	r0, 0x2d	; 45
     c96:	07 fe       	sbrs	r0, 7
     c98:	fd cf       	rjmp	.-6      	; 0xc94 <rcvr_datablock+0xc>
	return SPDR;
     c9a:	8e b5       	in	r24, 0x2e	; 46


	MmcTmr[0] = 10;
	do {							/* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && MmcTmr[0]);
     c9c:	8f 3f       	cpi	r24, 0xFF	; 255
     c9e:	29 f4       	brne	.+10     	; 0xcaa <rcvr_datablock+0x22>
     ca0:	80 91 97 03 	lds	r24, 0x0397
     ca4:	88 23       	and	r24, r24
     ca6:	a9 f7       	brne	.-22     	; 0xc92 <rcvr_datablock+0xa>
     ca8:	23 c0       	rjmp	.+70     	; 0xcf0 <rcvr_datablock+0x68>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
     caa:	8e 3f       	cpi	r24, 0xFE	; 254
     cac:	09 f5       	brne	.+66     	; 0xcf0 <rcvr_datablock+0x68>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	9e bd       	out	0x2e, r25	; 46
     cb2:	0d b4       	in	r0, 0x2d	; 45
     cb4:	07 fe       	sbrs	r0, 7
     cb6:	fd cf       	rjmp	.-6      	; 0xcb2 <rcvr_datablock+0x2a>
     cb8:	8e b5       	in	r24, 0x2e	; 46
     cba:	80 83       	st	Z, r24
		rcvr_spi_m(buff++);
     cbc:	9e bd       	out	0x2e, r25	; 46
     cbe:	0d b4       	in	r0, 0x2d	; 45
     cc0:	07 fe       	sbrs	r0, 7
     cc2:	fd cf       	rjmp	.-6      	; 0xcbe <rcvr_datablock+0x36>
     cc4:	8e b5       	in	r24, 0x2e	; 46
     cc6:	81 83       	std	Z+1, r24	; 0x01
	} while (btr -= 2);
     cc8:	62 50       	subi	r22, 0x02	; 2
     cca:	70 40       	sbci	r23, 0x00	; 0
     ccc:	11 f0       	breq	.+4      	; 0xcd2 <rcvr_datablock+0x4a>
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be even number) */
)
{
     cce:	32 96       	adiw	r30, 0x02	; 2
     cd0:	ef cf       	rjmp	.-34     	; 0xcb0 <rcvr_datablock+0x28>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     cd6:	0d b4       	in	r0, 0x2d	; 45
     cd8:	07 fe       	sbrs	r0, 7
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <rcvr_datablock+0x4e>
	return SPDR;
     cdc:	8e b5       	in	r24, 0x2e	; 46
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     ce2:	0d b4       	in	r0, 0x2d	; 45
     ce4:	07 fe       	sbrs	r0, 7
     ce6:	fd cf       	rjmp	.-6      	; 0xce2 <rcvr_datablock+0x5a>
	return SPDR;
     ce8:	8e b5       	in	r24, 0x2e	; 46
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <rcvr_datablock+0x6c>
		rcvr_spi_m(buff++);
	} while (btr -= 2);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
}
     cf4:	c9 01       	movw	r24, r18
     cf6:	08 95       	ret

00000cf8 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	16 2f       	mov	r17, r22
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
     d02:	0e 94 2d 06 	call	0xc5a	; 0xc5a <wait_ready>
     d06:	8f 3f       	cpi	r24, 0xFF	; 255
     d08:	19 f0       	breq	.+6      	; 0xd10 <xmit_datablock+0x18>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	31 c0       	rjmp	.+98     	; 0xd72 <xmit_datablock+0x7a>

	xmit_spi(token);					/* Xmit data token */
     d10:	1e bd       	out	0x2e, r17	; 46
     d12:	0d b4       	in	r0, 0x2d	; 45
     d14:	07 fe       	sbrs	r0, 7
     d16:	fd cf       	rjmp	.-6      	; 0xd12 <xmit_datablock+0x1a>
	if (token != 0xFD) {	/* Is data token */
     d18:	1d 3f       	cpi	r17, 0xFD	; 253
     d1a:	19 f4       	brne	.+6      	; 0xd22 <xmit_datablock+0x2a>
     d1c:	21 e0       	ldi	r18, 0x01	; 1
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	28 c0       	rjmp	.+80     	; 0xd72 <xmit_datablock+0x7a>
     d22:	90 e0       	ldi	r25, 0x00	; 0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
     d24:	88 81       	ld	r24, Y
     d26:	8e bd       	out	0x2e, r24	; 46
     d28:	0d b4       	in	r0, 0x2d	; 45
     d2a:	07 fe       	sbrs	r0, 7
     d2c:	fd cf       	rjmp	.-6      	; 0xd28 <xmit_datablock+0x30>
			xmit_spi(*buff++);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8e bd       	out	0x2e, r24	; 46
     d32:	0d b4       	in	r0, 0x2d	; 45
     d34:	07 fe       	sbrs	r0, 7
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <xmit_datablock+0x3a>
		} while (--wc);
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	11 f0       	breq	.+4      	; 0xd40 <xmit_datablock+0x48>
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     d3c:	22 96       	adiw	r28, 0x02	; 2
     d3e:	f2 cf       	rjmp	.-28     	; 0xd24 <xmit_datablock+0x2c>
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);					/* CRC (Dummy) */
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	8e bd       	out	0x2e, r24	; 46
     d44:	0d b4       	in	r0, 0x2d	; 45
     d46:	07 fe       	sbrs	r0, 7
     d48:	fd cf       	rjmp	.-6      	; 0xd44 <xmit_datablock+0x4c>
		xmit_spi(0xFF);
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	8e bd       	out	0x2e, r24	; 46
     d4e:	0d b4       	in	r0, 0x2d	; 45
     d50:	07 fe       	sbrs	r0, 7
     d52:	fd cf       	rjmp	.-6      	; 0xd4e <xmit_datablock+0x56>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     d58:	0d b4       	in	r0, 0x2d	; 45
     d5a:	07 fe       	sbrs	r0, 7
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <xmit_datablock+0x60>
	return SPDR;
     d5e:	8e b5       	in	r24, 0x2e	; 46
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	8f 71       	andi	r24, 0x1F	; 31
     d64:	85 30       	cpi	r24, 0x05	; 5
     d66:	09 f0       	breq	.+2      	; 0xd6a <xmit_datablock+0x72>
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	98 27       	eor	r25, r24
     d6e:	29 2f       	mov	r18, r25
     d70:	30 e0       	ldi	r19, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
}
     d72:	c9 01       	movw	r24, r18
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	d8 2e       	mov	r13, r24
     d88:	7a 01       	movw	r14, r20
     d8a:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (wait_ready() != 0xFF) return 0xFF;
     d8c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <wait_ready>
     d90:	8f 3f       	cpi	r24, 0xFF	; 255
     d92:	11 f0       	breq	.+4      	; 0xd98 <send_cmd+0x1c>
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	42 c0       	rjmp	.+132    	; 0xe1c <send_cmd+0xa0>

	/* Send command packet */
	xmit_spi(cmd);						/* Command */
     d98:	de bc       	out	0x2e, r13	; 46
     d9a:	0d b4       	in	r0, 0x2d	; 45
     d9c:	07 fe       	sbrs	r0, 7
     d9e:	fd cf       	rjmp	.-6      	; 0xd9a <send_cmd+0x1e>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     da0:	81 2f       	mov	r24, r17
     da2:	99 27       	eor	r25, r25
     da4:	aa 27       	eor	r26, r26
     da6:	bb 27       	eor	r27, r27
     da8:	8e bd       	out	0x2e, r24	; 46
     daa:	0d b4       	in	r0, 0x2d	; 45
     dac:	07 fe       	sbrs	r0, 7
     dae:	fd cf       	rjmp	.-6      	; 0xdaa <send_cmd+0x2e>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     db0:	c8 01       	movw	r24, r16
     db2:	aa 27       	eor	r26, r26
     db4:	bb 27       	eor	r27, r27
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	0d b4       	in	r0, 0x2d	; 45
     dba:	07 fe       	sbrs	r0, 7
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <send_cmd+0x3c>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     dbe:	bb 27       	eor	r27, r27
     dc0:	a1 2f       	mov	r26, r17
     dc2:	90 2f       	mov	r25, r16
     dc4:	8f 2d       	mov	r24, r15
     dc6:	8e bd       	out	0x2e, r24	; 46
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <send_cmd+0x4c>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     dce:	ee bc       	out	0x2e, r14	; 46
     dd0:	0d b4       	in	r0, 0x2d	; 45
     dd2:	07 fe       	sbrs	r0, 7
     dd4:	fd cf       	rjmp	.-6      	; 0xdd0 <send_cmd+0x54>
	n = 0;
	if (cmd == CMD0) n = 0x95;			/* CRC for CMD0(0) */
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	d8 16       	cp	r13, r24
     dda:	11 f4       	brne	.+4      	; 0xde0 <send_cmd+0x64>
     ddc:	85 e9       	ldi	r24, 0x95	; 149
     dde:	06 c0       	rjmp	.+12     	; 0xdec <send_cmd+0x70>
	if (cmd == CMD8) n = 0x87;			/* CRC for CMD8(0x1AA) */
     de0:	88 e4       	ldi	r24, 0x48	; 72
     de2:	d8 16       	cp	r13, r24
     de4:	11 f4       	brne	.+4      	; 0xdea <send_cmd+0x6e>
     de6:	87 e8       	ldi	r24, 0x87	; 135
     de8:	01 c0       	rjmp	.+2      	; 0xdec <send_cmd+0x70>
     dea:	80 e0       	ldi	r24, 0x00	; 0
	xmit_spi(n);
     dec:	8e bd       	out	0x2e, r24	; 46
     dee:	0d b4       	in	r0, 0x2d	; 45
     df0:	07 fe       	sbrs	r0, 7
     df2:	fd cf       	rjmp	.-6      	; 0xdee <send_cmd+0x72>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
     df4:	8c e4       	ldi	r24, 0x4C	; 76
     df6:	d8 16       	cp	r13, r24
     df8:	31 f4       	brne	.+12     	; 0xe06 <send_cmd+0x8a>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     dfe:	0d b4       	in	r0, 0x2d	; 45
     e00:	07 fe       	sbrs	r0, 7
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <send_cmd+0x82>
	return SPDR;
     e04:	8e b5       	in	r24, 0x2e	; 46
     e06:	9a e0       	ldi	r25, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     e08:	2f ef       	ldi	r18, 0xFF	; 255
     e0a:	2e bd       	out	0x2e, r18	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e0c:	0d b4       	in	r0, 0x2d	; 45
     e0e:	07 fe       	sbrs	r0, 7
     e10:	fd cf       	rjmp	.-6      	; 0xe0c <send_cmd+0x90>
	return SPDR;
     e12:	8e b5       	in	r24, 0x2e	; 46
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
     e14:	87 ff       	sbrs	r24, 7
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <send_cmd+0xa0>
     e18:	91 50       	subi	r25, 0x01	; 1
     e1a:	b9 f7       	brne	.-18     	; 0xe0a <send_cmd+0x8e>

	return res;			/* Return with the response value */
}
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	08 95       	ret

00000e28 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     e28:	a4 e0       	ldi	r26, 0x04	; 4
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ea e1       	ldi	r30, 0x1A	; 26
     e2e:	f7 e0       	ldi	r31, 0x07	; 7
     e30:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__+0x18>
	BYTE n, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     e34:	88 23       	and	r24, r24
     e36:	11 f0       	breq	.+4      	; 0xe3c <disk_initialize+0x14>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	c7 c0       	rjmp	.+398    	; 0xfca <disk_initialize+0x1a2>
     e3c:	8a e0       	ldi	r24, 0x0A	; 10
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     e3e:	9f ef       	ldi	r25, 0xFF	; 255
     e40:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e42:	0d b4       	in	r0, 0x2d	; 45
     e44:	07 fe       	sbrs	r0, 7
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <disk_initialize+0x1a>
	return SPDR;
     e48:	2e b5       	in	r18, 0x2e	; 46
	BYTE n, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */

	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <disk_initialize+0x18>

	SELECT();				/* CS = L */
     e4e:	2a 98       	cbi	0x05, 2	; 5
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     e50:	80 e4       	ldi	r24, 0x40	; 64
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	09 f0       	breq	.+2      	; 0xe64 <disk_initialize+0x3c>
     e62:	9c c0       	rjmp	.+312    	; 0xf9c <disk_initialize+0x174>
		MmcTmr[0] = 100;						/* Initialization timeout of 1000 msec */
     e64:	84 e6       	ldi	r24, 0x64	; 100
     e66:	80 93 97 03 	sts	0x0397, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDC Ver2+ */
     e6a:	88 e4       	ldi	r24, 0x48	; 72
     e6c:	4a ea       	ldi	r20, 0xAA	; 170
     e6e:	51 e0       	ldi	r21, 0x01	; 1
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <disk_initialize+0x56>
     e7c:	54 c0       	rjmp	.+168    	; 0xf26 <disk_initialize+0xfe>
     e7e:	7e 01       	movw	r14, r28
     e80:	08 94       	sec
     e82:	e1 1c       	adc	r14, r1
     e84:	f1 1c       	adc	r15, r1
     e86:	87 01       	movw	r16, r14
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     e88:	9f ef       	ldi	r25, 0xFF	; 255
	SELECT();				/* CS = L */
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		MmcTmr[0] = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDC Ver2+ */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     e8a:	9e 01       	movw	r18, r28
     e8c:	2b 5f       	subi	r18, 0xFB	; 251
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     e90:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     e92:	0d b4       	in	r0, 0x2d	; 45
     e94:	07 fe       	sbrs	r0, 7
     e96:	fd cf       	rjmp	.-6      	; 0xe92 <disk_initialize+0x6a>
	return SPDR;
     e98:	8e b5       	in	r24, 0x2e	; 46
	SELECT();				/* CS = L */
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		MmcTmr[0] = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDC Ver2+ */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     e9a:	f8 01       	movw	r30, r16
     e9c:	81 93       	st	Z+, r24
     e9e:	8f 01       	movw	r16, r30
     ea0:	e2 17       	cp	r30, r18
     ea2:	f3 07       	cpc	r31, r19
     ea4:	a9 f7       	brne	.-22     	; 0xe90 <disk_initialize+0x68>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {	/* The card can work at vdd range of 2.7-3.6V */
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <disk_initialize+0x86>
     eac:	77 c0       	rjmp	.+238    	; 0xf9c <disk_initialize+0x174>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	8a 3a       	cpi	r24, 0xAA	; 170
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <disk_initialize+0x8e>
     eb4:	73 c0       	rjmp	.+230    	; 0xf9c <disk_initialize+0x174>
				do {
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)	break;	/* ACMD41 with HCS bit */
     eb6:	87 e7       	ldi	r24, 0x77	; 119
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	48 f4       	brcc	.+18     	; 0xeda <disk_initialize+0xb2>
     ec8:	89 e6       	ldi	r24, 0x69	; 105
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e4       	ldi	r23, 0x40	; 64
     ed2:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     ed6:	88 23       	and	r24, r24
     ed8:	21 f0       	breq	.+8      	; 0xee2 <disk_initialize+0xba>
				} while (MmcTmr[0]);
     eda:	80 91 97 03 	lds	r24, 0x0397
     ede:	88 23       	and	r24, r24
     ee0:	51 f7       	brne	.-44     	; 0xeb6 <disk_initialize+0x8e>
				if (MmcTmr[0] && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit */
     ee2:	80 91 97 03 	lds	r24, 0x0397
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <disk_initialize+0xc4>
     eea:	58 c0       	rjmp	.+176    	; 0xf9c <disk_initialize+0x174>
     eec:	8a e7       	ldi	r24, 0x7A	; 122
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     efa:	88 23       	and	r24, r24
     efc:	09 f0       	breq	.+2      	; 0xf00 <disk_initialize+0xd8>
     efe:	4e c0       	rjmp	.+156    	; 0xf9c <disk_initialize+0x174>
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     f04:	0d b4       	in	r0, 0x2d	; 45
     f06:	07 fe       	sbrs	r0, 7
     f08:	fd cf       	rjmp	.-6      	; 0xf04 <disk_initialize+0xdc>
	return SPDR;
     f0a:	8e b5       	in	r24, 0x2e	; 46
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {	/* The card can work at vdd range of 2.7-3.6V */
				do {
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)	break;	/* ACMD41 with HCS bit */
				} while (MmcTmr[0]);
				if (MmcTmr[0] && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
     f0c:	f7 01       	movw	r30, r14
     f0e:	81 93       	st	Z+, r24
     f10:	7f 01       	movw	r14, r30
     f12:	e0 17       	cp	r30, r16
     f14:	f1 07       	cpc	r31, r17
     f16:	a9 f7       	brne	.-22     	; 0xf02 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	86 fd       	sbrc	r24, 6
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <disk_initialize+0xfa>
     f1e:	12 e0       	ldi	r17, 0x02	; 2
     f20:	3e c0       	rjmp	.+124    	; 0xf9e <disk_initialize+0x176>
     f22:	16 e0       	ldi	r17, 0x06	; 6
     f24:	3c c0       	rjmp	.+120    	; 0xf9e <disk_initialize+0x176>
				}
			}
		} else {							/* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;	/* SDC : MMC */
     f26:	87 e7       	ldi	r24, 0x77	; 119
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	58 f4       	brcc	.+22     	; 0xf4e <disk_initialize+0x126>
     f38:	89 e6       	ldi	r24, 0x69	; 105
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	10 f4       	brcc	.+4      	; 0xf4e <disk_initialize+0x126>
     f4a:	12 e0       	ldi	r17, 0x02	; 2
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <disk_initialize+0x128>
     f4e:	11 e0       	ldi	r17, 0x01	; 1
			do {
				if (ty == 2) {
     f50:	12 30       	cpi	r17, 0x02	; 2
     f52:	59 f4       	brne	.+22     	; 0xf6a <disk_initialize+0x142>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;	/* ACMD41 */
     f54:	87 e7       	ldi	r24, 0x77	; 119
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	58 f4       	brcc	.+22     	; 0xf7c <disk_initialize+0x154>
     f66:	89 e6       	ldi	r24, 0x69	; 105
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <disk_initialize+0x144>
				} else {
					if (send_cmd(CMD1, 0) == 0) break;								/* CMD1 */
     f6a:	81 e4       	ldi	r24, 0x41	; 65
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     f78:	88 23       	and	r24, r24
     f7a:	21 f0       	breq	.+8      	; 0xf84 <disk_initialize+0x15c>
				}
			} while (MmcTmr[0]);
     f7c:	80 91 97 03 	lds	r24, 0x0397
     f80:	88 23       	and	r24, r24
     f82:	31 f7       	brne	.-52     	; 0xf50 <disk_initialize+0x128>
			if (!MmcTmr[0] || send_cmd(CMD16, 512) != 0)	/* Select R/W block length */
     f84:	80 91 97 03 	lds	r24, 0x0397
     f88:	88 23       	and	r24, r24
     f8a:	41 f0       	breq	.+16     	; 0xf9c <disk_initialize+0x174>
     f8c:	80 e5       	ldi	r24, 0x50	; 80
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	52 e0       	ldi	r21, 0x02	; 2
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
     f9a:	81 11       	cpse	r24, r1
     f9c:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     f9e:	10 93 2d 01 	sts	0x012D, r17
	DESELECT();			/* CS = H */
     fa2:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
     fa8:	0d b4       	in	r0, 0x2d	; 45
     faa:	07 fe       	sbrs	r0, 7
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <disk_initialize+0x180>
	return SPDR;
     fae:	8e b5       	in	r24, 0x2e	; 46
	}
	CardType = ty;
	DESELECT();			/* CS = H */
	rcvr_spi();			/* Idle (Release DO) */

	if (ty) {			/* Initialization succeded */
     fb0:	11 23       	and	r17, r17
     fb2:	21 f0       	breq	.+8      	; 0xfbc <disk_initialize+0x194>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     fb4:	80 91 2c 01 	lds	r24, 0x012C
     fb8:	8e 7f       	andi	r24, 0xFE	; 254
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <disk_initialize+0x19a>
	} else {			/* Initialization failed */
		Stat |=  STA_NOINIT;		/* Set STA_NOINIT */
     fbc:	80 91 2c 01 	lds	r24, 0x012C
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	80 93 2c 01 	sts	0x012C, r24
	}

	return Stat;
     fc6:	80 91 2c 01 	lds	r24, 0x012C
}
     fca:	24 96       	adiw	r28, 0x04	; 4
     fcc:	e6 e0       	ldi	r30, 0x06	; 6
     fce:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x18>

00000fd2 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     fd2:	88 23       	and	r24, r24
     fd4:	11 f0       	breq	.+4      	; 0xfda <disk_status+0x8>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	08 95       	ret
	return Stat;
     fda:	80 91 2c 01 	lds	r24, 0x012C
}
     fde:	08 95       	ret

00000fe0 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     fe0:	0f 93       	push	r16
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <disk_read+0xe>
     fec:	51 c0       	rjmp	.+162    	; 0x1090 <disk_read+0xb0>
     fee:	00 23       	and	r16, r16
     ff0:	09 f4       	brne	.+2      	; 0xff4 <disk_read+0x14>
     ff2:	4e c0       	rjmp	.+156    	; 0x1090 <disk_read+0xb0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     ff4:	80 91 2c 01 	lds	r24, 0x012C
     ff8:	80 ff       	sbrs	r24, 0
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <disk_read+0x22>
     ffc:	23 e0       	ldi	r18, 0x03	; 3
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	49 c0       	rjmp	.+146    	; 0x1094 <disk_read+0xb4>

	if (!(CardType & 4)) sector *= 512;	/* Convert to byte address if needed */
    1002:	80 91 2d 01 	lds	r24, 0x012D
    1006:	82 fd       	sbrc	r24, 2
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <disk_read+0x38>
    100a:	69 e0       	ldi	r22, 0x09	; 9
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	44 1f       	adc	r20, r20
    1012:	55 1f       	adc	r21, r21
    1014:	6a 95       	dec	r22
    1016:	d1 f7       	brne	.-12     	; 0x100c <disk_read+0x2c>

	SELECT();			/* CS = L */
    1018:	2a 98       	cbi	0x05, 2	; 5

	if (count == 1) {	/* Single block read */
    101a:	01 30       	cpi	r16, 0x01	; 1
    101c:	89 f4       	brne	.+34     	; 0x1040 <disk_read+0x60>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    101e:	81 e5       	ldi	r24, 0x51	; 81
    1020:	ba 01       	movw	r22, r20
    1022:	a9 01       	movw	r20, r18
    1024:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    1028:	88 23       	and	r24, r24
    102a:	21 f5       	brne	.+72     	; 0x1074 <disk_read+0x94>
    102c:	ce 01       	movw	r24, r28
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	72 e0       	ldi	r23, 0x02	; 2
    1032:	0e 94 44 06 	call	0xc88	; 0xc88 <rcvr_datablock>
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	89 2b       	or	r24, r25
    103a:	e1 f4       	brne	.+56     	; 0x1074 <disk_read+0x94>
    103c:	01 e0       	ldi	r16, 0x01	; 1
    103e:	1a c0       	rjmp	.+52     	; 0x1074 <disk_read+0x94>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    1040:	82 e5       	ldi	r24, 0x52	; 82
    1042:	ba 01       	movw	r22, r20
    1044:	a9 01       	movw	r20, r18
    1046:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    104a:	88 23       	and	r24, r24
    104c:	99 f4       	brne	.+38     	; 0x1074 <disk_read+0x94>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    104e:	ce 01       	movw	r24, r28
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	72 e0       	ldi	r23, 0x02	; 2
    1054:	0e 94 44 06 	call	0xc88	; 0xc88 <rcvr_datablock>
    1058:	89 2b       	or	r24, r25
    105a:	29 f0       	breq	.+10     	; 0x1066 <disk_read+0x86>
				buff += 512;
			} while (--count);
    105c:	01 50       	subi	r16, 0x01	; 1
    105e:	19 f0       	breq	.+6      	; 0x1066 <disk_read+0x86>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    1060:	c0 50       	subi	r28, 0x00	; 0
    1062:	de 4f       	sbci	r29, 0xFE	; 254
    1064:	f4 cf       	rjmp	.-24     	; 0x104e <disk_read+0x6e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    1066:	8c e4       	ldi	r24, 0x4C	; 76
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
		}
	}

	DESELECT();			/* CS = H */
    1074:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    107a:	0d b4       	in	r0, 0x2d	; 45
    107c:	07 fe       	sbrs	r0, 7
    107e:	fd cf       	rjmp	.-6      	; 0x107a <disk_read+0x9a>
	return SPDR;
    1080:	8e b5       	in	r24, 0x2e	; 46
	}

	DESELECT();			/* CS = H */
	rcvr_spi();			/* Idle (Release DO) */

	return count ? RES_ERROR : RES_OK;
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	00 23       	and	r16, r16
    1088:	29 f0       	breq	.+10     	; 0x1094 <disk_read+0xb4>
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <disk_read+0xb4>
    1090:	24 e0       	ldi	r18, 0x04	; 4
    1092:	30 e0       	ldi	r19, 0x00	; 0
}
    1094:	c9 01       	movw	r24, r18
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	eb 01       	movw	r28, r22
    10ae:	69 01       	movw	r12, r18
    10b0:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
    10b2:	88 23       	and	r24, r24
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <disk_write+0x1a>
    10b6:	64 c0       	rjmp	.+200    	; 0x1180 <disk_write+0xe2>
    10b8:	00 23       	and	r16, r16
    10ba:	09 f4       	brne	.+2      	; 0x10be <disk_write+0x20>
    10bc:	61 c0       	rjmp	.+194    	; 0x1180 <disk_write+0xe2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    10be:	80 91 2c 01 	lds	r24, 0x012C
    10c2:	80 ff       	sbrs	r24, 0
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <disk_write+0x2e>
    10c6:	23 e0       	ldi	r18, 0x03	; 3
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	5c c0       	rjmp	.+184    	; 0x1184 <disk_write+0xe6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    10cc:	80 91 2c 01 	lds	r24, 0x012C
    10d0:	82 ff       	sbrs	r24, 2
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <disk_write+0x3c>
    10d4:	22 e0       	ldi	r18, 0x02	; 2
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	55 c0       	rjmp	.+170    	; 0x1184 <disk_write+0xe6>

	if (!(CardType & 4)) sector *= 512;	/* Convert to byte address if needed */
    10da:	80 91 2d 01 	lds	r24, 0x012D
    10de:	82 fd       	sbrc	r24, 2
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <disk_write+0x52>
    10e2:	79 e0       	ldi	r23, 0x09	; 9
    10e4:	cc 0c       	add	r12, r12
    10e6:	dd 1c       	adc	r13, r13
    10e8:	ee 1c       	adc	r14, r14
    10ea:	ff 1c       	adc	r15, r15
    10ec:	7a 95       	dec	r23
    10ee:	d1 f7       	brne	.-12     	; 0x10e4 <disk_write+0x46>

	SELECT();			/* CS = L */
    10f0:	2a 98       	cbi	0x05, 2	; 5

	if (count == 1) {	/* Single block write */
    10f2:	01 30       	cpi	r16, 0x01	; 1
    10f4:	69 f4       	brne	.+26     	; 0x1110 <disk_write+0x72>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    10f6:	88 e5       	ldi	r24, 0x58	; 88
    10f8:	b7 01       	movw	r22, r14
    10fa:	a6 01       	movw	r20, r12
    10fc:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    1100:	88 23       	and	r24, r24
    1102:	81 f5       	brne	.+96     	; 0x1164 <disk_write+0xc6>
    1104:	ce 01       	movw	r24, r28
    1106:	6e ef       	ldi	r22, 0xFE	; 254
    1108:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <xmit_datablock>
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	27 c0       	rjmp	.+78     	; 0x115e <disk_write+0xc0>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & 2) {
    1110:	81 ff       	sbrs	r24, 1
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <disk_write+0x92>
			send_cmd(CMD55, 0); send_cmd(CMD23, count);	/* ACMD23 */
    1114:	87 e7       	ldi	r24, 0x77	; 119
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    1122:	40 2f       	mov	r20, r16
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	87 e5       	ldi	r24, 0x57	; 87
    112c:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1130:	89 e5       	ldi	r24, 0x59	; 89
    1132:	b7 01       	movw	r22, r14
    1134:	a6 01       	movw	r20, r12
    1136:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    113a:	88 23       	and	r24, r24
    113c:	99 f4       	brne	.+38     	; 0x1164 <disk_write+0xc6>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    113e:	ce 01       	movw	r24, r28
    1140:	6c ef       	ldi	r22, 0xFC	; 252
    1142:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <xmit_datablock>
    1146:	89 2b       	or	r24, r25
    1148:	29 f0       	breq	.+10     	; 0x1154 <disk_write+0xb6>
				buff += 512;
			} while (--count);
    114a:	01 50       	subi	r16, 0x01	; 1
    114c:	19 f0       	breq	.+6      	; 0x1154 <disk_write+0xb6>
			send_cmd(CMD55, 0); send_cmd(CMD23, count);	/* ACMD23 */
		}
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    114e:	c0 50       	subi	r28, 0x00	; 0
    1150:	de 4f       	sbci	r29, 0xFE	; 254
    1152:	f5 cf       	rjmp	.-22     	; 0x113e <disk_write+0xa0>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	6d ef       	ldi	r22, 0xFD	; 253
    115a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <xmit_datablock>
    115e:	89 2b       	or	r24, r25
    1160:	09 f4       	brne	.+2      	; 0x1164 <disk_write+0xc6>
    1162:	01 e0       	ldi	r16, 0x01	; 1
				count = 1;
		}
	}

	DESELECT();			/* CS = H */
    1164:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    116a:	0d b4       	in	r0, 0x2d	; 45
    116c:	07 fe       	sbrs	r0, 7
    116e:	fd cf       	rjmp	.-6      	; 0x116a <disk_write+0xcc>
	return SPDR;
    1170:	8e b5       	in	r24, 0x2e	; 46
	}

	DESELECT();			/* CS = H */
	rcvr_spi();			/* Idle (Release DO) */

	return count ? RES_ERROR : RES_OK;
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	00 23       	and	r16, r16
    1178:	29 f0       	breq	.+10     	; 0x1184 <disk_write+0xe6>
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <disk_write+0xe6>
    1180:	24 e0       	ldi	r18, 0x04	; 4
    1182:	30 e0       	ldi	r19, 0x00	; 0
}
    1184:	c9 01       	movw	r24, r18
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	08 95       	ret

00001196 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive data block */
)
{
    1196:	a0 e1       	ldi	r26, 0x10	; 16
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 ed       	ldi	r30, 0xD1	; 209
    119c:	f8 e0       	ldi	r31, 0x08	; 8
    119e:	0c 94 93 1c 	jmp	0x3926	; 0x3926 <__prologue_saves__+0x1c>
    11a2:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <disk_ioctl+0x18>
    11a8:	24 e0       	ldi	r18, 0x04	; 4
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	d3 c0       	rjmp	.+422    	; 0x1354 <disk_ioctl+0x1be>

	SELECT();		/* CS = L */
    11ae:	2a 98       	cbi	0x05, 2	; 5

	res = RES_ERROR;
	switch (ctrl) {
    11b0:	63 30       	cpi	r22, 0x03	; 3
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <disk_ioctl+0x20>
    11b4:	81 c0       	rjmp	.+258    	; 0x12b8 <disk_ioctl+0x122>
    11b6:	64 30       	cpi	r22, 0x04	; 4
    11b8:	28 f4       	brcc	.+10     	; 0x11c4 <disk_ioctl+0x2e>
    11ba:	61 30       	cpi	r22, 0x01	; 1
    11bc:	79 f0       	breq	.+30     	; 0x11dc <disk_ioctl+0x46>
    11be:	62 30       	cpi	r22, 0x02	; 2
    11c0:	51 f4       	brne	.+20     	; 0x11d6 <disk_ioctl+0x40>
    11c2:	72 c0       	rjmp	.+228    	; 0x12a8 <disk_ioctl+0x112>
    11c4:	6b 30       	cpi	r22, 0x0B	; 11
    11c6:	09 f4       	brne	.+2      	; 0x11ca <disk_ioctl+0x34>
    11c8:	84 c0       	rjmp	.+264    	; 0x12d2 <disk_ioctl+0x13c>
    11ca:	6c 30       	cpi	r22, 0x0C	; 12
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <disk_ioctl+0x3a>
    11ce:	98 c0       	rjmp	.+304    	; 0x1300 <disk_ioctl+0x16a>
    11d0:	6a 30       	cpi	r22, 0x0A	; 10
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <disk_ioctl+0x40>
    11d4:	78 c0       	rjmp	.+240    	; 0x12c6 <disk_ioctl+0x130>
    11d6:	24 e0       	ldi	r18, 0x04	; 4
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	b2 c0       	rjmp	.+356    	; 0x1340 <disk_ioctl+0x1aa>
		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    11dc:	89 e4       	ldi	r24, 0x49	; 73
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    11ea:	88 23       	and	r24, r24
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <disk_ioctl+0x5a>
    11ee:	a6 c0       	rjmp	.+332    	; 0x133c <disk_ioctl+0x1a6>
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	60 e1       	ldi	r22, 0x10	; 16
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	0e 94 44 06 	call	0xc88	; 0xc88 <rcvr_datablock>
    11fc:	89 2b       	or	r24, r25
    11fe:	09 f4       	brne	.+2      	; 0x1202 <disk_ioctl+0x6c>
    1200:	9d c0       	rjmp	.+314    	; 0x133c <disk_ioctl+0x1a6>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	82 95       	swap	r24
    1206:	86 95       	lsr	r24
    1208:	86 95       	lsr	r24
    120a:	83 70       	andi	r24, 0x03	; 3
    120c:	7a 85       	ldd	r23, Y+10	; 0x0a
    120e:	49 85       	ldd	r20, Y+9	; 0x09
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	b1 f4       	brne	.+44     	; 0x1240 <disk_ioctl+0xaa>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
    1214:	87 2f       	mov	r24, r23
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	34 2f       	mov	r19, r20
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	2a e0       	ldi	r18, 0x0A	; 10
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	aa 1f       	adc	r26, r26
    122e:	bb 1f       	adc	r27, r27
    1230:	2a 95       	dec	r18
    1232:	d1 f7       	brne	.-12     	; 0x1228 <disk_ioctl+0x92>
    1234:	f8 01       	movw	r30, r16
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
    123e:	39 c0       	rjmp	.+114    	; 0x12b2 <disk_ioctl+0x11c>
				} else {					/* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
    1240:	42 95       	swap	r20
    1242:	46 95       	lsr	r20
    1244:	46 95       	lsr	r20
    1246:	43 70       	andi	r20, 0x03	; 3
    1248:	28 85       	ldd	r18, Y+8	; 0x08
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	24 0f       	add	r18, r20
    1256:	31 1d       	adc	r19, r1
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	83 70       	andi	r24, 0x03	; 3
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	98 2f       	mov	r25, r24
    1266:	88 27       	eor	r24, r24
    1268:	99 0f       	add	r25, r25
    126a:	99 0f       	add	r25, r25
    126c:	28 0f       	add	r18, r24
    126e:	39 1f       	adc	r19, r25
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	8e 81       	ldd	r24, Y+6	; 0x06
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	6b 85       	ldd	r22, Y+11	; 0x0b
    127a:	66 1f       	adc	r22, r22
    127c:	66 27       	eor	r22, r22
    127e:	66 1f       	adc	r22, r22
    1280:	86 0f       	add	r24, r22
    1282:	8e 5f       	subi	r24, 0xFE	; 254
    1284:	73 70       	andi	r23, 0x03	; 3
    1286:	77 0f       	add	r23, r23
    1288:	87 0f       	add	r24, r23
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	09 97       	sbiw	r24, 0x09	; 9
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <disk_ioctl+0x102>
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	44 1f       	adc	r20, r20
    1296:	55 1f       	adc	r21, r21
    1298:	8a 95       	dec	r24
    129a:	d2 f7       	brpl	.-12     	; 0x1290 <disk_ioctl+0xfa>
    129c:	f8 01       	movw	r30, r16
    129e:	20 83       	st	Z, r18
    12a0:	31 83       	std	Z+1, r19	; 0x01
    12a2:	42 83       	std	Z+2, r20	; 0x02
    12a4:	53 83       	std	Z+3, r21	; 0x03
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <disk_ioctl+0x11c>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get sectors on the disk (WORD) */
			*(WORD*)buff = 512;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	fa 01       	movw	r30, r20
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	80 83       	st	Z, r24
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	44 c0       	rjmp	.+136    	; 0x1340 <disk_ioctl+0x1aa>
			res = RES_OK;
			break;

		case CTRL_SYNC :	/* Make sure that data has been written */
			if (wait_ready() == 0xFF)
    12b8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <wait_ready>
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8f 3f       	cpi	r24, 0xFF	; 255
    12c2:	e1 f5       	brne	.+120    	; 0x133c <disk_ioctl+0x1a6>
    12c4:	3d c0       	rjmp	.+122    	; 0x1340 <disk_ioctl+0x1aa>
				res = RES_OK;
			break;

		case MMC_GET_CSD :	/* Receive CSD as a data block (16 bytes) */
			if (Stat & STA_NOINIT) return RES_NOTRDY;
    12c6:	80 91 2c 01 	lds	r24, 0x012C
    12ca:	80 fd       	sbrc	r24, 0
    12cc:	41 c0       	rjmp	.+130    	; 0x1350 <disk_ioctl+0x1ba>
			if ((send_cmd(CMD9, 0) == 0)	/* READ_CSD */
    12ce:	89 e4       	ldi	r24, 0x49	; 73
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <disk_ioctl+0x146>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :	/* Receive CID as a data block (16 bytes) */
			if (Stat & STA_NOINIT) return RES_NOTRDY;
    12d2:	80 91 2c 01 	lds	r24, 0x012C
    12d6:	80 fd       	sbrc	r24, 0
    12d8:	3b c0       	rjmp	.+118    	; 0x1350 <disk_ioctl+0x1ba>
			if ((send_cmd(CMD10, 0) == 0)	/* READ_CID */
    12da:	8a e4       	ldi	r24, 0x4A	; 74
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    12e8:	88 23       	and	r24, r24
    12ea:	41 f5       	brne	.+80     	; 0x133c <disk_ioctl+0x1a6>
    12ec:	c8 01       	movw	r24, r16
    12ee:	60 e1       	ldi	r22, 0x10	; 16
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	0e 94 44 06 	call	0xc88	; 0xc88 <rcvr_datablock>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	89 2b       	or	r24, r25
    12fc:	09 f5       	brne	.+66     	; 0x1340 <disk_ioctl+0x1aa>
    12fe:	1e c0       	rjmp	.+60     	; 0x133c <disk_ioctl+0x1a6>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :	/* Receive OCR as an R3 resp (4 bytes) */
			if (Stat & STA_NOINIT) return RES_NOTRDY;
    1300:	80 91 2c 01 	lds	r24, 0x012C
    1304:	80 fd       	sbrc	r24, 0
    1306:	24 c0       	rjmp	.+72     	; 0x1350 <disk_ioctl+0x1ba>
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    1308:	8a e7       	ldi	r24, 0x7A	; 122
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	0e 94 be 06 	call	0xd7c	; 0xd7c <send_cmd>
    1316:	88 23       	and	r24, r24
    1318:	89 f4       	brne	.+34     	; 0x133c <disk_ioctl+0x1a6>
    131a:	f8 01       	movw	r30, r16
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    131c:	9f ef       	ldi	r25, 0xFF	; 255
			break;

		case MMC_GET_OCR :	/* Receive OCR as an R3 resp (4 bytes) */
			if (Stat & STA_NOINIT) return RES_NOTRDY;
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 0; n < 4; n++)
    131e:	98 01       	movw	r18, r16
    1320:	2d 5f       	subi	r18, 0xFD	; 253
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1324:	9e bd       	out	0x2e, r25	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1326:	0d b4       	in	r0, 0x2d	; 45
    1328:	07 fe       	sbrs	r0, 7
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <disk_ioctl+0x190>
	return SPDR;
    132c:	8e b5       	in	r24, 0x2e	; 46

		case MMC_GET_OCR :	/* Receive OCR as an R3 resp (4 bytes) */
			if (Stat & STA_NOINIT) return RES_NOTRDY;
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 0; n < 4; n++)
					*ptr++ = rcvr_spi();
    132e:	80 83       	st	Z, r24
			break;

		case MMC_GET_OCR :	/* Receive OCR as an R3 resp (4 bytes) */
			if (Stat & STA_NOINIT) return RES_NOTRDY;
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 0; n < 4; n++)
    1330:	e2 17       	cp	r30, r18
    1332:	f3 07       	cpc	r31, r19
    1334:	09 f4       	brne	.+2      	; 0x1338 <disk_ioctl+0x1a2>
    1336:	bd cf       	rjmp	.-134    	; 0x12b2 <disk_ioctl+0x11c>
					*ptr++ = rcvr_spi();
    1338:	31 96       	adiw	r30, 0x01	; 1
    133a:	f4 cf       	rjmp	.-24     	; 0x1324 <disk_ioctl+0x18e>
    133c:	21 e0       	ldi	r18, 0x01	; 1
    133e:	30 e0       	ldi	r19, 0x00	; 0

		default:
			res = RES_PARERR;
	}

	DESELECT();			/* CS = H */
    1340:	2a 9a       	sbi	0x05, 2	; 5
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1346:	0d b4       	in	r0, 0x2d	; 45
    1348:	07 fe       	sbrs	r0, 7
    134a:	fd cf       	rjmp	.-6      	; 0x1346 <disk_ioctl+0x1b0>
	return SPDR;
    134c:	8e b5       	in	r24, 0x2e	; 46
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <disk_ioctl+0x1be>
	}

	DESELECT();			/* CS = H */
	rcvr_spi();			/* Idle (Release DO) */

	return res;
    1350:	23 e0       	ldi	r18, 0x03	; 3
    1352:	30 e0       	ldi	r19, 0x00	; 0
}
    1354:	c9 01       	movw	r24, r18
    1356:	60 96       	adiw	r28, 0x10	; 16
    1358:	e4 e0       	ldi	r30, 0x04	; 4
    135a:	0c 94 af 1c 	jmp	0x395e	; 0x395e <__epilogue_restores__+0x1c>

0000135e <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n;


	n = MmcTmr[0];						/* 100Hz decrement timer */
    135e:	80 91 97 03 	lds	r24, 0x0397
	if (n) MmcTmr[0] = --n;
    1362:	88 23       	and	r24, r24
    1364:	19 f0       	breq	.+6      	; 0x136c <disk_timerproc+0xe>
    1366:	81 50       	subi	r24, 0x01	; 1
    1368:	80 93 97 03 	sts	0x0397, r24
	n = MmcTmr[1];
    136c:	80 91 98 03 	lds	r24, 0x0398
	if (n) MmcTmr[1] = --n;
    1370:	88 23       	and	r24, r24
    1372:	19 f0       	breq	.+6      	; 0x137a <disk_timerproc+0x1c>
    1374:	81 50       	subi	r24, 0x01	; 1
    1376:	80 93 98 03 	sts	0x0398, r24
    137a:	08 95       	ret

0000137c <uart_init>:
/*----------------------------------------------------*/


void uart_init (void)
{
	cli();
    137c:	f8 94       	cli
	UCSR0B = 0;
    137e:	e1 ec       	ldi	r30, 0xC1	; 193
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
	RxFifo.ri = 0;
    1384:	10 92 01 04 	sts	0x0401, r1
    1388:	10 92 00 04 	sts	0x0400, r1
	RxFifo.wi = 0;
    138c:	10 92 ff 03 	sts	0x03FF, r1
    1390:	10 92 fe 03 	sts	0x03FE, r1
	RxFifo.ct = 0;
    1394:	10 92 03 04 	sts	0x0403, r1
    1398:	10 92 02 04 	sts	0x0402, r1
	UBRR0L = F_CPU / 16 / UART_BAUD - 1;	/* Enable USRAT0 in format of N81 */
    139c:	83 e3       	ldi	r24, 0x33	; 51
    139e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(RXCIE0)|_BV(RXEN0)|_BV(TXEN0);
    13a2:	88 e9       	ldi	r24, 0x98	; 152
    13a4:	80 83       	st	Z, r24
	sei();
    13a6:	78 94       	sei
}
    13a8:	08 95       	ret

000013aa <uart_get>:
{
	uint16_t i;
	uint8_t d;


	cli();
    13aa:	f8 94       	cli
	i = RxFifo.ct;
    13ac:	80 91 02 04 	lds	r24, 0x0402
    13b0:	90 91 03 04 	lds	r25, 0x0403
	sei();
    13b4:	78 94       	sei
	d = 0;
	if (i) {
    13b6:	89 2b       	or	r24, r25
    13b8:	11 f4       	brne	.+4      	; 0x13be <uart_get+0x14>
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	19 c0       	rjmp	.+50     	; 0x13f0 <uart_get+0x46>
		i = RxFifo.ri;
    13be:	80 91 00 04 	lds	r24, 0x0400
    13c2:	90 91 01 04 	lds	r25, 0x0401
		d = RxFifo.buff[i++];
    13c6:	fc 01       	movw	r30, r24
    13c8:	e2 50       	subi	r30, 0x02	; 2
    13ca:	fc 4f       	sbci	r31, 0xFC	; 252
    13cc:	26 81       	ldd	r18, Z+6	; 0x06
		RxFifo.ri = i % sizeof RxFifo.buff;
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	91 70       	andi	r25, 0x01	; 1
    13d2:	90 93 01 04 	sts	0x0401, r25
    13d6:	80 93 00 04 	sts	0x0400, r24
		cli();
    13da:	f8 94       	cli
		RxFifo.ct--;
    13dc:	80 91 02 04 	lds	r24, 0x0402
    13e0:	90 91 03 04 	lds	r25, 0x0403
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	90 93 03 04 	sts	0x0403, r25
    13ea:	80 93 02 04 	sts	0x0402, r24
		sei();
    13ee:	78 94       	sei
	}

	return d;
}
    13f0:	82 2f       	mov	r24, r18
    13f2:	08 95       	ret

000013f4 <uart_put>:


/* Send a byte */
void uart_put (uint8_t d)
{
    13f4:	98 2f       	mov	r25, r24
	while (bit_is_clear(UCSR0A, UDRE0)) ;
    13f6:	80 91 c0 00 	lds	r24, 0x00C0
    13fa:	85 ff       	sbrs	r24, 5
    13fc:	fc cf       	rjmp	.-8      	; 0x13f6 <uart_put+0x2>
	UDR0 = d;
    13fe:	90 93 c6 00 	sts	0x00C6, r25
}
    1402:	08 95       	ret

00001404 <__vector_18>:


/* USART0 RXC interrupt */
ISR(USART_RX_vect)
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
	uint8_t d;
	uint16_t i;


	d = UDR0;
    141a:	20 91 c6 00 	lds	r18, 0x00C6
	i = RxFifo.ct;
    141e:	80 91 02 04 	lds	r24, 0x0402
    1422:	90 91 03 04 	lds	r25, 0x0403
	if (i < sizeof RxFifo.buff) {
    1426:	32 e0       	ldi	r19, 0x02	; 2
    1428:	80 30       	cpi	r24, 0x00	; 0
    142a:	93 07       	cpc	r25, r19
    142c:	98 f4       	brcc	.+38     	; 0x1454 <__vector_18+0x50>
		RxFifo.ct = i + 1;
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	90 93 03 04 	sts	0x0403, r25
    1434:	80 93 02 04 	sts	0x0402, r24
		i = RxFifo.wi;
    1438:	80 91 fe 03 	lds	r24, 0x03FE
    143c:	90 91 ff 03 	lds	r25, 0x03FF
		RxFifo.buff[i++] = d;
    1440:	fc 01       	movw	r30, r24
    1442:	e2 50       	subi	r30, 0x02	; 2
    1444:	fc 4f       	sbci	r31, 0xFC	; 252
    1446:	26 83       	std	Z+6, r18	; 0x06
		RxFifo.wi = i % sizeof RxFifo.buff;
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	91 70       	andi	r25, 0x01	; 1
    144c:	90 93 ff 03 	sts	0x03FF, r25
    1450:	80 93 fe 03 	sts	0x03FE, r24
	}
}
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	8c 01       	movw	r16, r24
    1474:	eb 01       	movw	r28, r22
    1476:	ba 01       	movw	r22, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	0e c0       	rjmp	.+28     	; 0x149a <mem_cpy+0x30>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
		*(int*)d = *(int*)s;
    147e:	f8 01       	movw	r30, r16
    1480:	e2 0f       	add	r30, r18
    1482:	f3 1f       	adc	r31, r19
    1484:	de 01       	movw	r26, r28
    1486:	a2 0f       	add	r26, r18
    1488:	b3 1f       	adc	r27, r19
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
    1492:	42 50       	subi	r20, 0x02	; 2
    1494:	50 40       	sbci	r21, 0x00	; 0
    1496:	2e 5f       	subi	r18, 0xFE	; 254
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    149a:	42 30       	cpi	r20, 0x02	; 2
    149c:	51 05       	cpc	r21, r1
    149e:	78 f7       	brcc	.-34     	; 0x147e <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    14a0:	cb 01       	movw	r24, r22
    14a2:	8e 7f       	andi	r24, 0xFE	; 254
    14a4:	de 01       	movw	r26, r28
    14a6:	a8 0f       	add	r26, r24
    14a8:	b9 1f       	adc	r27, r25
    14aa:	f8 01       	movw	r30, r16
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    14b0:	60 ff       	sbrs	r22, 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <mem_cpy+0x4e>
		*d++ = *s++;
    14b4:	8c 91       	ld	r24, X
    14b6:	80 83       	st	Z, r24
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
    14d0:	7a 01       	movw	r14, r20
    14d2:	8b 01       	movw	r16, r22
	clst -= 2;
    14d4:	8e ef       	ldi	r24, 0xFE	; 254
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	af ef       	ldi	r26, 0xFF	; 255
    14da:	bf ef       	ldi	r27, 0xFF	; 255
    14dc:	e8 0e       	add	r14, r24
    14de:	f9 1e       	adc	r15, r25
    14e0:	0a 1f       	adc	r16, r26
    14e2:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    14e4:	8e 89       	ldd	r24, Y+22	; 0x16
    14e6:	9f 89       	ldd	r25, Y+23	; 0x17
    14e8:	a8 8d       	ldd	r26, Y+24	; 0x18
    14ea:	b9 8d       	ldd	r27, Y+25	; 0x19
    14ec:	02 97       	sbiw	r24, 0x02	; 2
    14ee:	a1 09       	sbc	r26, r1
    14f0:	b1 09       	sbc	r27, r1
    14f2:	e8 16       	cp	r14, r24
    14f4:	f9 06       	cpc	r15, r25
    14f6:	0a 07       	cpc	r16, r26
    14f8:	1b 07       	cpc	r17, r27
    14fa:	28 f0       	brcs	.+10     	; 0x1506 <clust2sect+0x44>
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	12 c0       	rjmp	.+36     	; 0x152a <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1506:	2a 81       	ldd	r18, Y+2	; 0x02
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	c8 01       	movw	r24, r16
    1510:	b7 01       	movw	r22, r14
    1512:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    1516:	9b 01       	movw	r18, r22
    1518:	ac 01       	movw	r20, r24
    151a:	8e a1       	ldd	r24, Y+38	; 0x26
    151c:	9f a1       	ldd	r25, Y+39	; 0x27
    151e:	a8 a5       	ldd	r26, Y+40	; 0x28
    1520:	b9 a5       	ldd	r27, Y+41	; 0x29
    1522:	28 0f       	add	r18, r24
    1524:	39 1f       	adc	r19, r25
    1526:	4a 1f       	adc	r20, r26
    1528:	5b 1f       	adc	r21, r27
}
    152a:	b9 01       	movw	r22, r18
    152c:	ca 01       	movw	r24, r20
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	e6 e0       	ldi	r30, 0x06	; 6
    1534:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x18>

00001538 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    1538:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    153a:	88 23       	and	r24, r24
    153c:	19 f0       	breq	.+6      	; 0x1544 <f_mount+0xc>
    153e:	2b e0       	ldi	r18, 0x0B	; 11
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	10 c0       	rjmp	.+32     	; 0x1564 <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1544:	e0 91 2e 01 	lds	r30, 0x012E
    1548:	f0 91 2f 01 	lds	r31, 0x012F

	if (rfs) {
    154c:	30 97       	sbiw	r30, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <f_mount+0x1a>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1550:	10 82       	st	Z, r1
	}

	if (fs) {
    1552:	10 97       	sbiw	r26, 0x00	; 0
    1554:	09 f0       	breq	.+2      	; 0x1558 <f_mount+0x20>
		fs->fs_type = 0;			/* Clear new fs object */
    1556:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1558:	b0 93 2f 01 	sts	0x012F, r27
    155c:	a0 93 2e 01 	sts	0x012E, r26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    1564:	c9 01       	movw	r24, r18
    1566:	08 95       	ret

00001568 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    1568:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	99 f0       	breq	.+38     	; 0x1594 <validate+0x2c>
    156e:	80 81       	ld	r24, Z
    1570:	88 23       	and	r24, r24
    1572:	81 f0       	breq	.+32     	; 0x1594 <validate+0x2c>
    1574:	86 81       	ldd	r24, Z+6	; 0x06
    1576:	97 81       	ldd	r25, Z+7	; 0x07
    1578:	86 17       	cp	r24, r22
    157a:	97 07       	cpc	r25, r23
    157c:	59 f4       	brne	.+22     	; 0x1594 <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <disk_status>
    1584:	80 fd       	sbrc	r24, 0
    1586:	03 c0       	rjmp	.+6      	; 0x158e <validate+0x26>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <validate+0x30>
    158e:	23 e0       	ldi	r18, 0x03	; 3
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <validate+0x30>
    1594:	29 e0       	ldi	r18, 0x09	; 9
    1596:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    1598:	c9 01       	movw	r24, r18
    159a:	08 95       	ret

0000159c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    159c:	a0 e0       	ldi	r26, 0x00	; 0
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 ed       	ldi	r30, 0xD4	; 212
    15a2:	fa e0       	ldi	r31, 0x0A	; 10
    15a4:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__prologue_saves__+0x8>
    15a8:	ec 01       	movw	r28, r24
    15aa:	4a 01       	movw	r8, r20
    15ac:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    15ae:	ca a4       	ldd	r12, Y+42	; 0x2a
    15b0:	db a4       	ldd	r13, Y+43	; 0x2b
    15b2:	ec a4       	ldd	r14, Y+44	; 0x2c
    15b4:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    15b6:	c4 16       	cp	r12, r20
    15b8:	d5 06       	cpc	r13, r21
    15ba:	e6 06       	cpc	r14, r22
    15bc:	f7 06       	cpc	r15, r23
    15be:	09 f4       	brne	.+2      	; 0x15c2 <move_window+0x26>
    15c0:	4f c0       	rjmp	.+158    	; 0x1660 <move_window+0xc4>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	88 23       	and	r24, r24
    15c6:	a1 f1       	breq	.+104    	; 0x1630 <move_window+0x94>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    15c8:	8e e2       	ldi	r24, 0x2E	; 46
    15ca:	68 2e       	mov	r6, r24
    15cc:	71 2c       	mov	r7, r1
    15ce:	6c 0e       	add	r6, r28
    15d0:	7d 1e       	adc	r7, r29
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	b3 01       	movw	r22, r6
    15d6:	a7 01       	movw	r20, r14
    15d8:	96 01       	movw	r18, r12
    15da:	01 e0       	ldi	r16, 0x01	; 1
    15dc:	0e 94 4f 08 	call	0x109e	; 0x109e <disk_write>
    15e0:	89 2b       	or	r24, r25
    15e2:	d9 f5       	brne	.+118    	; 0x165a <move_window+0xbe>
				return FR_DISK_ERR;
			fs->wflag = 0;
    15e4:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    15e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
    15ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
    15ee:	2e 8d       	ldd	r18, Y+30	; 0x1e
    15f0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    15f2:	48 a1       	ldd	r20, Y+32	; 0x20
    15f4:	59 a1       	ldd	r21, Y+33	; 0x21
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	a4 1f       	adc	r26, r20
    15fc:	b5 1f       	adc	r27, r21
    15fe:	c8 16       	cp	r12, r24
    1600:	d9 06       	cpc	r13, r25
    1602:	ea 06       	cpc	r14, r26
    1604:	fb 06       	cpc	r15, r27
    1606:	a0 f4       	brcc	.+40     	; 0x1630 <move_window+0x94>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1608:	1b 81       	ldd	r17, Y+3	; 0x03
    160a:	10 c0       	rjmp	.+32     	; 0x162c <move_window+0x90>
					wsect += fs->fsize;
    160c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    160e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1610:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1612:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1614:	c8 0e       	add	r12, r24
    1616:	d9 1e       	adc	r13, r25
    1618:	ea 1e       	adc	r14, r26
    161a:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	b3 01       	movw	r22, r6
    1620:	a7 01       	movw	r20, r14
    1622:	96 01       	movw	r18, r12
    1624:	01 e0       	ldi	r16, 0x01	; 1
    1626:	0e 94 4f 08 	call	0x109e	; 0x109e <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    162a:	11 50       	subi	r17, 0x01	; 1
    162c:	12 30       	cpi	r17, 0x02	; 2
    162e:	70 f7       	brcc	.-36     	; 0x160c <move_window+0x70>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1630:	81 14       	cp	r8, r1
    1632:	91 04       	cpc	r9, r1
    1634:	a1 04       	cpc	r10, r1
    1636:	b1 04       	cpc	r11, r1
    1638:	99 f0       	breq	.+38     	; 0x1660 <move_window+0xc4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    163a:	be 01       	movw	r22, r28
    163c:	62 5d       	subi	r22, 0xD2	; 210
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	a5 01       	movw	r20, r10
    1644:	94 01       	movw	r18, r8
    1646:	01 e0       	ldi	r16, 0x01	; 1
    1648:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <disk_read>
    164c:	89 2b       	or	r24, r25
    164e:	29 f4       	brne	.+10     	; 0x165a <move_window+0xbe>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1650:	8a a6       	std	Y+42, r8	; 0x2a
    1652:	9b a6       	std	Y+43, r9	; 0x2b
    1654:	ac a6       	std	Y+44, r10	; 0x2c
    1656:	bd a6       	std	Y+45, r11	; 0x2d
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <move_window+0xc4>
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <move_window+0xc8>
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    1664:	c9 01       	movw	r24, r18
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	ee e0       	ldi	r30, 0x0E	; 14
    166c:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <__epilogue_restores__+0x8>

00001670 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e3       	ldi	r30, 0x3E	; 62
    1676:	fb e0       	ldi	r31, 0x0B	; 11
    1678:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__prologue_saves__+0xc>
    167c:	ec 01       	movw	r28, r24
    167e:	6a 01       	movw	r12, r20
    1680:	7b 01       	movw	r14, r22
    1682:	48 01       	movw	r8, r16
    1684:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1686:	42 30       	cpi	r20, 0x02	; 2
    1688:	51 05       	cpc	r21, r1
    168a:	61 05       	cpc	r22, r1
    168c:	71 05       	cpc	r23, r1
    168e:	08 f4       	brcc	.+2      	; 0x1692 <put_fat+0x22>
    1690:	d4 c0       	rjmp	.+424    	; 0x183a <put_fat+0x1ca>
    1692:	8e 89       	ldd	r24, Y+22	; 0x16
    1694:	9f 89       	ldd	r25, Y+23	; 0x17
    1696:	a8 8d       	ldd	r26, Y+24	; 0x18
    1698:	b9 8d       	ldd	r27, Y+25	; 0x19
    169a:	48 17       	cp	r20, r24
    169c:	59 07       	cpc	r21, r25
    169e:	6a 07       	cpc	r22, r26
    16a0:	7b 07       	cpc	r23, r27
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <put_fat+0x36>
    16a4:	ca c0       	rjmp	.+404    	; 0x183a <put_fat+0x1ca>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    16a6:	88 81       	ld	r24, Y
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	09 f4       	brne	.+2      	; 0x16ae <put_fat+0x3e>
    16ac:	73 c0       	rjmp	.+230    	; 0x1794 <put_fat+0x124>
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <put_fat+0x44>
    16b2:	8f c0       	rjmp	.+286    	; 0x17d2 <put_fat+0x162>
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	19 f0       	breq	.+6      	; 0x16be <put_fat+0x4e>
    16b8:	42 e0       	ldi	r20, 0x02	; 2
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	bb c0       	rjmp	.+374    	; 0x1834 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    16be:	8a 01       	movw	r16, r20
    16c0:	16 95       	lsr	r17
    16c2:	07 95       	ror	r16
    16c4:	04 0f       	add	r16, r20
    16c6:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    16c8:	a8 01       	movw	r20, r16
    16ca:	45 2f       	mov	r20, r21
    16cc:	55 27       	eor	r21, r21
    16ce:	46 95       	lsr	r20
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16d8:	a8 a1       	ldd	r26, Y+32	; 0x20
    16da:	b9 a1       	ldd	r27, Y+33	; 0x21
    16dc:	48 0f       	add	r20, r24
    16de:	59 1f       	adc	r21, r25
    16e0:	6a 1f       	adc	r22, r26
    16e2:	7b 1f       	adc	r23, r27
    16e4:	ce 01       	movw	r24, r28
    16e6:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    16ea:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <put_fat+0x82>
    16f0:	a1 c0       	rjmp	.+322    	; 0x1834 <put_fat+0x1c4>
			p = &fs->win[bc % SS(fs)];
    16f2:	d8 01       	movw	r26, r16
    16f4:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	e8 2e       	mov	r14, r24
    16fa:	f1 2c       	mov	r15, r1
    16fc:	ec 20       	and	r14, r12
    16fe:	fd 20       	and	r15, r13
    1700:	e1 14       	cp	r14, r1
    1702:	f1 04       	cpc	r15, r1
    1704:	51 f0       	breq	.+20     	; 0x171a <put_fat+0xaa>
    1706:	fe 01       	movw	r30, r28
    1708:	ea 0f       	add	r30, r26
    170a:	fb 1f       	adc	r31, r27
    170c:	86 a5       	ldd	r24, Z+46	; 0x2e
    170e:	8f 70       	andi	r24, 0x0F	; 15
    1710:	98 2d       	mov	r25, r8
    1712:	92 95       	swap	r25
    1714:	90 7f       	andi	r25, 0xF0	; 240
    1716:	98 2b       	or	r25, r24
    1718:	01 c0       	rjmp	.+2      	; 0x171c <put_fat+0xac>
    171a:	98 2d       	mov	r25, r8
    171c:	ac 0f       	add	r26, r28
    171e:	bd 1f       	adc	r27, r29
    1720:	9e 96       	adiw	r26, 0x2e	; 46
    1722:	9c 93       	st	X, r25
			bc++;
    1724:	0f 5f       	subi	r16, 0xFF	; 255
    1726:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    172c:	a8 01       	movw	r20, r16
    172e:	45 2f       	mov	r20, r21
    1730:	55 27       	eor	r21, r21
    1732:	46 95       	lsr	r20
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	8e 8d       	ldd	r24, Y+30	; 0x1e
    173a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    173c:	a8 a1       	ldd	r26, Y+32	; 0x20
    173e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1740:	48 0f       	add	r20, r24
    1742:	59 1f       	adc	r21, r25
    1744:	6a 1f       	adc	r22, r26
    1746:	7b 1f       	adc	r23, r27
    1748:	ce 01       	movw	r24, r28
    174a:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    174e:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	09 f0       	breq	.+2      	; 0x1756 <put_fat+0xe6>
    1754:	6f c0       	rjmp	.+222    	; 0x1834 <put_fat+0x1c4>
			p = &fs->win[bc % SS(fs)];
    1756:	b8 01       	movw	r22, r16
    1758:	71 70       	andi	r23, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    175a:	e1 14       	cp	r14, r1
    175c:	f1 04       	cpc	r15, r1
    175e:	49 f0       	breq	.+18     	; 0x1772 <put_fat+0x102>
    1760:	a4 e0       	ldi	r26, 0x04	; 4
    1762:	b6 94       	lsr	r11
    1764:	a7 94       	ror	r10
    1766:	97 94       	ror	r9
    1768:	87 94       	ror	r8
    176a:	aa 95       	dec	r26
    176c:	d1 f7       	brne	.-12     	; 0x1762 <put_fat+0xf2>
    176e:	e8 2d       	mov	r30, r8
    1770:	0b c0       	rjmp	.+22     	; 0x1788 <put_fat+0x118>
    1772:	fe 01       	movw	r30, r28
    1774:	e6 0f       	add	r30, r22
    1776:	f7 1f       	adc	r31, r23
    1778:	e6 a5       	ldd	r30, Z+46	; 0x2e
    177a:	e0 7f       	andi	r30, 0xF0	; 240
    177c:	bb 27       	eor	r27, r27
    177e:	ab 2d       	mov	r26, r11
    1780:	9a 2d       	mov	r25, r10
    1782:	89 2d       	mov	r24, r9
    1784:	8f 70       	andi	r24, 0x0F	; 15
    1786:	e8 2b       	or	r30, r24
    1788:	6c 0f       	add	r22, r28
    178a:	7d 1f       	adc	r23, r29
    178c:	db 01       	movw	r26, r22
    178e:	9e 96       	adiw	r26, 0x2e	; 46
    1790:	ec 93       	st	X, r30
    1792:	50 c0       	rjmp	.+160    	; 0x1834 <put_fat+0x1c4>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1794:	77 27       	eor	r23, r23
    1796:	6f 2d       	mov	r22, r15
    1798:	5e 2d       	mov	r21, r14
    179a:	4d 2d       	mov	r20, r13
    179c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    179e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17a0:	a8 a1       	ldd	r26, Y+32	; 0x20
    17a2:	b9 a1       	ldd	r27, Y+33	; 0x21
    17a4:	48 0f       	add	r20, r24
    17a6:	59 1f       	adc	r21, r25
    17a8:	6a 1f       	adc	r22, r26
    17aa:	7b 1f       	adc	r23, r27
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    17b2:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	09 f0       	breq	.+2      	; 0x17ba <put_fat+0x14a>
    17b8:	3d c0       	rjmp	.+122    	; 0x1834 <put_fat+0x1c4>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
    17ba:	cc 0c       	add	r12, r12
    17bc:	dd 1c       	adc	r13, r13
    17be:	ee 1c       	adc	r14, r14
    17c0:	ff 1c       	adc	r15, r15
    17c2:	f6 01       	movw	r30, r12
    17c4:	f1 70       	andi	r31, 0x01	; 1
    17c6:	be 96       	adiw	r30, 0x2e	; 46
    17c8:	ec 0f       	add	r30, r28
    17ca:	fd 1f       	adc	r31, r29
    17cc:	91 82       	std	Z+1, r9	; 0x01
    17ce:	80 82       	st	Z, r8
    17d0:	31 c0       	rjmp	.+98     	; 0x1834 <put_fat+0x1c4>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    17d2:	27 e0       	ldi	r18, 0x07	; 7
    17d4:	76 95       	lsr	r23
    17d6:	67 95       	ror	r22
    17d8:	57 95       	ror	r21
    17da:	47 95       	ror	r20
    17dc:	2a 95       	dec	r18
    17de:	d1 f7       	brne	.-12     	; 0x17d4 <put_fat+0x164>
    17e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17e4:	a8 a1       	ldd	r26, Y+32	; 0x20
    17e6:	b9 a1       	ldd	r27, Y+33	; 0x21
    17e8:	48 0f       	add	r20, r24
    17ea:	59 1f       	adc	r21, r25
    17ec:	6a 1f       	adc	r22, r26
    17ee:	7b 1f       	adc	r23, r27
    17f0:	ce 01       	movw	r24, r28
    17f2:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    17f6:	ac 01       	movw	r20, r24
			if (res != FR_OK) break;
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	e1 f4       	brne	.+56     	; 0x1834 <put_fat+0x1c4>
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    17fc:	92 e0       	ldi	r25, 0x02	; 2
    17fe:	cc 0c       	add	r12, r12
    1800:	dd 1c       	adc	r13, r13
    1802:	ee 1c       	adc	r14, r14
    1804:	ff 1c       	adc	r15, r15
    1806:	9a 95       	dec	r25
    1808:	d1 f7       	brne	.-12     	; 0x17fe <put_fat+0x18e>
    180a:	f6 01       	movw	r30, r12
    180c:	f1 70       	andi	r31, 0x01	; 1
    180e:	be 96       	adiw	r30, 0x2e	; 46
    1810:	ec 0f       	add	r30, r28
    1812:	fd 1f       	adc	r31, r29
			ST_DWORD(p, val);
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	a2 81       	ldd	r26, Z+2	; 0x02
    181a:	b3 81       	ldd	r27, Z+3	; 0x03
    181c:	80 70       	andi	r24, 0x00	; 0
    181e:	90 70       	andi	r25, 0x00	; 0
    1820:	a0 70       	andi	r26, 0x00	; 0
    1822:	b0 7f       	andi	r27, 0xF0	; 240
    1824:	88 29       	or	r24, r8
    1826:	99 29       	or	r25, r9
    1828:	aa 29       	or	r26, r10
    182a:	bb 29       	or	r27, r11
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	8c 83       	std	Y+4, r24	; 0x04
    1838:	02 c0       	rjmp	.+4      	; 0x183e <put_fat+0x1ce>
    183a:	42 e0       	ldi	r20, 0x02	; 2
    183c:	50 e0       	ldi	r21, 0x00	; 0
	}

	return res;
}
    183e:	ca 01       	movw	r24, r20
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	ec e0       	ldi	r30, 0x0C	; 12
    1846:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__epilogue_restores__+0xc>

0000184a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e2       	ldi	r30, 0x2B	; 43
    1850:	fc e0       	ldi	r31, 0x0C	; 12
    1852:	0c 94 8e 1c 	jmp	0x391c	; 0x391c <__prologue_saves__+0x12>
    1856:	6c 01       	movw	r12, r24
    1858:	7a 01       	movw	r14, r20
    185a:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    185c:	42 30       	cpi	r20, 0x02	; 2
    185e:	51 05       	cpc	r21, r1
    1860:	61 05       	cpc	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	08 f4       	brcc	.+2      	; 0x1868 <get_fat+0x1e>
    1866:	ac c0       	rjmp	.+344    	; 0x19c0 <get_fat+0x176>
    1868:	f6 01       	movw	r30, r12
    186a:	86 89       	ldd	r24, Z+22	; 0x16
    186c:	97 89       	ldd	r25, Z+23	; 0x17
    186e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1870:	b1 8d       	ldd	r27, Z+25	; 0x19
    1872:	48 17       	cp	r20, r24
    1874:	59 07       	cpc	r21, r25
    1876:	6a 07       	cpc	r22, r26
    1878:	7b 07       	cpc	r23, r27
    187a:	08 f0       	brcs	.+2      	; 0x187e <get_fat+0x34>
    187c:	a1 c0       	rjmp	.+322    	; 0x19c0 <get_fat+0x176>
		return 1;

	switch (fs->fs_type) {
    187e:	80 81       	ld	r24, Z
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	09 f4       	brne	.+2      	; 0x1886 <get_fat+0x3c>
    1884:	57 c0       	rjmp	.+174    	; 0x1934 <get_fat+0xea>
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	09 f4       	brne	.+2      	; 0x188c <get_fat+0x42>
    188a:	74 c0       	rjmp	.+232    	; 0x1974 <get_fat+0x12a>
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	09 f0       	breq	.+2      	; 0x1892 <get_fat+0x48>
    1890:	9c c0       	rjmp	.+312    	; 0x19ca <get_fat+0x180>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1892:	ea 01       	movw	r28, r20
    1894:	d6 95       	lsr	r29
    1896:	c7 95       	ror	r28
    1898:	c4 0f       	add	r28, r20
    189a:	d5 1f       	adc	r29, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    189c:	ae 01       	movw	r20, r28
    189e:	45 2f       	mov	r20, r21
    18a0:	55 27       	eor	r21, r21
    18a2:	46 95       	lsr	r20
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	f6 01       	movw	r30, r12
    18aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    18ac:	97 8d       	ldd	r25, Z+31	; 0x1f
    18ae:	a0 a1       	ldd	r26, Z+32	; 0x20
    18b0:	b1 a1       	ldd	r27, Z+33	; 0x21
    18b2:	48 0f       	add	r20, r24
    18b4:	59 1f       	adc	r21, r25
    18b6:	6a 1f       	adc	r22, r26
    18b8:	7b 1f       	adc	r23, r27
    18ba:	c6 01       	movw	r24, r12
    18bc:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    18c0:	89 2b       	or	r24, r25
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <get_fat+0x7c>
    18c4:	82 c0       	rjmp	.+260    	; 0x19ca <get_fat+0x180>
		wc = fs->win[bc % SS(fs)]; bc++;
    18c6:	fe 01       	movw	r30, r28
    18c8:	f1 70       	andi	r31, 0x01	; 1
    18ca:	ec 0d       	add	r30, r12
    18cc:	fd 1d       	adc	r31, r13
    18ce:	b6 a4       	ldd	r11, Z+46	; 0x2e
    18d0:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    18d2:	ae 01       	movw	r20, r28
    18d4:	45 2f       	mov	r20, r21
    18d6:	55 27       	eor	r21, r21
    18d8:	46 95       	lsr	r20
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	f6 01       	movw	r30, r12
    18e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    18e2:	97 8d       	ldd	r25, Z+31	; 0x1f
    18e4:	a0 a1       	ldd	r26, Z+32	; 0x20
    18e6:	b1 a1       	ldd	r27, Z+33	; 0x21
    18e8:	48 0f       	add	r20, r24
    18ea:	59 1f       	adc	r21, r25
    18ec:	6a 1f       	adc	r22, r26
    18ee:	7b 1f       	adc	r23, r27
    18f0:	c6 01       	movw	r24, r12
    18f2:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    18f6:	89 2b       	or	r24, r25
    18f8:	09 f0       	breq	.+2      	; 0x18fc <get_fat+0xb2>
    18fa:	67 c0       	rjmp	.+206    	; 0x19ca <get_fat+0x180>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    18fc:	6b 2d       	mov	r22, r11
    18fe:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1900:	d1 70       	andi	r29, 0x01	; 1
    1902:	cc 0d       	add	r28, r12
    1904:	dd 1d       	adc	r29, r13
    1906:	9e a5       	ldd	r25, Y+46	; 0x2e
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	68 2b       	or	r22, r24
    190c:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    190e:	c7 01       	movw	r24, r14
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	89 2b       	or	r24, r25
    1916:	39 f0       	breq	.+14     	; 0x1926 <get_fat+0xdc>
    1918:	b4 e0       	ldi	r27, 0x04	; 4
    191a:	76 95       	lsr	r23
    191c:	67 95       	ror	r22
    191e:	ba 95       	dec	r27
    1920:	e1 f7       	brne	.-8      	; 0x191a <get_fat+0xd0>
    1922:	9b 01       	movw	r18, r22
    1924:	24 c0       	rjmp	.+72     	; 0x196e <get_fat+0x124>
    1926:	9b 01       	movw	r18, r22
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	3f 70       	andi	r19, 0x0F	; 15
    192e:	40 70       	andi	r20, 0x00	; 0
    1930:	50 70       	andi	r21, 0x00	; 0
    1932:	4f c0       	rjmp	.+158    	; 0x19d2 <get_fat+0x188>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1934:	45 2f       	mov	r20, r21
    1936:	56 2f       	mov	r21, r22
    1938:	67 2f       	mov	r22, r23
    193a:	77 27       	eor	r23, r23
    193c:	f6 01       	movw	r30, r12
    193e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1940:	97 8d       	ldd	r25, Z+31	; 0x1f
    1942:	a0 a1       	ldd	r26, Z+32	; 0x20
    1944:	b1 a1       	ldd	r27, Z+33	; 0x21
    1946:	48 0f       	add	r20, r24
    1948:	59 1f       	adc	r21, r25
    194a:	6a 1f       	adc	r22, r26
    194c:	7b 1f       	adc	r23, r27
    194e:	c6 01       	movw	r24, r12
    1950:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    1954:	89 2b       	or	r24, r25
    1956:	c9 f5       	brne	.+114    	; 0x19ca <get_fat+0x180>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);
    1958:	ee 0c       	add	r14, r14
    195a:	ff 1c       	adc	r15, r15
    195c:	00 1f       	adc	r16, r16
    195e:	11 1f       	adc	r17, r17
    1960:	f7 01       	movw	r30, r14
    1962:	f1 70       	andi	r31, 0x01	; 1
    1964:	ec 0d       	add	r30, r12
    1966:	fd 1d       	adc	r31, r13
    1968:	86 a5       	ldd	r24, Z+46	; 0x2e
    196a:	97 a5       	ldd	r25, Z+47	; 0x2f
    196c:	9c 01       	movw	r18, r24
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	2f c0       	rjmp	.+94     	; 0x19d2 <get_fat+0x188>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1974:	e7 e0       	ldi	r30, 0x07	; 7
    1976:	76 95       	lsr	r23
    1978:	67 95       	ror	r22
    197a:	57 95       	ror	r21
    197c:	47 95       	ror	r20
    197e:	ea 95       	dec	r30
    1980:	d1 f7       	brne	.-12     	; 0x1976 <get_fat+0x12c>
    1982:	f6 01       	movw	r30, r12
    1984:	86 8d       	ldd	r24, Z+30	; 0x1e
    1986:	97 8d       	ldd	r25, Z+31	; 0x1f
    1988:	a0 a1       	ldd	r26, Z+32	; 0x20
    198a:	b1 a1       	ldd	r27, Z+33	; 0x21
    198c:	48 0f       	add	r20, r24
    198e:	59 1f       	adc	r21, r25
    1990:	6a 1f       	adc	r22, r26
    1992:	7b 1f       	adc	r23, r27
    1994:	c6 01       	movw	r24, r12
    1996:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    199a:	89 2b       	or	r24, r25
    199c:	b1 f4       	brne	.+44     	; 0x19ca <get_fat+0x180>
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
    199e:	32 e0       	ldi	r19, 0x02	; 2
    19a0:	ee 0c       	add	r14, r14
    19a2:	ff 1c       	adc	r15, r15
    19a4:	00 1f       	adc	r16, r16
    19a6:	11 1f       	adc	r17, r17
    19a8:	3a 95       	dec	r19
    19aa:	d1 f7       	brne	.-12     	; 0x19a0 <get_fat+0x156>
    19ac:	f7 01       	movw	r30, r14
    19ae:	f1 70       	andi	r31, 0x01	; 1
    19b0:	ec 0d       	add	r30, r12
    19b2:	fd 1d       	adc	r31, r13
    19b4:	26 a5       	ldd	r18, Z+46	; 0x2e
    19b6:	37 a5       	ldd	r19, Z+47	; 0x2f
    19b8:	40 a9       	ldd	r20, Z+48	; 0x30
    19ba:	51 a9       	ldd	r21, Z+49	; 0x31
    19bc:	5f 70       	andi	r21, 0x0F	; 15
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <get_fat+0x188>
    19c0:	21 e0       	ldi	r18, 0x01	; 1
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <get_fat+0x188>
    19ca:	2f ef       	ldi	r18, 0xFF	; 255
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f ef       	ldi	r20, 0xFF	; 255
    19d0:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    19d2:	b9 01       	movw	r22, r18
    19d4:	ca 01       	movw	r24, r20
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	e9 e0       	ldi	r30, 0x09	; 9
    19dc:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__epilogue_restores__+0x12>

000019e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    19e0:	a0 e0       	ldi	r26, 0x00	; 0
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__prologue_saves__+0x4>
    19ec:	ec 01       	movw	r28, r24
    19ee:	2a 01       	movw	r4, r20
    19f0:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    19f2:	41 15       	cp	r20, r1
    19f4:	51 05       	cpc	r21, r1
    19f6:	61 05       	cpc	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	99 f4       	brne	.+38     	; 0x1a22 <create_chain+0x42>
		scl = fs->last_clust;			/* Get suggested start point */
    19fc:	8a 84       	ldd	r8, Y+10	; 0x0a
    19fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a00:	ac 84       	ldd	r10, Y+12	; 0x0c
    1a02:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1a04:	81 14       	cp	r8, r1
    1a06:	91 04       	cpc	r9, r1
    1a08:	a1 04       	cpc	r10, r1
    1a0a:	b1 04       	cpc	r11, r1
    1a0c:	09 f1       	breq	.+66     	; 0x1a50 <create_chain+0x70>
    1a0e:	8e 89       	ldd	r24, Y+22	; 0x16
    1a10:	9f 89       	ldd	r25, Y+23	; 0x17
    1a12:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a14:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a16:	88 16       	cp	r8, r24
    1a18:	99 06       	cpc	r9, r25
    1a1a:	aa 06       	cpc	r10, r26
    1a1c:	bb 06       	cpc	r11, r27
    1a1e:	c0 f4       	brcc	.+48     	; 0x1a50 <create_chain+0x70>
    1a20:	1c c0       	rjmp	.+56     	; 0x1a5a <create_chain+0x7a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1a22:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1a2a:	62 30       	cpi	r22, 0x02	; 2
    1a2c:	71 05       	cpc	r23, r1
    1a2e:	81 05       	cpc	r24, r1
    1a30:	91 05       	cpc	r25, r1
    1a32:	08 f4       	brcc	.+2      	; 0x1a36 <create_chain+0x56>
    1a34:	8a c0       	rjmp	.+276    	; 0x1b4a <create_chain+0x16a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1a36:	8e 89       	ldd	r24, Y+22	; 0x16
    1a38:	9f 89       	ldd	r25, Y+23	; 0x17
    1a3a:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a3c:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a3e:	28 17       	cp	r18, r24
    1a40:	39 07       	cpc	r19, r25
    1a42:	4a 07       	cpc	r20, r26
    1a44:	5b 07       	cpc	r21, r27
    1a46:	08 f4       	brcc	.+2      	; 0x1a4a <create_chain+0x6a>
    1a48:	8e c0       	rjmp	.+284    	; 0x1b66 <create_chain+0x186>
    1a4a:	53 01       	movw	r10, r6
    1a4c:	42 01       	movw	r8, r4
    1a4e:	05 c0       	rjmp	.+10     	; 0x1a5a <create_chain+0x7a>
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	84 2e       	mov	r8, r20
    1a54:	91 2c       	mov	r9, r1
    1a56:	a1 2c       	mov	r10, r1
    1a58:	b1 2c       	mov	r11, r1
    1a5a:	75 01       	movw	r14, r10
    1a5c:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1a5e:	08 94       	sec
    1a60:	c1 1c       	adc	r12, r1
    1a62:	d1 1c       	adc	r13, r1
    1a64:	e1 1c       	adc	r14, r1
    1a66:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1a68:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6a:	9f 89       	ldd	r25, Y+23	; 0x17
    1a6c:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a6e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a70:	c8 16       	cp	r12, r24
    1a72:	d9 06       	cpc	r13, r25
    1a74:	ea 06       	cpc	r14, r26
    1a76:	fb 06       	cpc	r15, r27
    1a78:	60 f0       	brcs	.+24     	; 0x1a92 <create_chain+0xb2>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1a7a:	22 e0       	ldi	r18, 0x02	; 2
    1a7c:	82 16       	cp	r8, r18
    1a7e:	91 04       	cpc	r9, r1
    1a80:	a1 04       	cpc	r10, r1
    1a82:	b1 04       	cpc	r11, r1
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <create_chain+0xa8>
    1a86:	6b c0       	rjmp	.+214    	; 0x1b5e <create_chain+0x17e>
    1a88:	32 e0       	ldi	r19, 0x02	; 2
    1a8a:	c3 2e       	mov	r12, r19
    1a8c:	d1 2c       	mov	r13, r1
    1a8e:	e1 2c       	mov	r14, r1
    1a90:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1a92:	ce 01       	movw	r24, r28
    1a94:	b7 01       	movw	r22, r14
    1a96:	a6 01       	movw	r20, r12
    1a98:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    1aa0:	61 15       	cp	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	81 05       	cpc	r24, r1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	a9 f0       	breq	.+42     	; 0x1ad4 <create_chain+0xf4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1aaa:	2f 3f       	cpi	r18, 0xFF	; 255
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	38 07       	cpc	r19, r24
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	48 07       	cpc	r20, r24
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	58 07       	cpc	r21, r24
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <create_chain+0xdc>
    1aba:	55 c0       	rjmp	.+170    	; 0x1b66 <create_chain+0x186>
    1abc:	21 30       	cpi	r18, 0x01	; 1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	41 05       	cpc	r20, r1
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <create_chain+0xe8>
    1ac6:	4f c0       	rjmp	.+158    	; 0x1b66 <create_chain+0x186>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1ac8:	c8 14       	cp	r12, r8
    1aca:	d9 04       	cpc	r13, r9
    1acc:	ea 04       	cpc	r14, r10
    1ace:	fb 04       	cpc	r15, r11
    1ad0:	31 f6       	brne	.-116    	; 0x1a5e <create_chain+0x7e>
    1ad2:	45 c0       	rjmp	.+138    	; 0x1b5e <create_chain+0x17e>
    1ad4:	bc 2c       	mov	r11, r12
    1ad6:	ad 2c       	mov	r10, r13
    1ad8:	9e 2c       	mov	r9, r14
    1ada:	8f 2c       	mov	r8, r15
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1adc:	ce 01       	movw	r24, r28
    1ade:	a6 01       	movw	r20, r12
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	0f ef       	ldi	r16, 0xFF	; 255
    1ae4:	1f ef       	ldi	r17, 0xFF	; 255
    1ae6:	2f ef       	ldi	r18, 0xFF	; 255
    1ae8:	3f e0       	ldi	r19, 0x0F	; 15
    1aea:	0e 94 38 0b 	call	0x1670	; 0x1670 <put_fat>
	if (res == FR_OK && clst != 0) {
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	51 f5       	brne	.+84     	; 0x1b46 <create_chain+0x166>
    1af2:	41 14       	cp	r4, r1
    1af4:	51 04       	cpc	r5, r1
    1af6:	61 04       	cpc	r6, r1
    1af8:	71 04       	cpc	r7, r1
    1afa:	49 f0       	breq	.+18     	; 0x1b0e <create_chain+0x12e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1afc:	ce 01       	movw	r24, r28
    1afe:	b3 01       	movw	r22, r6
    1b00:	a2 01       	movw	r20, r4
    1b02:	86 01       	movw	r16, r12
    1b04:	97 01       	movw	r18, r14
    1b06:	0e 94 38 0b 	call	0x1670	; 0x1670 <put_fat>
	}
	if (res == FR_OK) {
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	e1 f4       	brne	.+56     	; 0x1b46 <create_chain+0x166>
		fs->last_clust = ncl;			/* Update FSINFO */
    1b0e:	ba 86       	std	Y+10, r11	; 0x0a
    1b10:	ab 86       	std	Y+11, r10	; 0x0b
    1b12:	9c 86       	std	Y+12, r9	; 0x0c
    1b14:	8d 86       	std	Y+13, r8	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    1b16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b1a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b1c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b20:	2f ef       	ldi	r18, 0xFF	; 255
    1b22:	92 07       	cpc	r25, r18
    1b24:	2f ef       	ldi	r18, 0xFF	; 255
    1b26:	a2 07       	cpc	r26, r18
    1b28:	2f ef       	ldi	r18, 0xFF	; 255
    1b2a:	b2 07       	cpc	r27, r18
    1b2c:	49 f0       	breq	.+18     	; 0x1b40 <create_chain+0x160>
			fs->free_clust--;
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	a1 09       	sbc	r26, r1
    1b32:	b1 09       	sbc	r27, r1
    1b34:	8e 87       	std	Y+14, r24	; 0x0e
    1b36:	9f 87       	std	Y+15, r25	; 0x0f
    1b38:	a8 8b       	std	Y+16, r26	; 0x10
    1b3a:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	a7 01       	movw	r20, r14
    1b42:	96 01       	movw	r18, r12
    1b44:	10 c0       	rjmp	.+32     	; 0x1b66 <create_chain+0x186>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <create_chain+0x174>
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	09 c0       	rjmp	.+18     	; 0x1b66 <create_chain+0x186>
    1b54:	2f ef       	ldi	r18, 0xFF	; 255
    1b56:	3f ef       	ldi	r19, 0xFF	; 255
    1b58:	4f ef       	ldi	r20, 0xFF	; 255
    1b5a:	5f ef       	ldi	r21, 0xFF	; 255
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <create_chain+0x186>
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1b66:	b9 01       	movw	r22, r18
    1b68:	ca 01       	movw	r24, r20
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	e0 e1       	ldi	r30, 0x10	; 16
    1b70:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__epilogue_restores__+0x4>

00001b74 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1b74:	a6 e0       	ldi	r26, 0x06	; 6
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e0 ec       	ldi	r30, 0xC0	; 192
    1b7a:	fd e0       	ldi	r31, 0x0D	; 13
    1b7c:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__prologue_saves__>
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	7a 01       	movw	r14, r20
    1b86:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1b88:	dc 01       	movw	r26, r24
    1b8a:	12 96       	adiw	r26, 0x02	; 2
    1b8c:	6d 91       	ld	r22, X+
    1b8e:	7c 91       	ld	r23, X
    1b90:	13 97       	sbiw	r26, 0x03	; 3
    1b92:	8d 91       	ld	r24, X+
    1b94:	9c 91       	ld	r25, X
    1b96:	0e 94 b4 0a 	call	0x1568	; 0x1568 <validate>
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1b9e:	89 2b       	or	r24, r25
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <f_lseek+0x30>
    1ba2:	b9 c1       	rjmp	.+882    	; 0x1f16 <f_lseek+0x3a2>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1ba4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ba6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ba8:	84 81       	ldd	r24, Z+4	; 0x04
    1baa:	87 fd       	sbrc	r24, 7
    1bac:	90 c0       	rjmp	.+288    	; 0x1cce <f_lseek+0x15a>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    1bae:	ad 81       	ldd	r26, Y+5	; 0x05
    1bb0:	be 81       	ldd	r27, Y+6	; 0x06
    1bb2:	1a 96       	adiw	r26, 0x0a	; 10
    1bb4:	6d 90       	ld	r6, X+
    1bb6:	7d 90       	ld	r7, X+
    1bb8:	8d 90       	ld	r8, X+
    1bba:	9c 90       	ld	r9, X
    1bbc:	1d 97       	sbiw	r26, 0x0d	; 13
    1bbe:	6e 14       	cp	r6, r14
    1bc0:	7f 04       	cpc	r7, r15
    1bc2:	80 06       	cpc	r8, r16
    1bc4:	91 06       	cpc	r9, r17
    1bc6:	10 f4       	brcc	.+4      	; 0x1bcc <f_lseek+0x58>
    1bc8:	81 ff       	sbrs	r24, 1
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <f_lseek+0x5c>
    1bcc:	37 01       	movw	r6, r14
    1bce:	48 01       	movw	r8, r16
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    1bd0:	ed 81       	ldd	r30, Y+5	; 0x05
    1bd2:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd4:	e6 80       	ldd	r14, Z+6	; 0x06
    1bd6:	f7 80       	ldd	r15, Z+7	; 0x07
    1bd8:	00 85       	ldd	r16, Z+8	; 0x08
    1bda:	11 85       	ldd	r17, Z+9	; 0x09
		fp->fptr = nsect = 0;
    1bdc:	16 82       	std	Z+6, r1	; 0x06
    1bde:	17 82       	std	Z+7, r1	; 0x07
    1be0:	10 86       	std	Z+8, r1	; 0x08
    1be2:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    1be4:	61 14       	cp	r6, r1
    1be6:	71 04       	cpc	r7, r1
    1be8:	81 04       	cpc	r8, r1
    1bea:	91 04       	cpc	r9, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <f_lseek+0x7c>
    1bee:	60 c1       	rjmp	.+704    	; 0x1eb0 <f_lseek+0x33c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	f0 81       	ld	r31, Z
    1bf4:	e0 2d       	mov	r30, r0
    1bf6:	fa 83       	std	Y+2, r31	; 0x02
    1bf8:	e9 83       	std	Y+1, r30	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	a8 2e       	mov	r10, r24
    1bfe:	bb 24       	eor	r11, r11
    1c00:	cc 24       	eor	r12, r12
    1c02:	dd 24       	eor	r13, r13
    1c04:	f9 e0       	ldi	r31, 0x09	; 9
    1c06:	aa 0c       	add	r10, r10
    1c08:	bb 1c       	adc	r11, r11
    1c0a:	cc 1c       	adc	r12, r12
    1c0c:	dd 1c       	adc	r13, r13
    1c0e:	fa 95       	dec	r31
    1c10:	d1 f7       	brne	.-12     	; 0x1c06 <f_lseek+0x92>
			if (ifptr > 0 &&
    1c12:	e1 14       	cp	r14, r1
    1c14:	f1 04       	cpc	r15, r1
    1c16:	01 05       	cpc	r16, r1
    1c18:	11 05       	cpc	r17, r1
    1c1a:	c1 f1       	breq	.+112    	; 0x1c8c <f_lseek+0x118>
    1c1c:	17 01       	movw	r2, r14
    1c1e:	28 01       	movw	r4, r16
    1c20:	08 94       	sec
    1c22:	21 08       	sbc	r2, r1
    1c24:	31 08       	sbc	r3, r1
    1c26:	41 08       	sbc	r4, r1
    1c28:	51 08       	sbc	r5, r1
    1c2a:	c4 01       	movw	r24, r8
    1c2c:	b3 01       	movw	r22, r6
    1c2e:	61 50       	subi	r22, 0x01	; 1
    1c30:	70 40       	sbci	r23, 0x00	; 0
    1c32:	80 40       	sbci	r24, 0x00	; 0
    1c34:	90 40       	sbci	r25, 0x00	; 0
    1c36:	a6 01       	movw	r20, r12
    1c38:	95 01       	movw	r18, r10
    1c3a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__udivmodsi4>
    1c3e:	79 01       	movw	r14, r18
    1c40:	8a 01       	movw	r16, r20
    1c42:	c2 01       	movw	r24, r4
    1c44:	b1 01       	movw	r22, r2
    1c46:	a6 01       	movw	r20, r12
    1c48:	95 01       	movw	r18, r10
    1c4a:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__udivmodsi4>
    1c4e:	e2 16       	cp	r14, r18
    1c50:	f3 06       	cpc	r15, r19
    1c52:	04 07       	cpc	r16, r20
    1c54:	15 07       	cpc	r17, r21
    1c56:	d0 f0       	brcs	.+52     	; 0x1c8c <f_lseek+0x118>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1c58:	88 27       	eor	r24, r24
    1c5a:	99 27       	eor	r25, r25
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	8a 19       	sub	r24, r10
    1c60:	9b 09       	sbc	r25, r11
    1c62:	ac 09       	sbc	r26, r12
    1c64:	bd 09       	sbc	r27, r13
    1c66:	82 21       	and	r24, r2
    1c68:	93 21       	and	r25, r3
    1c6a:	a4 21       	and	r26, r4
    1c6c:	b5 21       	and	r27, r5
    1c6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1c70:	fe 81       	ldd	r31, Y+6	; 0x06
    1c72:	86 83       	std	Z+6, r24	; 0x06
    1c74:	97 83       	std	Z+7, r25	; 0x07
    1c76:	a0 87       	std	Z+8, r26	; 0x08
    1c78:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    1c7a:	68 1a       	sub	r6, r24
    1c7c:	79 0a       	sbc	r7, r25
    1c7e:	8a 0a       	sbc	r8, r26
    1c80:	9b 0a       	sbc	r9, r27
				clst = fp->curr_clust;
    1c82:	42 89       	ldd	r20, Z+18	; 0x12
    1c84:	53 89       	ldd	r21, Z+19	; 0x13
    1c86:	64 89       	ldd	r22, Z+20	; 0x14
    1c88:	75 89       	ldd	r23, Z+21	; 0x15
    1c8a:	47 c0       	rjmp	.+142    	; 0x1d1a <f_lseek+0x1a6>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    1c8c:	ad 81       	ldd	r26, Y+5	; 0x05
    1c8e:	be 81       	ldd	r27, Y+6	; 0x06
    1c90:	1e 96       	adiw	r26, 0x0e	; 14
    1c92:	4d 91       	ld	r20, X+
    1c94:	5d 91       	ld	r21, X+
    1c96:	6d 91       	ld	r22, X+
    1c98:	7c 91       	ld	r23, X
    1c9a:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    1c9c:	41 15       	cp	r20, r1
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	61 05       	cpc	r22, r1
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	a1 f5       	brne	.+104    	; 0x1d0e <f_lseek+0x19a>
					clst = create_chain(fp->fs, 0);
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <create_chain>
    1cb6:	ab 01       	movw	r20, r22
    1cb8:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1cba:	41 30       	cpi	r20, 0x01	; 1
    1cbc:	51 05       	cpc	r21, r1
    1cbe:	61 05       	cpc	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	51 f4       	brne	.+20     	; 0x1cd8 <f_lseek+0x164>
    1cc4:	ed 81       	ldd	r30, Y+5	; 0x05
    1cc6:	fe 81       	ldd	r31, Y+6	; 0x06
    1cc8:	84 81       	ldd	r24, Z+4	; 0x04
    1cca:	80 68       	ori	r24, 0x80	; 128
    1ccc:	84 83       	std	Z+4, r24	; 0x04
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	1f c1       	rjmp	.+574    	; 0x1f16 <f_lseek+0x3a2>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1cd8:	4f 3f       	cpi	r20, 0xFF	; 255
    1cda:	9f ef       	ldi	r25, 0xFF	; 255
    1cdc:	59 07       	cpc	r21, r25
    1cde:	9f ef       	ldi	r25, 0xFF	; 255
    1ce0:	69 07       	cpc	r22, r25
    1ce2:	9f ef       	ldi	r25, 0xFF	; 255
    1ce4:	79 07       	cpc	r23, r25
    1ce6:	59 f4       	brne	.+22     	; 0x1cfe <f_lseek+0x18a>
    1ce8:	ad 81       	ldd	r26, Y+5	; 0x05
    1cea:	be 81       	ldd	r27, Y+6	; 0x06
    1cec:	14 96       	adiw	r26, 0x04	; 4
    1cee:	8c 91       	ld	r24, X
    1cf0:	14 97       	sbiw	r26, 0x04	; 4
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	14 96       	adiw	r26, 0x04	; 4
    1cf6:	8c 93       	st	X, r24
    1cf8:	e1 e0       	ldi	r30, 0x01	; 1
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	c8 c0       	rjmp	.+400    	; 0x1e8e <f_lseek+0x31a>
					fp->org_clust = clst;
    1cfe:	ad 81       	ldd	r26, Y+5	; 0x05
    1d00:	be 81       	ldd	r27, Y+6	; 0x06
    1d02:	1e 96       	adiw	r26, 0x0e	; 14
    1d04:	4d 93       	st	X+, r20
    1d06:	5d 93       	st	X+, r21
    1d08:	6d 93       	st	X+, r22
    1d0a:	7c 93       	st	X, r23
    1d0c:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->curr_clust = clst;
    1d0e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d10:	fe 81       	ldd	r31, Y+6	; 0x06
    1d12:	42 8b       	std	Z+18, r20	; 0x12
    1d14:	53 8b       	std	Z+19, r21	; 0x13
    1d16:	64 8b       	std	Z+20, r22	; 0x14
    1d18:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    1d1a:	41 15       	cp	r20, r1
    1d1c:	51 05       	cpc	r21, r1
    1d1e:	61 05       	cpc	r22, r1
    1d20:	71 05       	cpc	r23, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <f_lseek+0x1b2>
    1d24:	59 c0       	rjmp	.+178    	; 0x1dd8 <f_lseek+0x264>
    1d26:	c4 c0       	rjmp	.+392    	; 0x1eb0 <f_lseek+0x33c>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    1d28:	ad 81       	ldd	r26, Y+5	; 0x05
    1d2a:	be 81       	ldd	r27, Y+6	; 0x06
    1d2c:	14 96       	adiw	r26, 0x04	; 4
    1d2e:	8c 91       	ld	r24, X
    1d30:	14 97       	sbiw	r26, 0x04	; 4
    1d32:	2d 91       	ld	r18, X+
    1d34:	3c 91       	ld	r19, X
    1d36:	81 ff       	sbrs	r24, 1
    1d38:	0d c0       	rjmp	.+26     	; 0x1d54 <f_lseek+0x1e0>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <create_chain>
    1d40:	ab 01       	movw	r20, r22
    1d42:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    1d44:	41 15       	cp	r20, r1
    1d46:	51 05       	cpc	r21, r1
    1d48:	61 05       	cpc	r22, r1
    1d4a:	71 05       	cpc	r23, r1
    1d4c:	41 f4       	brne	.+16     	; 0x1d5e <f_lseek+0x1ea>
    1d4e:	35 01       	movw	r6, r10
    1d50:	46 01       	movw	r8, r12
    1d52:	48 c0       	rjmp	.+144    	; 0x1de4 <f_lseek+0x270>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    1d54:	c9 01       	movw	r24, r18
    1d56:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
    1d5a:	ab 01       	movw	r20, r22
    1d5c:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1d5e:	4f 3f       	cpi	r20, 0xFF	; 255
    1d60:	bf ef       	ldi	r27, 0xFF	; 255
    1d62:	5b 07       	cpc	r21, r27
    1d64:	bf ef       	ldi	r27, 0xFF	; 255
    1d66:	6b 07       	cpc	r22, r27
    1d68:	bf ef       	ldi	r27, 0xFF	; 255
    1d6a:	7b 07       	cpc	r23, r27
    1d6c:	41 f4       	brne	.+16     	; 0x1d7e <f_lseek+0x20a>
    1d6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d70:	fe 81       	ldd	r31, Y+6	; 0x06
    1d72:	84 81       	ldd	r24, Z+4	; 0x04
    1d74:	80 68       	ori	r24, 0x80	; 128
    1d76:	84 83       	std	Z+4, r24	; 0x04
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	aa cf       	rjmp	.-172    	; 0x1cd2 <f_lseek+0x15e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    1d7e:	42 30       	cpi	r20, 0x02	; 2
    1d80:	51 05       	cpc	r21, r1
    1d82:	61 05       	cpc	r22, r1
    1d84:	71 05       	cpc	r23, r1
    1d86:	08 f4       	brcc	.+2      	; 0x1d8a <f_lseek+0x216>
    1d88:	9d cf       	rjmp	.-198    	; 0x1cc4 <f_lseek+0x150>
    1d8a:	ad 81       	ldd	r26, Y+5	; 0x05
    1d8c:	be 81       	ldd	r27, Y+6	; 0x06
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	86 89       	ldd	r24, Z+22	; 0x16
    1d94:	97 89       	ldd	r25, Z+23	; 0x17
    1d96:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d98:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d9a:	48 17       	cp	r20, r24
    1d9c:	59 07       	cpc	r21, r25
    1d9e:	6a 07       	cpc	r22, r26
    1da0:	7b 07       	cpc	r23, r27
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <f_lseek+0x232>
    1da4:	8f cf       	rjmp	.-226    	; 0x1cc4 <f_lseek+0x150>
					fp->curr_clust = clst;
    1da6:	ad 81       	ldd	r26, Y+5	; 0x05
    1da8:	be 81       	ldd	r27, Y+6	; 0x06
    1daa:	52 96       	adiw	r26, 0x12	; 18
    1dac:	4d 93       	st	X+, r20
    1dae:	5d 93       	st	X+, r21
    1db0:	6d 93       	st	X+, r22
    1db2:	7c 93       	st	X, r23
    1db4:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    1db6:	fd 01       	movw	r30, r26
    1db8:	86 81       	ldd	r24, Z+6	; 0x06
    1dba:	97 81       	ldd	r25, Z+7	; 0x07
    1dbc:	a0 85       	ldd	r26, Z+8	; 0x08
    1dbe:	b1 85       	ldd	r27, Z+9	; 0x09
    1dc0:	8a 0d       	add	r24, r10
    1dc2:	9b 1d       	adc	r25, r11
    1dc4:	ac 1d       	adc	r26, r12
    1dc6:	bd 1d       	adc	r27, r13
    1dc8:	86 83       	std	Z+6, r24	; 0x06
    1dca:	97 83       	std	Z+7, r25	; 0x07
    1dcc:	a0 87       	std	Z+8, r26	; 0x08
    1dce:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    1dd0:	6a 18       	sub	r6, r10
    1dd2:	7b 08       	sbc	r7, r11
    1dd4:	8c 08       	sbc	r8, r12
    1dd6:	9d 08       	sbc	r9, r13
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    1dd8:	a6 14       	cp	r10, r6
    1dda:	b7 04       	cpc	r11, r7
    1ddc:	c8 04       	cpc	r12, r8
    1dde:	d9 04       	cpc	r13, r9
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <f_lseek+0x270>
    1de2:	a2 cf       	rjmp	.-188    	; 0x1d28 <f_lseek+0x1b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    1de4:	ed 81       	ldd	r30, Y+5	; 0x05
    1de6:	fe 81       	ldd	r31, Y+6	; 0x06
    1de8:	86 81       	ldd	r24, Z+6	; 0x06
    1dea:	97 81       	ldd	r25, Z+7	; 0x07
    1dec:	a0 85       	ldd	r26, Z+8	; 0x08
    1dee:	b1 85       	ldd	r27, Z+9	; 0x09
    1df0:	86 0d       	add	r24, r6
    1df2:	97 1d       	adc	r25, r7
    1df4:	a8 1d       	adc	r26, r8
    1df6:	b9 1d       	adc	r27, r9
    1df8:	86 83       	std	Z+6, r24	; 0x06
    1dfa:	97 83       	std	Z+7, r25	; 0x07
    1dfc:	a0 87       	std	Z+8, r26	; 0x08
    1dfe:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    1e00:	d4 01       	movw	r26, r8
    1e02:	c3 01       	movw	r24, r6
    1e04:	91 70       	andi	r25, 0x01	; 1
    1e06:	a0 70       	andi	r26, 0x00	; 0
    1e08:	b0 70       	andi	r27, 0x00	; 0
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	a1 05       	cpc	r26, r1
    1e0e:	b1 05       	cpc	r27, r1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <f_lseek+0x2a0>
    1e12:	4e c0       	rjmp	.+156    	; 0x1eb0 <f_lseek+0x33c>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    1e14:	c0 80       	ld	r12, Z
    1e16:	d1 80       	ldd	r13, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1e18:	ee ef       	ldi	r30, 0xFE	; 254
    1e1a:	ee 2e       	mov	r14, r30
    1e1c:	ef ef       	ldi	r30, 0xFF	; 255
    1e1e:	fe 2e       	mov	r15, r30
    1e20:	ef ef       	ldi	r30, 0xFF	; 255
    1e22:	0e 2f       	mov	r16, r30
    1e24:	ef ef       	ldi	r30, 0xFF	; 255
    1e26:	1e 2f       	mov	r17, r30
    1e28:	e4 0e       	add	r14, r20
    1e2a:	f5 1e       	adc	r15, r21
    1e2c:	06 1f       	adc	r16, r22
    1e2e:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1e30:	f6 01       	movw	r30, r12
    1e32:	86 89       	ldd	r24, Z+22	; 0x16
    1e34:	97 89       	ldd	r25, Z+23	; 0x17
    1e36:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e38:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e3a:	02 97       	sbiw	r24, 0x02	; 2
    1e3c:	a1 09       	sbc	r26, r1
    1e3e:	b1 09       	sbc	r27, r1
    1e40:	e8 16       	cp	r14, r24
    1e42:	f9 06       	cpc	r15, r25
    1e44:	0a 07       	cpc	r16, r26
    1e46:	1b 07       	cpc	r17, r27
    1e48:	c0 f4       	brcc	.+48     	; 0x1e7a <f_lseek+0x306>
	return clst * fs->csize + fs->database;
    1e4a:	22 81       	ldd	r18, Z+2	; 0x02
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	c8 01       	movw	r24, r16
    1e54:	b7 01       	movw	r22, r14
    1e56:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	f6 01       	movw	r30, r12
    1e60:	86 a1       	ldd	r24, Z+38	; 0x26
    1e62:	97 a1       	ldd	r25, Z+39	; 0x27
    1e64:	a0 a5       	ldd	r26, Z+40	; 0x28
    1e66:	b1 a5       	ldd	r27, Z+41	; 0x29
    1e68:	28 0f       	add	r18, r24
    1e6a:	39 1f       	adc	r19, r25
    1e6c:	4a 1f       	adc	r20, r26
    1e6e:	5b 1f       	adc	r21, r27
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    1e70:	21 15       	cp	r18, r1
    1e72:	31 05       	cpc	r19, r1
    1e74:	41 05       	cpc	r20, r1
    1e76:	51 05       	cpc	r21, r1
    1e78:	69 f4       	brne	.+26     	; 0x1e94 <f_lseek+0x320>
    1e7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1e7c:	be 81       	ldd	r27, Y+6	; 0x06
    1e7e:	14 96       	adiw	r26, 0x04	; 4
    1e80:	8c 91       	ld	r24, X
    1e82:	14 97       	sbiw	r26, 0x04	; 4
    1e84:	80 68       	ori	r24, 0x80	; 128
    1e86:	14 96       	adiw	r26, 0x04	; 4
    1e88:	8c 93       	st	X, r24
    1e8a:	e2 e0       	ldi	r30, 0x02	; 2
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	fc 83       	std	Y+4, r31	; 0x04
    1e90:	eb 83       	std	Y+3, r30	; 0x03
    1e92:	41 c0       	rjmp	.+130    	; 0x1f16 <f_lseek+0x3a2>
					nsect += ofs / SS(fp->fs);
    1e94:	84 01       	movw	r16, r8
    1e96:	73 01       	movw	r14, r6
    1e98:	69 e0       	ldi	r22, 0x09	; 9
    1e9a:	16 95       	lsr	r17
    1e9c:	07 95       	ror	r16
    1e9e:	f7 94       	ror	r15
    1ea0:	e7 94       	ror	r14
    1ea2:	6a 95       	dec	r22
    1ea4:	d1 f7       	brne	.-12     	; 0x1e9a <f_lseek+0x326>
    1ea6:	e2 0e       	add	r14, r18
    1ea8:	f3 1e       	adc	r15, r19
    1eaa:	04 1f       	adc	r16, r20
    1eac:	15 1f       	adc	r17, r21
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <f_lseek+0x342>
    1eb0:	ee 24       	eor	r14, r14
    1eb2:	ff 24       	eor	r15, r15
    1eb4:	87 01       	movw	r16, r14
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    1eb6:	ed 81       	ldd	r30, Y+5	; 0x05
    1eb8:	fe 81       	ldd	r31, Y+6	; 0x06
    1eba:	86 81       	ldd	r24, Z+6	; 0x06
    1ebc:	97 81       	ldd	r25, Z+7	; 0x07
    1ebe:	a0 85       	ldd	r26, Z+8	; 0x08
    1ec0:	b1 85       	ldd	r27, Z+9	; 0x09
    1ec2:	91 70       	andi	r25, 0x01	; 1
    1ec4:	a0 70       	andi	r26, 0x00	; 0
    1ec6:	b0 70       	andi	r27, 0x00	; 0
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	a1 05       	cpc	r26, r1
    1ecc:	b1 05       	cpc	r27, r1
    1ece:	69 f0       	breq	.+26     	; 0x1eea <f_lseek+0x376>
    1ed0:	86 89       	ldd	r24, Z+22	; 0x16
    1ed2:	97 89       	ldd	r25, Z+23	; 0x17
    1ed4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ed6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ed8:	e8 16       	cp	r14, r24
    1eda:	f9 06       	cpc	r15, r25
    1edc:	0a 07       	cpc	r16, r26
    1ede:	1b 07       	cpc	r17, r27
    1ee0:	21 f0       	breq	.+8      	; 0x1eea <f_lseek+0x376>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    1ee2:	e6 8a       	std	Z+22, r14	; 0x16
    1ee4:	f7 8a       	std	Z+23, r15	; 0x17
    1ee6:	00 8f       	std	Z+24, r16	; 0x18
    1ee8:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    1eea:	ed 81       	ldd	r30, Y+5	; 0x05
    1eec:	fe 81       	ldd	r31, Y+6	; 0x06
    1eee:	26 81       	ldd	r18, Z+6	; 0x06
    1ef0:	37 81       	ldd	r19, Z+7	; 0x07
    1ef2:	40 85       	ldd	r20, Z+8	; 0x08
    1ef4:	51 85       	ldd	r21, Z+9	; 0x09
    1ef6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ef8:	93 85       	ldd	r25, Z+11	; 0x0b
    1efa:	a4 85       	ldd	r26, Z+12	; 0x0c
    1efc:	b5 85       	ldd	r27, Z+13	; 0x0d
    1efe:	82 17       	cp	r24, r18
    1f00:	93 07       	cpc	r25, r19
    1f02:	a4 07       	cpc	r26, r20
    1f04:	b5 07       	cpc	r27, r21
    1f06:	38 f4       	brcc	.+14     	; 0x1f16 <f_lseek+0x3a2>
			fp->fsize = fp->fptr;
    1f08:	22 87       	std	Z+10, r18	; 0x0a
    1f0a:	33 87       	std	Z+11, r19	; 0x0b
    1f0c:	44 87       	std	Z+12, r20	; 0x0c
    1f0e:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    1f10:	84 81       	ldd	r24, Z+4	; 0x04
    1f12:	80 62       	ori	r24, 0x20	; 32
    1f14:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	26 96       	adiw	r28, 0x06	; 6
    1f1c:	e2 e1       	ldi	r30, 0x12	; 18
    1f1e:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__epilogue_restores__>

00001f22 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e7 e9       	ldi	r30, 0x97	; 151
    1f28:	ff e0       	ldi	r31, 0x0F	; 15
    1f2a:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x10>
    1f2e:	5c 01       	movw	r10, r24
    1f30:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1f32:	dc 01       	movw	r26, r24
    1f34:	15 96       	adiw	r26, 0x05	; 5
    1f36:	7c 93       	st	X, r23
    1f38:	6e 93       	st	-X, r22
    1f3a:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    1f3c:	16 96       	adiw	r26, 0x06	; 6
    1f3e:	4d 91       	ld	r20, X+
    1f40:	5d 91       	ld	r21, X+
    1f42:	6d 91       	ld	r22, X+
    1f44:	7c 91       	ld	r23, X
    1f46:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1f48:	41 30       	cpi	r20, 0x01	; 1
    1f4a:	51 05       	cpc	r21, r1
    1f4c:	61 05       	cpc	r22, r1
    1f4e:	71 05       	cpc	r23, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <dir_sdi+0x32>
    1f52:	d5 c0       	rjmp	.+426    	; 0x20fe <dir_sdi+0x1dc>
    1f54:	ed 91       	ld	r30, X+
    1f56:	fc 91       	ld	r31, X
    1f58:	86 89       	ldd	r24, Z+22	; 0x16
    1f5a:	97 89       	ldd	r25, Z+23	; 0x17
    1f5c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f5e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f60:	48 17       	cp	r20, r24
    1f62:	59 07       	cpc	r21, r25
    1f64:	6a 07       	cpc	r22, r26
    1f66:	7b 07       	cpc	r23, r27
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <dir_sdi+0x4a>
    1f6a:	c9 c0       	rjmp	.+402    	; 0x20fe <dir_sdi+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1f6c:	41 15       	cp	r20, r1
    1f6e:	51 05       	cpc	r21, r1
    1f70:	61 05       	cpc	r22, r1
    1f72:	71 05       	cpc	r23, r1
    1f74:	81 f5       	brne	.+96     	; 0x1fd6 <dir_sdi+0xb4>
    1f76:	80 81       	ld	r24, Z
    1f78:	83 30       	cpi	r24, 0x03	; 3
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <dir_sdi+0x6c>
		clst = dj->fs->dirbase;
    1f7c:	42 a1       	ldd	r20, Z+34	; 0x22
    1f7e:	53 a1       	ldd	r21, Z+35	; 0x23
    1f80:	64 a1       	ldd	r22, Z+36	; 0x24
    1f82:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1f84:	41 15       	cp	r20, r1
    1f86:	51 05       	cpc	r21, r1
    1f88:	61 05       	cpc	r22, r1
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	21 f5       	brne	.+72     	; 0x1fd6 <dir_sdi+0xb4>
		dj->clust = clst;
    1f8e:	f5 01       	movw	r30, r10
    1f90:	12 86       	std	Z+10, r1	; 0x0a
    1f92:	13 86       	std	Z+11, r1	; 0x0b
    1f94:	14 86       	std	Z+12, r1	; 0x0c
    1f96:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1f98:	01 90       	ld	r0, Z+
    1f9a:	f0 81       	ld	r31, Z
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	80 85       	ldd	r24, Z+8	; 0x08
    1fa0:	91 85       	ldd	r25, Z+9	; 0x09
    1fa2:	c8 16       	cp	r12, r24
    1fa4:	d9 06       	cpc	r13, r25
    1fa6:	08 f0       	brcs	.+2      	; 0x1faa <dir_sdi+0x88>
    1fa8:	aa c0       	rjmp	.+340    	; 0x20fe <dir_sdi+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    1faa:	c6 01       	movw	r24, r12
    1fac:	24 e0       	ldi	r18, 0x04	; 4
    1fae:	96 95       	lsr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	2a 95       	dec	r18
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <dir_sdi+0x8c>
    1fb6:	a0 e0       	ldi	r26, 0x00	; 0
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	22 a1       	ldd	r18, Z+34	; 0x22
    1fbc:	33 a1       	ldd	r19, Z+35	; 0x23
    1fbe:	44 a1       	ldd	r20, Z+36	; 0x24
    1fc0:	55 a1       	ldd	r21, Z+37	; 0x25
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	a4 1f       	adc	r26, r20
    1fc8:	b5 1f       	adc	r27, r21
    1fca:	f5 01       	movw	r30, r10
    1fcc:	86 87       	std	Z+14, r24	; 0x0e
    1fce:	97 87       	std	Z+15, r25	; 0x0f
    1fd0:	a0 8b       	std	Z+16, r26	; 0x10
    1fd2:	b1 8b       	std	Z+17, r27	; 0x11
    1fd4:	7b c0       	rjmp	.+246    	; 0x20cc <dir_sdi+0x1aa>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	08 2f       	mov	r16, r24
    1fda:	10 e0       	ldi	r17, 0x00	; 0
    1fdc:	94 e0       	ldi	r25, 0x04	; 4
    1fde:	00 0f       	add	r16, r16
    1fe0:	11 1f       	adc	r17, r17
    1fe2:	9a 95       	dec	r25
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <dir_sdi+0xbc>
    1fe6:	25 c0       	rjmp	.+74     	; 0x2032 <dir_sdi+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1fe8:	ce 01       	movw	r24, r28
    1fea:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
    1fee:	ab 01       	movw	r20, r22
    1ff0:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1ff2:	4f 3f       	cpi	r20, 0xFF	; 255
    1ff4:	ff ef       	ldi	r31, 0xFF	; 255
    1ff6:	5f 07       	cpc	r21, r31
    1ff8:	ff ef       	ldi	r31, 0xFF	; 255
    1ffa:	6f 07       	cpc	r22, r31
    1ffc:	ff ef       	ldi	r31, 0xFF	; 255
    1ffe:	7f 07       	cpc	r23, r31
    2000:	19 f4       	brne	.+6      	; 0x2008 <dir_sdi+0xe6>
    2002:	21 e0       	ldi	r18, 0x01	; 1
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	7d c0       	rjmp	.+250    	; 0x2102 <dir_sdi+0x1e0>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    2008:	42 30       	cpi	r20, 0x02	; 2
    200a:	51 05       	cpc	r21, r1
    200c:	61 05       	cpc	r22, r1
    200e:	71 05       	cpc	r23, r1
    2010:	08 f4       	brcc	.+2      	; 0x2014 <dir_sdi+0xf2>
    2012:	75 c0       	rjmp	.+234    	; 0x20fe <dir_sdi+0x1dc>
    2014:	d5 01       	movw	r26, r10
    2016:	ed 91       	ld	r30, X+
    2018:	fc 91       	ld	r31, X
    201a:	86 89       	ldd	r24, Z+22	; 0x16
    201c:	97 89       	ldd	r25, Z+23	; 0x17
    201e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2020:	b1 8d       	ldd	r27, Z+25	; 0x19
    2022:	48 17       	cp	r20, r24
    2024:	59 07       	cpc	r21, r25
    2026:	6a 07       	cpc	r22, r26
    2028:	7b 07       	cpc	r23, r27
    202a:	08 f0       	brcs	.+2      	; 0x202e <dir_sdi+0x10c>
    202c:	68 c0       	rjmp	.+208    	; 0x20fe <dir_sdi+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    202e:	c0 1a       	sub	r12, r16
    2030:	d1 0a       	sbc	r13, r17
    2032:	f5 01       	movw	r30, r10
    2034:	c0 81       	ld	r28, Z
    2036:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2038:	c0 16       	cp	r12, r16
    203a:	d1 06       	cpc	r13, r17
    203c:	a8 f6       	brcc	.-86     	; 0x1fe8 <dir_sdi+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    203e:	d5 01       	movw	r26, r10
    2040:	1a 96       	adiw	r26, 0x0a	; 10
    2042:	4d 93       	st	X+, r20
    2044:	5d 93       	st	X+, r21
    2046:	6d 93       	st	X+, r22
    2048:	7c 93       	st	X, r23
    204a:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    204c:	8e ef       	ldi	r24, 0xFE	; 254
    204e:	e8 2e       	mov	r14, r24
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	f8 2e       	mov	r15, r24
    2054:	8f ef       	ldi	r24, 0xFF	; 255
    2056:	08 2f       	mov	r16, r24
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	18 2f       	mov	r17, r24
    205c:	e4 0e       	add	r14, r20
    205e:	f5 1e       	adc	r15, r21
    2060:	06 1f       	adc	r16, r22
    2062:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2064:	8e 89       	ldd	r24, Y+22	; 0x16
    2066:	9f 89       	ldd	r25, Y+23	; 0x17
    2068:	a8 8d       	ldd	r26, Y+24	; 0x18
    206a:	b9 8d       	ldd	r27, Y+25	; 0x19
    206c:	02 97       	sbiw	r24, 0x02	; 2
    206e:	a1 09       	sbc	r26, r1
    2070:	b1 09       	sbc	r27, r1
    2072:	e8 16       	cp	r14, r24
    2074:	f9 06       	cpc	r15, r25
    2076:	0a 07       	cpc	r16, r26
    2078:	1b 07       	cpc	r17, r27
    207a:	28 f0       	brcs	.+10     	; 0x2086 <dir_sdi+0x164>
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	12 c0       	rjmp	.+36     	; 0x20aa <dir_sdi+0x188>
	return clst * fs->csize + fs->database;
    2086:	2a 81       	ldd	r18, Y+2	; 0x02
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	c8 01       	movw	r24, r16
    2090:	b7 01       	movw	r22, r14
    2092:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    2096:	9b 01       	movw	r18, r22
    2098:	ac 01       	movw	r20, r24
    209a:	8e a1       	ldd	r24, Y+38	; 0x26
    209c:	9f a1       	ldd	r25, Y+39	; 0x27
    209e:	a8 a5       	ldd	r26, Y+40	; 0x28
    20a0:	b9 a5       	ldd	r27, Y+41	; 0x29
    20a2:	28 0f       	add	r18, r24
    20a4:	39 1f       	adc	r19, r25
    20a6:	4a 1f       	adc	r20, r26
    20a8:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    20aa:	c6 01       	movw	r24, r12
    20ac:	b4 e0       	ldi	r27, 0x04	; 4
    20ae:	96 95       	lsr	r25
    20b0:	87 95       	ror	r24
    20b2:	ba 95       	dec	r27
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <dir_sdi+0x18c>
    20b6:	a0 e0       	ldi	r26, 0x00	; 0
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	28 0f       	add	r18, r24
    20bc:	39 1f       	adc	r19, r25
    20be:	4a 1f       	adc	r20, r26
    20c0:	5b 1f       	adc	r21, r27
    20c2:	f5 01       	movw	r30, r10
    20c4:	26 87       	std	Z+14, r18	; 0x0e
    20c6:	37 87       	std	Z+15, r19	; 0x0f
    20c8:	40 8b       	std	Z+16, r20	; 0x10
    20ca:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    20cc:	ff e0       	ldi	r31, 0x0F	; 15
    20ce:	cf 22       	and	r12, r31
    20d0:	dd 24       	eor	r13, r13
    20d2:	a5 e0       	ldi	r26, 0x05	; 5
    20d4:	cc 0c       	add	r12, r12
    20d6:	dd 1c       	adc	r13, r13
    20d8:	aa 95       	dec	r26
    20da:	e1 f7       	brne	.-8      	; 0x20d4 <dir_sdi+0x1b2>
    20dc:	8e e2       	ldi	r24, 0x2E	; 46
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	c8 0e       	add	r12, r24
    20e2:	d9 1e       	adc	r13, r25
    20e4:	d5 01       	movw	r26, r10
    20e6:	8d 91       	ld	r24, X+
    20e8:	9c 91       	ld	r25, X
    20ea:	11 97       	sbiw	r26, 0x01	; 1
    20ec:	8c 0d       	add	r24, r12
    20ee:	9d 1d       	adc	r25, r13
    20f0:	53 96       	adiw	r26, 0x13	; 19
    20f2:	9c 93       	st	X, r25
    20f4:	8e 93       	st	-X, r24
    20f6:	52 97       	sbiw	r26, 0x12	; 18
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <dir_sdi+0x1e0>

	return FR_OK;	/* Seek succeeded */
    20fe:	22 e0       	ldi	r18, 0x02	; 2
    2100:	30 e0       	ldi	r19, 0x00	; 0
}
    2102:	c9 01       	movw	r24, r18
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	ea e0       	ldi	r30, 0x0A	; 10
    210a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x10>

0000210e <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    210e:	a4 e0       	ldi	r26, 0x04	; 4
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ed e8       	ldi	r30, 0x8D	; 141
    2114:	f0 e1       	ldi	r31, 0x10	; 16
    2116:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__prologue_saves__>
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
    211e:	16 2f       	mov	r17, r22
    2120:	07 2f       	mov	r16, r23
    2122:	2a 01       	movw	r4, r20
    2124:	3a 83       	std	Y+2, r19	; 0x02
    2126:	29 83       	std	Y+1, r18	; 0x01
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    2128:	d9 01       	movw	r26, r18
    212a:	1d 92       	st	X+, r1
    212c:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity */
    212e:	fc 01       	movw	r30, r24
    2130:	62 81       	ldd	r22, Z+2	; 0x02
    2132:	73 81       	ldd	r23, Z+3	; 0x03
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	0e 94 b4 0a 	call	0x1568	; 0x1568 <validate>
    213c:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	09 f0       	breq	.+2      	; 0x2144 <f_write+0x36>
    2142:	f5 c1       	rjmp	.+1002   	; 0x252e <f_write+0x420>
	if (fp->flag & FA__ERROR)						/* Aborted file? */
    2144:	ab 81       	ldd	r26, Y+3	; 0x03
    2146:	bc 81       	ldd	r27, Y+4	; 0x04
    2148:	14 96       	adiw	r26, 0x04	; 4
    214a:	8c 91       	ld	r24, X
    214c:	87 fd       	sbrc	r24, 7
    214e:	7e c0       	rjmp	.+252    	; 0x224c <f_write+0x13e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    2150:	81 fd       	sbrc	r24, 1
    2152:	04 c0       	rjmp	.+8      	; 0x215c <f_write+0x4e>
    2154:	77 e0       	ldi	r23, 0x07	; 7
    2156:	87 2e       	mov	r8, r23
    2158:	91 2c       	mov	r9, r1
    215a:	e9 c1       	rjmp	.+978    	; 0x252e <f_write+0x420>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    215c:	eb 81       	ldd	r30, Y+3	; 0x03
    215e:	fc 81       	ldd	r31, Y+4	; 0x04
    2160:	22 85       	ldd	r18, Z+10	; 0x0a
    2162:	33 85       	ldd	r19, Z+11	; 0x0b
    2164:	44 85       	ldd	r20, Z+12	; 0x0c
    2166:	55 85       	ldd	r21, Z+13	; 0x0d
    2168:	c2 01       	movw	r24, r4
    216a:	a0 e0       	ldi	r26, 0x00	; 0
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	a4 1f       	adc	r26, r20
    2174:	b5 1f       	adc	r27, r21
    2176:	82 17       	cp	r24, r18
    2178:	93 07       	cpc	r25, r19
    217a:	a4 07       	cpc	r26, r20
    217c:	b5 07       	cpc	r27, r21
    217e:	10 f4       	brcc	.+4      	; 0x2184 <f_write+0x76>
    2180:	44 24       	eor	r4, r4
    2182:	55 24       	eor	r5, r5
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    2184:	81 2f       	mov	r24, r17
    2186:	90 2f       	mov	r25, r16
    2188:	9c 01       	movw	r18, r24
    218a:	19 01       	movw	r2, r18
    218c:	ab c1       	rjmp	.+854    	; 0x24e4 <f_write+0x3d6>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    218e:	ab 81       	ldd	r26, Y+3	; 0x03
    2190:	bc 81       	ldd	r27, Y+4	; 0x04
    2192:	16 96       	adiw	r26, 0x06	; 6
    2194:	2d 91       	ld	r18, X+
    2196:	3d 91       	ld	r19, X+
    2198:	4d 91       	ld	r20, X+
    219a:	5c 91       	ld	r21, X
    219c:	19 97       	sbiw	r26, 0x09	; 9
    219e:	da 01       	movw	r26, r20
    21a0:	c9 01       	movw	r24, r18
    21a2:	91 70       	andi	r25, 0x01	; 1
    21a4:	a0 70       	andi	r26, 0x00	; 0
    21a6:	b0 70       	andi	r27, 0x00	; 0
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	a1 05       	cpc	r26, r1
    21ac:	b1 05       	cpc	r27, r1
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <f_write+0xa4>
    21b0:	3d c1       	rjmp	.+634    	; 0x242c <f_write+0x31e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    21b2:	ab 81       	ldd	r26, Y+3	; 0x03
    21b4:	bc 81       	ldd	r27, Y+4	; 0x04
    21b6:	ed 91       	ld	r30, X+
    21b8:	fc 91       	ld	r31, X
    21ba:	da 01       	movw	r26, r20
    21bc:	c9 01       	movw	r24, r18
    21be:	69 e0       	ldi	r22, 0x09	; 9
    21c0:	b6 95       	lsr	r27
    21c2:	a7 95       	ror	r26
    21c4:	97 95       	ror	r25
    21c6:	87 95       	ror	r24
    21c8:	6a 95       	dec	r22
    21ca:	d1 f7       	brne	.-12     	; 0x21c0 <f_write+0xb2>
    21cc:	72 80       	ldd	r7, Z+2	; 0x02
    21ce:	7a 94       	dec	r7
    21d0:	78 22       	and	r7, r24
			if (!csect) {							/* On the cluster boundary? */
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <f_write+0xc8>
    21d4:	4e c0       	rjmp	.+156    	; 0x2272 <f_write+0x164>
				if (fp->fptr == 0) {				/* On the top of the file? */
    21d6:	21 15       	cp	r18, r1
    21d8:	31 05       	cpc	r19, r1
    21da:	41 05       	cpc	r20, r1
    21dc:	51 05       	cpc	r21, r1
    21de:	d9 f4       	brne	.+54     	; 0x2216 <f_write+0x108>
					clst = fp->org_clust;			/* Follow from the origin */
    21e0:	ab 81       	ldd	r26, Y+3	; 0x03
    21e2:	bc 81       	ldd	r27, Y+4	; 0x04
    21e4:	1e 96       	adiw	r26, 0x0e	; 14
    21e6:	6d 91       	ld	r22, X+
    21e8:	7d 91       	ld	r23, X+
    21ea:	8d 91       	ld	r24, X+
    21ec:	9c 91       	ld	r25, X
    21ee:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)					/* When there is no cluster chain, */
    21f0:	61 15       	cp	r22, r1
    21f2:	71 05       	cpc	r23, r1
    21f4:	81 05       	cpc	r24, r1
    21f6:	91 05       	cpc	r25, r1
    21f8:	f9 f4       	brne	.+62     	; 0x2238 <f_write+0x12a>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    21fa:	cf 01       	movw	r24, r30
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <create_chain>
    2208:	eb 81       	ldd	r30, Y+3	; 0x03
    220a:	fc 81       	ldd	r31, Y+4	; 0x04
    220c:	66 87       	std	Z+14, r22	; 0x0e
    220e:	77 87       	std	Z+15, r23	; 0x0f
    2210:	80 8b       	std	Z+16, r24	; 0x10
    2212:	91 8b       	std	Z+17, r25	; 0x11
    2214:	0b c0       	rjmp	.+22     	; 0x222c <f_write+0x11e>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
    2216:	ab 81       	ldd	r26, Y+3	; 0x03
    2218:	bc 81       	ldd	r27, Y+4	; 0x04
    221a:	52 96       	adiw	r26, 0x12	; 18
    221c:	4d 91       	ld	r20, X+
    221e:	5d 91       	ld	r21, X+
    2220:	6d 91       	ld	r22, X+
    2222:	7c 91       	ld	r23, X
    2224:	55 97       	sbiw	r26, 0x15	; 21
    2226:	cf 01       	movw	r24, r30
    2228:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    222c:	61 15       	cp	r22, r1
    222e:	71 05       	cpc	r23, r1
    2230:	81 05       	cpc	r24, r1
    2232:	91 05       	cpc	r25, r1
    2234:	09 f4       	brne	.+2      	; 0x2238 <f_write+0x12a>
    2236:	5a c1       	rjmp	.+692    	; 0x24ec <f_write+0x3de>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2238:	61 30       	cpi	r22, 0x01	; 1
    223a:	71 05       	cpc	r23, r1
    223c:	81 05       	cpc	r24, r1
    223e:	91 05       	cpc	r25, r1
    2240:	49 f4       	brne	.+18     	; 0x2254 <f_write+0x146>
    2242:	eb 81       	ldd	r30, Y+3	; 0x03
    2244:	fc 81       	ldd	r31, Y+4	; 0x04
    2246:	84 81       	ldd	r24, Z+4	; 0x04
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	84 83       	std	Z+4, r24	; 0x04
    224c:	e2 e0       	ldi	r30, 0x02	; 2
    224e:	8e 2e       	mov	r8, r30
    2250:	91 2c       	mov	r9, r1
    2252:	6d c1       	rjmp	.+730    	; 0x252e <f_write+0x420>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2254:	6f 3f       	cpi	r22, 0xFF	; 255
    2256:	ff ef       	ldi	r31, 0xFF	; 255
    2258:	7f 07       	cpc	r23, r31
    225a:	ff ef       	ldi	r31, 0xFF	; 255
    225c:	8f 07       	cpc	r24, r31
    225e:	ff ef       	ldi	r31, 0xFF	; 255
    2260:	9f 07       	cpc	r25, r31
    2262:	09 f4       	brne	.+2      	; 0x2266 <f_write+0x158>
    2264:	cc c0       	rjmp	.+408    	; 0x23fe <f_write+0x2f0>
				fp->curr_clust = clst;				/* Update current cluster */
    2266:	eb 81       	ldd	r30, Y+3	; 0x03
    2268:	fc 81       	ldd	r31, Y+4	; 0x04
    226a:	62 8b       	std	Z+18, r22	; 0x12
    226c:	73 8b       	std	Z+19, r23	; 0x13
    226e:	84 8b       	std	Z+20, r24	; 0x14
    2270:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    2272:	ab 81       	ldd	r26, Y+3	; 0x03
    2274:	bc 81       	ldd	r27, Y+4	; 0x04
    2276:	ed 91       	ld	r30, X+
    2278:	fc 91       	ld	r31, X
    227a:	11 97       	sbiw	r26, 0x01	; 1
    227c:	22 a5       	ldd	r18, Z+42	; 0x2a
    227e:	33 a5       	ldd	r19, Z+43	; 0x2b
    2280:	44 a5       	ldd	r20, Z+44	; 0x2c
    2282:	55 a5       	ldd	r21, Z+45	; 0x2d
    2284:	56 96       	adiw	r26, 0x16	; 22
    2286:	ed 90       	ld	r14, X+
    2288:	fd 90       	ld	r15, X+
    228a:	0d 91       	ld	r16, X+
    228c:	1c 91       	ld	r17, X
    228e:	59 97       	sbiw	r26, 0x19	; 25
    2290:	2e 15       	cp	r18, r14
    2292:	3f 05       	cpc	r19, r15
    2294:	40 07       	cpc	r20, r16
    2296:	51 07       	cpc	r21, r17
    2298:	51 f4       	brne	.+20     	; 0x22ae <f_write+0x1a0>
    229a:	cf 01       	movw	r24, r30
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    22a8:	89 2b       	or	r24, r25
    22aa:	09 f0       	breq	.+2      	; 0x22ae <f_write+0x1a0>
    22ac:	d3 c0       	rjmp	.+422    	; 0x2454 <f_write+0x346>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    22ae:	ab 81       	ldd	r26, Y+3	; 0x03
    22b0:	bc 81       	ldd	r27, Y+4	; 0x04
    22b2:	0d 91       	ld	r16, X+
    22b4:	1c 91       	ld	r17, X
    22b6:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    22b8:	52 96       	adiw	r26, 0x12	; 18
    22ba:	2d 91       	ld	r18, X+
    22bc:	3d 91       	ld	r19, X+
    22be:	4d 91       	ld	r20, X+
    22c0:	5c 91       	ld	r21, X
    22c2:	55 97       	sbiw	r26, 0x15	; 21
    22c4:	22 50       	subi	r18, 0x02	; 2
    22c6:	30 40       	sbci	r19, 0x00	; 0
    22c8:	40 40       	sbci	r20, 0x00	; 0
    22ca:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    22cc:	f8 01       	movw	r30, r16
    22ce:	86 89       	ldd	r24, Z+22	; 0x16
    22d0:	97 89       	ldd	r25, Z+23	; 0x17
    22d2:	a0 8d       	ldd	r26, Z+24	; 0x18
    22d4:	b1 8d       	ldd	r27, Z+25	; 0x19
    22d6:	02 97       	sbiw	r24, 0x02	; 2
    22d8:	a1 09       	sbc	r26, r1
    22da:	b1 09       	sbc	r27, r1
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	4a 07       	cpc	r20, r26
    22e2:	5b 07       	cpc	r21, r27
    22e4:	b8 f4       	brcc	.+46     	; 0x2314 <f_write+0x206>
	return clst * fs->csize + fs->database;
    22e6:	62 80       	ldd	r6, Z+2	; 0x02
    22e8:	66 2d       	mov	r22, r6
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    22f4:	9b 01       	movw	r18, r22
    22f6:	ac 01       	movw	r20, r24
    22f8:	f8 01       	movw	r30, r16
    22fa:	86 a1       	ldd	r24, Z+38	; 0x26
    22fc:	97 a1       	ldd	r25, Z+39	; 0x27
    22fe:	a0 a5       	ldd	r26, Z+40	; 0x28
    2300:	b1 a5       	ldd	r27, Z+41	; 0x29
    2302:	28 0f       	add	r18, r24
    2304:	39 1f       	adc	r19, r25
    2306:	4a 1f       	adc	r20, r26
    2308:	5b 1f       	adc	r21, r27
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    230a:	21 15       	cp	r18, r1
    230c:	31 05       	cpc	r19, r1
    230e:	41 05       	cpc	r20, r1
    2310:	51 05       	cpc	r21, r1
    2312:	49 f4       	brne	.+18     	; 0x2326 <f_write+0x218>
    2314:	ab 81       	ldd	r26, Y+3	; 0x03
    2316:	bc 81       	ldd	r27, Y+4	; 0x04
    2318:	14 96       	adiw	r26, 0x04	; 4
    231a:	8c 91       	ld	r24, X
    231c:	14 97       	sbiw	r26, 0x04	; 4
    231e:	80 68       	ori	r24, 0x80	; 128
    2320:	14 96       	adiw	r26, 0x04	; 4
    2322:	8c 93       	st	X, r24
    2324:	93 cf       	rjmp	.-218    	; 0x224c <f_write+0x13e>
			sect += csect;
    2326:	69 01       	movw	r12, r18
    2328:	7a 01       	movw	r14, r20
    232a:	c7 0c       	add	r12, r7
    232c:	d1 1c       	adc	r13, r1
    232e:	e1 1c       	adc	r14, r1
    2330:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    2332:	52 01       	movw	r10, r4
    2334:	ab 2c       	mov	r10, r11
    2336:	bb 24       	eor	r11, r11
    2338:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    233a:	a1 14       	cp	r10, r1
    233c:	b1 04       	cpc	r11, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <f_write+0x234>
    2340:	46 c0       	rjmp	.+140    	; 0x23ce <f_write+0x2c0>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    2342:	27 2d       	mov	r18, r7
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	c5 01       	movw	r24, r10
    2348:	82 0f       	add	r24, r18
    234a:	93 1f       	adc	r25, r19
    234c:	66 2d       	mov	r22, r6
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	68 17       	cp	r22, r24
    2352:	79 07       	cpc	r23, r25
    2354:	18 f4       	brcc	.+6      	; 0x235c <f_write+0x24e>
					cc = fp->fs->csize - csect;
    2356:	5b 01       	movw	r10, r22
    2358:	a2 1a       	sub	r10, r18
    235a:	b3 0a       	sbc	r11, r19
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    235c:	f8 01       	movw	r30, r16
    235e:	81 81       	ldd	r24, Z+1	; 0x01
    2360:	b1 01       	movw	r22, r2
    2362:	a7 01       	movw	r20, r14
    2364:	96 01       	movw	r18, r12
    2366:	0a 2d       	mov	r16, r10
    2368:	0e 94 4f 08 	call	0x109e	; 0x109e <disk_write>
    236c:	89 2b       	or	r24, r25
    236e:	09 f0       	breq	.+2      	; 0x2372 <f_write+0x264>
    2370:	46 c0       	rjmp	.+140    	; 0x23fe <f_write+0x2f0>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    2372:	ab 81       	ldd	r26, Y+3	; 0x03
    2374:	bc 81       	ldd	r27, Y+4	; 0x04
    2376:	ed 91       	ld	r30, X+
    2378:	fc 91       	ld	r31, X
    237a:	22 a5       	ldd	r18, Z+42	; 0x2a
    237c:	33 a5       	ldd	r19, Z+43	; 0x2b
    237e:	44 a5       	ldd	r20, Z+44	; 0x2c
    2380:	55 a5       	ldd	r21, Z+45	; 0x2d
    2382:	2c 19       	sub	r18, r12
    2384:	3d 09       	sbc	r19, r13
    2386:	4e 09       	sbc	r20, r14
    2388:	5f 09       	sbc	r21, r15
    238a:	c5 01       	movw	r24, r10
    238c:	a0 e0       	ldi	r26, 0x00	; 0
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	4a 07       	cpc	r20, r26
    2396:	5b 07       	cpc	r21, r27
    2398:	a8 f4       	brcc	.+42     	; 0x23c4 <f_write+0x2b6>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    239a:	69 e0       	ldi	r22, 0x09	; 9
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	44 1f       	adc	r20, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	6a 95       	dec	r22
    23a6:	d1 f7       	brne	.-12     	; 0x239c <f_write+0x28e>
    23a8:	b1 01       	movw	r22, r2
    23aa:	62 0f       	add	r22, r18
    23ac:	73 1f       	adc	r23, r19
    23ae:	cf 01       	movw	r24, r30
    23b0:	8e 96       	adiw	r24, 0x2e	; 46
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	52 e0       	ldi	r21, 0x02	; 2
    23b6:	0e 94 35 0a 	call	0x146a	; 0x146a <mem_cpy>
					fp->fs->wflag = 0;
    23ba:	ab 81       	ldd	r26, Y+3	; 0x03
    23bc:	bc 81       	ldd	r27, Y+4	; 0x04
    23be:	ed 91       	ld	r30, X+
    23c0:	fc 91       	ld	r31, X
    23c2:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    23c4:	85 01       	movw	r16, r10
    23c6:	10 2f       	mov	r17, r16
    23c8:	00 27       	eor	r16, r16
    23ca:	11 0f       	add	r17, r17
    23cc:	6e c0       	rjmp	.+220    	; 0x24aa <f_write+0x39c>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly cache filling at growing edge */
    23ce:	eb 81       	ldd	r30, Y+3	; 0x03
    23d0:	fc 81       	ldd	r31, Y+4	; 0x04
    23d2:	26 81       	ldd	r18, Z+6	; 0x06
    23d4:	37 81       	ldd	r19, Z+7	; 0x07
    23d6:	40 85       	ldd	r20, Z+8	; 0x08
    23d8:	51 85       	ldd	r21, Z+9	; 0x09
    23da:	82 85       	ldd	r24, Z+10	; 0x0a
    23dc:	93 85       	ldd	r25, Z+11	; 0x0b
    23de:	a4 85       	ldd	r26, Z+12	; 0x0c
    23e0:	b5 85       	ldd	r27, Z+13	; 0x0d
    23e2:	28 17       	cp	r18, r24
    23e4:	39 07       	cpc	r19, r25
    23e6:	4a 07       	cpc	r20, r26
    23e8:	5b 07       	cpc	r21, r27
    23ea:	d0 f0       	brcs	.+52     	; 0x2420 <f_write+0x312>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    23ec:	c8 01       	movw	r24, r16
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    23fa:	89 2b       	or	r24, r25
    23fc:	49 f0       	breq	.+18     	; 0x2410 <f_write+0x302>
    23fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2400:	bc 81       	ldd	r27, Y+4	; 0x04
    2402:	14 96       	adiw	r26, 0x04	; 4
    2404:	8c 91       	ld	r24, X
    2406:	14 97       	sbiw	r26, 0x04	; 4
    2408:	80 68       	ori	r24, 0x80	; 128
    240a:	14 96       	adiw	r26, 0x04	; 4
    240c:	8c 93       	st	X, r24
    240e:	27 c0       	rjmp	.+78     	; 0x245e <f_write+0x350>
				fp->fs->winsect = sect;
    2410:	ab 81       	ldd	r26, Y+3	; 0x03
    2412:	bc 81       	ldd	r27, Y+4	; 0x04
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	c2 a6       	std	Z+42, r12	; 0x2a
    241a:	d3 a6       	std	Z+43, r13	; 0x2b
    241c:	e4 a6       	std	Z+44, r14	; 0x2c
    241e:	f5 a6       	std	Z+45, r15	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2420:	eb 81       	ldd	r30, Y+3	; 0x03
    2422:	fc 81       	ldd	r31, Y+4	; 0x04
    2424:	c6 8a       	std	Z+22, r12	; 0x16
    2426:	d7 8a       	std	Z+23, r13	; 0x17
    2428:	e0 8e       	std	Z+24, r14	; 0x18
    242a:	f1 8e       	std	Z+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    242c:	ab 81       	ldd	r26, Y+3	; 0x03
    242e:	bc 81       	ldd	r27, Y+4	; 0x04
    2430:	16 96       	adiw	r26, 0x06	; 6
    2432:	ed 90       	ld	r14, X+
    2434:	fd 90       	ld	r15, X+
    2436:	0d 91       	ld	r16, X+
    2438:	1c 91       	ld	r17, X
    243a:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    243c:	56 96       	adiw	r26, 0x16	; 22
    243e:	4d 91       	ld	r20, X+
    2440:	5d 91       	ld	r21, X+
    2442:	6d 91       	ld	r22, X+
    2444:	7c 91       	ld	r23, X
    2446:	59 97       	sbiw	r26, 0x19	; 25
    2448:	8d 91       	ld	r24, X+
    244a:	9c 91       	ld	r25, X
    244c:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    2450:	89 2b       	or	r24, r25
    2452:	49 f0       	breq	.+18     	; 0x2466 <f_write+0x358>
			ABORT(fp->fs, FR_DISK_ERR);
    2454:	eb 81       	ldd	r30, Y+3	; 0x03
    2456:	fc 81       	ldd	r31, Y+4	; 0x04
    2458:	84 81       	ldd	r24, Z+4	; 0x04
    245a:	80 68       	ori	r24, 0x80	; 128
    245c:	84 83       	std	Z+4, r24	; 0x04
    245e:	31 e0       	ldi	r19, 0x01	; 1
    2460:	83 2e       	mov	r8, r19
    2462:	91 2c       	mov	r9, r1
    2464:	64 c0       	rjmp	.+200    	; 0x252e <f_write+0x420>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2466:	c7 01       	movw	r24, r14
    2468:	91 70       	andi	r25, 0x01	; 1
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	32 e0       	ldi	r19, 0x02	; 2
    246e:	28 1b       	sub	r18, r24
    2470:	39 0b       	sbc	r19, r25
    2472:	82 01       	movw	r16, r4
    2474:	24 15       	cp	r18, r4
    2476:	35 05       	cpc	r19, r5
    2478:	08 f4       	brcc	.+2      	; 0x247c <f_write+0x36e>
    247a:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    247c:	ab 81       	ldd	r26, Y+3	; 0x03
    247e:	bc 81       	ldd	r27, Y+4	; 0x04
    2480:	16 96       	adiw	r26, 0x06	; 6
    2482:	2d 91       	ld	r18, X+
    2484:	3c 91       	ld	r19, X
    2486:	17 97       	sbiw	r26, 0x07	; 7
    2488:	31 70       	andi	r19, 0x01	; 1
    248a:	22 5d       	subi	r18, 0xD2	; 210
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	8d 91       	ld	r24, X+
    2490:	9c 91       	ld	r25, X
    2492:	82 0f       	add	r24, r18
    2494:	93 1f       	adc	r25, r19
    2496:	b1 01       	movw	r22, r2
    2498:	a8 01       	movw	r20, r16
    249a:	0e 94 35 0a 	call	0x146a	; 0x146a <mem_cpy>
		fp->fs->wflag = 1;
    249e:	ab 81       	ldd	r26, Y+3	; 0x03
    24a0:	bc 81       	ldd	r27, Y+4	; 0x04
    24a2:	ed 91       	ld	r30, X+
    24a4:	fc 91       	ld	r31, X
    24a6:	b1 e0       	ldi	r27, 0x01	; 1
    24a8:	b4 83       	std	Z+4, r27	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    24aa:	20 0e       	add	r2, r16
    24ac:	31 1e       	adc	r3, r17
    24ae:	c8 01       	movw	r24, r16
    24b0:	a0 e0       	ldi	r26, 0x00	; 0
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	eb 81       	ldd	r30, Y+3	; 0x03
    24b6:	fc 81       	ldd	r31, Y+4	; 0x04
    24b8:	26 81       	ldd	r18, Z+6	; 0x06
    24ba:	37 81       	ldd	r19, Z+7	; 0x07
    24bc:	40 85       	ldd	r20, Z+8	; 0x08
    24be:	51 85       	ldd	r21, Z+9	; 0x09
    24c0:	28 0f       	add	r18, r24
    24c2:	39 1f       	adc	r19, r25
    24c4:	4a 1f       	adc	r20, r26
    24c6:	5b 1f       	adc	r21, r27
    24c8:	26 83       	std	Z+6, r18	; 0x06
    24ca:	37 83       	std	Z+7, r19	; 0x07
    24cc:	40 87       	std	Z+8, r20	; 0x08
    24ce:	51 87       	std	Z+9, r21	; 0x09
    24d0:	e9 81       	ldd	r30, Y+1	; 0x01
    24d2:	fa 81       	ldd	r31, Y+2	; 0x02
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	80 0f       	add	r24, r16
    24da:	91 1f       	adc	r25, r17
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	40 1a       	sub	r4, r16
    24e2:	51 0a       	sbc	r5, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data written */
    24e4:	41 14       	cp	r4, r1
    24e6:	51 04       	cpc	r5, r1
    24e8:	09 f0       	breq	.+2      	; 0x24ec <f_write+0x3de>
    24ea:	51 ce       	rjmp	.-862    	; 0x218e <f_write+0x80>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    24ec:	ab 81       	ldd	r26, Y+3	; 0x03
    24ee:	bc 81       	ldd	r27, Y+4	; 0x04
    24f0:	16 96       	adiw	r26, 0x06	; 6
    24f2:	2d 91       	ld	r18, X+
    24f4:	3d 91       	ld	r19, X+
    24f6:	4d 91       	ld	r20, X+
    24f8:	5c 91       	ld	r21, X
    24fa:	19 97       	sbiw	r26, 0x09	; 9
    24fc:	1a 96       	adiw	r26, 0x0a	; 10
    24fe:	8d 91       	ld	r24, X+
    2500:	9d 91       	ld	r25, X+
    2502:	0d 90       	ld	r0, X+
    2504:	bc 91       	ld	r27, X
    2506:	a0 2d       	mov	r26, r0
    2508:	82 17       	cp	r24, r18
    250a:	93 07       	cpc	r25, r19
    250c:	a4 07       	cpc	r26, r20
    250e:	b5 07       	cpc	r27, r21
    2510:	30 f4       	brcc	.+12     	; 0x251e <f_write+0x410>
    2512:	eb 81       	ldd	r30, Y+3	; 0x03
    2514:	fc 81       	ldd	r31, Y+4	; 0x04
    2516:	22 87       	std	Z+10, r18	; 0x0a
    2518:	33 87       	std	Z+11, r19	; 0x0b
    251a:	44 87       	std	Z+12, r20	; 0x0c
    251c:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    251e:	ab 81       	ldd	r26, Y+3	; 0x03
    2520:	bc 81       	ldd	r27, Y+4	; 0x04
    2522:	14 96       	adiw	r26, 0x04	; 4
    2524:	8c 91       	ld	r24, X
    2526:	14 97       	sbiw	r26, 0x04	; 4
    2528:	80 62       	ori	r24, 0x20	; 32
    252a:	14 96       	adiw	r26, 0x04	; 4
    252c:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    252e:	c4 01       	movw	r24, r8
    2530:	24 96       	adiw	r28, 0x04	; 4
    2532:	e2 e1       	ldi	r30, 0x12	; 18
    2534:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__epilogue_restores__>

00002538 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2538:	a0 e0       	ldi	r26, 0x00	; 0
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e2 ea       	ldi	r30, 0xA2	; 162
    253e:	f2 e1       	ldi	r31, 0x12	; 18
    2540:	0c 94 87 1c 	jmp	0x390e	; 0x390e <__prologue_saves__+0x4>
    2544:	ec 01       	movw	r28, r24
    2546:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    2548:	6c 80       	ldd	r6, Y+4	; 0x04
    254a:	7d 80       	ldd	r7, Y+5	; 0x05
    254c:	08 94       	sec
    254e:	61 1c       	adc	r6, r1
    2550:	71 1c       	adc	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2552:	61 14       	cp	r6, r1
    2554:	71 04       	cpc	r7, r1
    2556:	09 f4       	brne	.+2      	; 0x255a <dir_next+0x22>
    2558:	4f c1       	rjmp	.+670    	; 0x27f8 <dir_next+0x2c0>
    255a:	8e 85       	ldd	r24, Y+14	; 0x0e
    255c:	9f 85       	ldd	r25, Y+15	; 0x0f
    255e:	a8 89       	ldd	r26, Y+16	; 0x10
    2560:	b9 89       	ldd	r27, Y+17	; 0x11
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	a1 05       	cpc	r26, r1
    2566:	b1 05       	cpc	r27, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <dir_next+0x34>
    256a:	46 c1       	rjmp	.+652    	; 0x27f8 <dir_next+0x2c0>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    256c:	2f e0       	ldi	r18, 0x0F	; 15
    256e:	42 2e       	mov	r4, r18
    2570:	51 2c       	mov	r5, r1
    2572:	46 20       	and	r4, r6
    2574:	57 20       	and	r5, r7
    2576:	41 14       	cp	r4, r1
    2578:	51 04       	cpc	r5, r1
    257a:	09 f0       	breq	.+2      	; 0x257e <dir_next+0x46>
    257c:	29 c1       	rjmp	.+594    	; 0x27d0 <dir_next+0x298>
		dj->sect++;					/* Next sector */
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	a1 1d       	adc	r26, r1
    2582:	b1 1d       	adc	r27, r1
    2584:	8e 87       	std	Y+14, r24	; 0x0e
    2586:	9f 87       	std	Y+15, r25	; 0x0f
    2588:	a8 8b       	std	Y+16, r26	; 0x10
    258a:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    258c:	4a 85       	ldd	r20, Y+10	; 0x0a
    258e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2590:	6c 85       	ldd	r22, Y+12	; 0x0c
    2592:	7d 85       	ldd	r23, Y+13	; 0x0d
    2594:	e8 81       	ld	r30, Y
    2596:	f9 81       	ldd	r31, Y+1	; 0x01
    2598:	41 15       	cp	r20, r1
    259a:	51 05       	cpc	r21, r1
    259c:	61 05       	cpc	r22, r1
    259e:	71 05       	cpc	r23, r1
    25a0:	39 f4       	brne	.+14     	; 0x25b0 <dir_next+0x78>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    25a2:	80 85       	ldd	r24, Z+8	; 0x08
    25a4:	91 85       	ldd	r25, Z+9	; 0x09
    25a6:	68 16       	cp	r6, r24
    25a8:	79 06       	cpc	r7, r25
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <dir_next+0x76>
    25ac:	11 c1       	rjmp	.+546    	; 0x27d0 <dir_next+0x298>
    25ae:	24 c1       	rjmp	.+584    	; 0x27f8 <dir_next+0x2c0>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	93 01       	movw	r18, r6
    25b8:	a4 e0       	ldi	r26, 0x04	; 4
    25ba:	36 95       	lsr	r19
    25bc:	27 95       	ror	r18
    25be:	aa 95       	dec	r26
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <dir_next+0x82>
    25c2:	82 23       	and	r24, r18
    25c4:	93 23       	and	r25, r19
    25c6:	89 2b       	or	r24, r25
    25c8:	09 f0       	breq	.+2      	; 0x25cc <dir_next+0x94>
    25ca:	02 c1       	rjmp	.+516    	; 0x27d0 <dir_next+0x298>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    25cc:	cf 01       	movw	r24, r30
    25ce:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
    25d2:	7b 01       	movw	r14, r22
    25d4:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    25d6:	62 30       	cpi	r22, 0x02	; 2
    25d8:	71 05       	cpc	r23, r1
    25da:	81 05       	cpc	r24, r1
    25dc:	91 05       	cpc	r25, r1
    25de:	08 f4       	brcc	.+2      	; 0x25e2 <dir_next+0xaa>
    25e0:	0e c1       	rjmp	.+540    	; 0x27fe <dir_next+0x2c6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	e8 16       	cp	r14, r24
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	f8 06       	cpc	r15, r24
    25ea:	8f ef       	ldi	r24, 0xFF	; 255
    25ec:	08 07       	cpc	r16, r24
    25ee:	8f ef       	ldi	r24, 0xFF	; 255
    25f0:	18 07       	cpc	r17, r24
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <dir_next+0xbe>
    25f4:	07 c1       	rjmp	.+526    	; 0x2804 <dir_next+0x2cc>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    25f6:	e8 81       	ld	r30, Y
    25f8:	f9 81       	ldd	r31, Y+1	; 0x01
    25fa:	86 89       	ldd	r24, Z+22	; 0x16
    25fc:	97 89       	ldd	r25, Z+23	; 0x17
    25fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    2600:	b1 8d       	ldd	r27, Z+25	; 0x19
    2602:	e8 16       	cp	r14, r24
    2604:	f9 06       	cpc	r15, r25
    2606:	0a 07       	cpc	r16, r26
    2608:	1b 07       	cpc	r17, r27
    260a:	08 f4       	brcc	.+2      	; 0x260e <dir_next+0xd6>
    260c:	a8 c0       	rjmp	.+336    	; 0x275e <dir_next+0x226>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    260e:	c1 14       	cp	r12, r1
    2610:	d1 04       	cpc	r13, r1
    2612:	09 f4       	brne	.+2      	; 0x2616 <dir_next+0xde>
    2614:	f1 c0       	rjmp	.+482    	; 0x27f8 <dir_next+0x2c0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    2616:	4a 85       	ldd	r20, Y+10	; 0x0a
    2618:	5b 85       	ldd	r21, Y+11	; 0x0b
    261a:	6c 85       	ldd	r22, Y+12	; 0x0c
    261c:	7d 85       	ldd	r23, Y+13	; 0x0d
    261e:	cf 01       	movw	r24, r30
    2620:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <create_chain>
    2624:	7b 01       	movw	r14, r22
    2626:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2628:	61 15       	cp	r22, r1
    262a:	71 05       	cpc	r23, r1
    262c:	81 05       	cpc	r24, r1
    262e:	91 05       	cpc	r25, r1
    2630:	19 f4       	brne	.+6      	; 0x2638 <dir_next+0x100>
    2632:	27 e0       	ldi	r18, 0x07	; 7
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	e8 c0       	rjmp	.+464    	; 0x2808 <dir_next+0x2d0>
					if (clst == 1) return FR_INT_ERR;
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	e9 16       	cp	r14, r25
    263c:	f1 04       	cpc	r15, r1
    263e:	01 05       	cpc	r16, r1
    2640:	11 05       	cpc	r17, r1
    2642:	09 f4       	brne	.+2      	; 0x2646 <dir_next+0x10e>
    2644:	dc c0       	rjmp	.+440    	; 0x27fe <dir_next+0x2c6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2646:	af ef       	ldi	r26, 0xFF	; 255
    2648:	ea 16       	cp	r14, r26
    264a:	af ef       	ldi	r26, 0xFF	; 255
    264c:	fa 06       	cpc	r15, r26
    264e:	af ef       	ldi	r26, 0xFF	; 255
    2650:	0a 07       	cpc	r16, r26
    2652:	af ef       	ldi	r26, 0xFF	; 255
    2654:	1a 07       	cpc	r17, r26
    2656:	09 f4       	brne	.+2      	; 0x265a <dir_next+0x122>
    2658:	d5 c0       	rjmp	.+426    	; 0x2804 <dir_next+0x2cc>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    265a:	88 81       	ld	r24, Y
    265c:	99 81       	ldd	r25, Y+1	; 0x01
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    266a:	89 2b       	or	r24, r25
    266c:	09 f0       	breq	.+2      	; 0x2670 <dir_next+0x138>
    266e:	ca c0       	rjmp	.+404    	; 0x2804 <dir_next+0x2cc>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    2670:	e8 81       	ld	r30, Y
    2672:	f9 81       	ldd	r31, Y+1	; 0x01
    2674:	be 96       	adiw	r30, 0x2e	; 46
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	01 c0       	rjmp	.+2      	; 0x267e <dir_next+0x146>

	while (cnt--)
		*d++ = (BYTE)val;
    267c:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	bf ef       	ldi	r27, 0xFF	; 255
    2682:	8f 3f       	cpi	r24, 0xFF	; 255
    2684:	9b 07       	cpc	r25, r27
    2686:	d1 f7       	brne	.-12     	; 0x267c <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2688:	88 80       	ld	r8, Y
    268a:	99 80       	ldd	r9, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    268c:	fe ef       	ldi	r31, 0xFE	; 254
    268e:	af 2e       	mov	r10, r31
    2690:	ff ef       	ldi	r31, 0xFF	; 255
    2692:	bf 2e       	mov	r11, r31
    2694:	ff ef       	ldi	r31, 0xFF	; 255
    2696:	cf 2e       	mov	r12, r31
    2698:	ff ef       	ldi	r31, 0xFF	; 255
    269a:	df 2e       	mov	r13, r31
    269c:	ae 0c       	add	r10, r14
    269e:	bf 1c       	adc	r11, r15
    26a0:	c0 1e       	adc	r12, r16
    26a2:	d1 1e       	adc	r13, r17
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    26a4:	f4 01       	movw	r30, r8
    26a6:	86 89       	ldd	r24, Z+22	; 0x16
    26a8:	97 89       	ldd	r25, Z+23	; 0x17
    26aa:	a0 8d       	ldd	r26, Z+24	; 0x18
    26ac:	b1 8d       	ldd	r27, Z+25	; 0x19
    26ae:	02 97       	sbiw	r24, 0x02	; 2
    26b0:	a1 09       	sbc	r26, r1
    26b2:	b1 09       	sbc	r27, r1
    26b4:	a8 16       	cp	r10, r24
    26b6:	b9 06       	cpc	r11, r25
    26b8:	ca 06       	cpc	r12, r26
    26ba:	db 06       	cpc	r13, r27
    26bc:	28 f0       	brcs	.+10     	; 0x26c8 <dir_next+0x190>
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	15 c0       	rjmp	.+42     	; 0x26f2 <dir_next+0x1ba>
	return clst * fs->csize + fs->database;
    26c8:	d4 01       	movw	r26, r8
    26ca:	12 96       	adiw	r26, 0x02	; 2
    26cc:	2c 91       	ld	r18, X
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	c6 01       	movw	r24, r12
    26d6:	b5 01       	movw	r22, r10
    26d8:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	f4 01       	movw	r30, r8
    26e2:	86 a1       	ldd	r24, Z+38	; 0x26
    26e4:	97 a1       	ldd	r25, Z+39	; 0x27
    26e6:	a0 a5       	ldd	r26, Z+40	; 0x28
    26e8:	b1 a5       	ldd	r27, Z+41	; 0x29
    26ea:	28 0f       	add	r18, r24
    26ec:	39 1f       	adc	r19, r25
    26ee:	4a 1f       	adc	r20, r26
    26f0:	5b 1f       	adc	r21, r27
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    26f2:	d4 01       	movw	r26, r8
    26f4:	9a 96       	adiw	r26, 0x2a	; 42
    26f6:	2d 93       	st	X+, r18
    26f8:	3d 93       	st	X+, r19
    26fa:	4d 93       	st	X+, r20
    26fc:	5c 93       	st	X, r21
    26fe:	9d 97       	sbiw	r26, 0x2d	; 45
    2700:	dd 24       	eor	r13, r13
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    2702:	cc 24       	eor	r12, r12
    2704:	c3 94       	inc	r12
    2706:	1a c0       	rjmp	.+52     	; 0x273c <dir_next+0x204>
    2708:	c4 82       	std	Z+4, r12	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    270a:	88 81       	ld	r24, Y
    270c:	99 81       	ldd	r25, Y+1	; 0x01
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    271a:	89 2b       	or	r24, r25
    271c:	09 f0       	breq	.+2      	; 0x2720 <dir_next+0x1e8>
    271e:	72 c0       	rjmp	.+228    	; 0x2804 <dir_next+0x2cc>
						dj->fs->winsect++;
    2720:	e8 81       	ld	r30, Y
    2722:	f9 81       	ldd	r31, Y+1	; 0x01
    2724:	82 a5       	ldd	r24, Z+42	; 0x2a
    2726:	93 a5       	ldd	r25, Z+43	; 0x2b
    2728:	a4 a5       	ldd	r26, Z+44	; 0x2c
    272a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	a1 1d       	adc	r26, r1
    2730:	b1 1d       	adc	r27, r1
    2732:	82 a7       	std	Z+42, r24	; 0x2a
    2734:	93 a7       	std	Z+43, r25	; 0x2b
    2736:	a4 a7       	std	Z+44, r26	; 0x2c
    2738:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    273a:	d3 94       	inc	r13
    273c:	e8 81       	ld	r30, Y
    273e:	f9 81       	ldd	r31, Y+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	d8 16       	cp	r13, r24
    2744:	08 f3       	brcs	.-62     	; 0x2708 <dir_next+0x1d0>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    2746:	82 a5       	ldd	r24, Z+42	; 0x2a
    2748:	93 a5       	ldd	r25, Z+43	; 0x2b
    274a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    274c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    274e:	8d 19       	sub	r24, r13
    2750:	91 09       	sbc	r25, r1
    2752:	a1 09       	sbc	r26, r1
    2754:	b1 09       	sbc	r27, r1
    2756:	82 a7       	std	Z+42, r24	; 0x2a
    2758:	93 a7       	std	Z+43, r25	; 0x2b
    275a:	a4 a7       	std	Z+44, r26	; 0x2c
    275c:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    275e:	ea 86       	std	Y+10, r14	; 0x0a
    2760:	fb 86       	std	Y+11, r15	; 0x0b
    2762:	0c 87       	std	Y+12, r16	; 0x0c
    2764:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    2766:	c8 80       	ld	r12, Y
    2768:	d9 80       	ldd	r13, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    276a:	8e ef       	ldi	r24, 0xFE	; 254
    276c:	9f ef       	ldi	r25, 0xFF	; 255
    276e:	af ef       	ldi	r26, 0xFF	; 255
    2770:	bf ef       	ldi	r27, 0xFF	; 255
    2772:	e8 0e       	add	r14, r24
    2774:	f9 1e       	adc	r15, r25
    2776:	0a 1f       	adc	r16, r26
    2778:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    277a:	f6 01       	movw	r30, r12
    277c:	86 89       	ldd	r24, Z+22	; 0x16
    277e:	97 89       	ldd	r25, Z+23	; 0x17
    2780:	a0 8d       	ldd	r26, Z+24	; 0x18
    2782:	b1 8d       	ldd	r27, Z+25	; 0x19
    2784:	02 97       	sbiw	r24, 0x02	; 2
    2786:	a1 09       	sbc	r26, r1
    2788:	b1 09       	sbc	r27, r1
    278a:	e8 16       	cp	r14, r24
    278c:	f9 06       	cpc	r15, r25
    278e:	0a 07       	cpc	r16, r26
    2790:	1b 07       	cpc	r17, r27
    2792:	28 f0       	brcs	.+10     	; 0x279e <dir_next+0x266>
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	15 c0       	rjmp	.+42     	; 0x27c8 <dir_next+0x290>
	return clst * fs->csize + fs->database;
    279e:	d6 01       	movw	r26, r12
    27a0:	12 96       	adiw	r26, 0x02	; 2
    27a2:	2c 91       	ld	r18, X
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	c8 01       	movw	r24, r16
    27ac:	b7 01       	movw	r22, r14
    27ae:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    27b2:	9b 01       	movw	r18, r22
    27b4:	ac 01       	movw	r20, r24
    27b6:	f6 01       	movw	r30, r12
    27b8:	86 a1       	ldd	r24, Z+38	; 0x26
    27ba:	97 a1       	ldd	r25, Z+39	; 0x27
    27bc:	a0 a5       	ldd	r26, Z+40	; 0x28
    27be:	b1 a5       	ldd	r27, Z+41	; 0x29
    27c0:	28 0f       	add	r18, r24
    27c2:	39 1f       	adc	r19, r25
    27c4:	4a 1f       	adc	r20, r26
    27c6:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    27c8:	2e 87       	std	Y+14, r18	; 0x0e
    27ca:	3f 87       	std	Y+15, r19	; 0x0f
    27cc:	48 8b       	std	Y+16, r20	; 0x10
    27ce:	59 8b       	std	Y+17, r21	; 0x11
			}
		}
	}

	dj->index = i;
    27d0:	7d 82       	std	Y+5, r7	; 0x05
    27d2:	6c 82       	std	Y+4, r6	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    27d4:	e5 e0       	ldi	r30, 0x05	; 5
    27d6:	44 0c       	add	r4, r4
    27d8:	55 1c       	adc	r5, r5
    27da:	ea 95       	dec	r30
    27dc:	e1 f7       	brne	.-8      	; 0x27d6 <dir_next+0x29e>
    27de:	8e e2       	ldi	r24, 0x2E	; 46
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	48 0e       	add	r4, r24
    27e4:	59 1e       	adc	r5, r25
    27e6:	88 81       	ld	r24, Y
    27e8:	99 81       	ldd	r25, Y+1	; 0x01
    27ea:	84 0d       	add	r24, r4
    27ec:	95 1d       	adc	r25, r5
    27ee:	9b 8b       	std	Y+19, r25	; 0x13
    27f0:	8a 8b       	std	Y+18, r24	; 0x12
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	08 c0       	rjmp	.+16     	; 0x2808 <dir_next+0x2d0>

	return FR_OK;
    27f8:	24 e0       	ldi	r18, 0x04	; 4
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	05 c0       	rjmp	.+10     	; 0x2808 <dir_next+0x2d0>
    27fe:	22 e0       	ldi	r18, 0x02	; 2
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <dir_next+0x2d0>
    2804:	21 e0       	ldi	r18, 0x01	; 1
    2806:	30 e0       	ldi	r19, 0x00	; 0
}
    2808:	c9 01       	movw	r24, r18
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	e0 e1       	ldi	r30, 0x10	; 16
    2810:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__epilogue_restores__+0x4>

00002814 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2814:	a4 e0       	ldi	r26, 0x04	; 4
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e0 e1       	ldi	r30, 0x10	; 16
    281a:	f4 e1       	ldi	r31, 0x14	; 20
    281c:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__prologue_saves__>
    2820:	9c 83       	std	Y+4, r25	; 0x04
    2822:	8b 83       	std	Y+3, r24	; 0x03
    2824:	16 2f       	mov	r17, r22
    2826:	07 2f       	mov	r16, r23
    2828:	2a 01       	movw	r4, r20
    282a:	3a 83       	std	Y+2, r19	; 0x02
    282c:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    282e:	d9 01       	movw	r26, r18
    2830:	1d 92       	st	X+, r1
    2832:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity */
    2834:	fc 01       	movw	r30, r24
    2836:	62 81       	ldd	r22, Z+2	; 0x02
    2838:	73 81       	ldd	r23, Z+3	; 0x03
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <validate>
    2842:	3c 01       	movw	r6, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	09 f0       	breq	.+2      	; 0x284a <f_read+0x36>
    2848:	74 c1       	rjmp	.+744    	; 0x2b32 <f_read+0x31e>
	if (fp->flag & FA__ERROR)						/* Aborted file? */
    284a:	ab 81       	ldd	r26, Y+3	; 0x03
    284c:	bc 81       	ldd	r27, Y+4	; 0x04
    284e:	14 96       	adiw	r26, 0x04	; 4
    2850:	8c 91       	ld	r24, X
    2852:	87 fd       	sbrc	r24, 7
    2854:	66 c0       	rjmp	.+204    	; 0x2922 <f_read+0x10e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
    2856:	80 fd       	sbrc	r24, 0
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <f_read+0x4e>
    285a:	77 e0       	ldi	r23, 0x07	; 7
    285c:	67 2e       	mov	r6, r23
    285e:	71 2c       	mov	r7, r1
    2860:	68 c1       	rjmp	.+720    	; 0x2b32 <f_read+0x31e>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2862:	eb 81       	ldd	r30, Y+3	; 0x03
    2864:	fc 81       	ldd	r31, Y+4	; 0x04
    2866:	22 85       	ldd	r18, Z+10	; 0x0a
    2868:	33 85       	ldd	r19, Z+11	; 0x0b
    286a:	44 85       	ldd	r20, Z+12	; 0x0c
    286c:	55 85       	ldd	r21, Z+13	; 0x0d
    286e:	86 81       	ldd	r24, Z+6	; 0x06
    2870:	97 81       	ldd	r25, Z+7	; 0x07
    2872:	a0 85       	ldd	r26, Z+8	; 0x08
    2874:	b1 85       	ldd	r27, Z+9	; 0x09
    2876:	28 1b       	sub	r18, r24
    2878:	39 0b       	sbc	r19, r25
    287a:	4a 0b       	sbc	r20, r26
    287c:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    287e:	c2 01       	movw	r24, r4
    2880:	a0 e0       	ldi	r26, 0x00	; 0
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	28 17       	cp	r18, r24
    2886:	39 07       	cpc	r19, r25
    2888:	4a 07       	cpc	r20, r26
    288a:	5b 07       	cpc	r21, r27
    288c:	08 f4       	brcc	.+2      	; 0x2890 <f_read+0x7c>
    288e:	29 01       	movw	r4, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    2890:	81 2f       	mov	r24, r17
    2892:	90 2f       	mov	r25, r16
    2894:	9c 01       	movw	r18, r24
    2896:	19 01       	movw	r2, r18
    2898:	48 c1       	rjmp	.+656    	; 0x2b2a <f_read+0x316>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    289a:	ab 81       	ldd	r26, Y+3	; 0x03
    289c:	bc 81       	ldd	r27, Y+4	; 0x04
    289e:	16 96       	adiw	r26, 0x06	; 6
    28a0:	2d 91       	ld	r18, X+
    28a2:	3d 91       	ld	r19, X+
    28a4:	4d 91       	ld	r20, X+
    28a6:	5c 91       	ld	r21, X
    28a8:	19 97       	sbiw	r26, 0x09	; 9
    28aa:	da 01       	movw	r26, r20
    28ac:	c9 01       	movw	r24, r18
    28ae:	91 70       	andi	r25, 0x01	; 1
    28b0:	a0 70       	andi	r26, 0x00	; 0
    28b2:	b0 70       	andi	r27, 0x00	; 0
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	a1 05       	cpc	r26, r1
    28b8:	b1 05       	cpc	r27, r1
    28ba:	09 f0       	breq	.+2      	; 0x28be <f_read+0xaa>
    28bc:	e1 c0       	rjmp	.+450    	; 0x2a80 <f_read+0x26c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    28be:	ab 81       	ldd	r26, Y+3	; 0x03
    28c0:	bc 81       	ldd	r27, Y+4	; 0x04
    28c2:	ed 91       	ld	r30, X+
    28c4:	fc 91       	ld	r31, X
    28c6:	da 01       	movw	r26, r20
    28c8:	c9 01       	movw	r24, r18
    28ca:	69 e0       	ldi	r22, 0x09	; 9
    28cc:	b6 95       	lsr	r27
    28ce:	a7 95       	ror	r26
    28d0:	97 95       	ror	r25
    28d2:	87 95       	ror	r24
    28d4:	6a 95       	dec	r22
    28d6:	d1 f7       	brne	.-12     	; 0x28cc <f_read+0xb8>
    28d8:	92 80       	ldd	r9, Z+2	; 0x02
    28da:	9a 94       	dec	r9
    28dc:	98 22       	and	r9, r24
			if (!csect) {							/* On the cluster boundary? */
    28de:	a1 f5       	brne	.+104    	; 0x2948 <f_read+0x134>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
    28e0:	21 15       	cp	r18, r1
    28e2:	31 05       	cpc	r19, r1
    28e4:	41 05       	cpc	r20, r1
    28e6:	51 05       	cpc	r21, r1
    28e8:	39 f4       	brne	.+14     	; 0x28f8 <f_read+0xe4>
    28ea:	eb 81       	ldd	r30, Y+3	; 0x03
    28ec:	fc 81       	ldd	r31, Y+4	; 0x04
    28ee:	66 85       	ldd	r22, Z+14	; 0x0e
    28f0:	77 85       	ldd	r23, Z+15	; 0x0f
    28f2:	80 89       	ldd	r24, Z+16	; 0x10
    28f4:	91 89       	ldd	r25, Z+17	; 0x11
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <f_read+0xfa>
    28f8:	ab 81       	ldd	r26, Y+3	; 0x03
    28fa:	bc 81       	ldd	r27, Y+4	; 0x04
    28fc:	52 96       	adiw	r26, 0x12	; 18
    28fe:	4d 91       	ld	r20, X+
    2900:	5d 91       	ld	r21, X+
    2902:	6d 91       	ld	r22, X+
    2904:	7c 91       	ld	r23, X
    2906:	55 97       	sbiw	r26, 0x15	; 21
    2908:	cf 01       	movw	r24, r30
    290a:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
    290e:	62 30       	cpi	r22, 0x02	; 2
    2910:	71 05       	cpc	r23, r1
    2912:	81 05       	cpc	r24, r1
    2914:	91 05       	cpc	r25, r1
    2916:	48 f4       	brcc	.+18     	; 0x292a <f_read+0x116>
    2918:	eb 81       	ldd	r30, Y+3	; 0x03
    291a:	fc 81       	ldd	r31, Y+4	; 0x04
    291c:	84 81       	ldd	r24, Z+4	; 0x04
    291e:	80 68       	ori	r24, 0x80	; 128
    2920:	84 83       	std	Z+4, r24	; 0x04
    2922:	e2 e0       	ldi	r30, 0x02	; 2
    2924:	6e 2e       	mov	r6, r30
    2926:	71 2c       	mov	r7, r1
    2928:	04 c1       	rjmp	.+520    	; 0x2b32 <f_read+0x31e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    292a:	6f 3f       	cpi	r22, 0xFF	; 255
    292c:	ff ef       	ldi	r31, 0xFF	; 255
    292e:	7f 07       	cpc	r23, r31
    2930:	ff ef       	ldi	r31, 0xFF	; 255
    2932:	8f 07       	cpc	r24, r31
    2934:	ff ef       	ldi	r31, 0xFF	; 255
    2936:	9f 07       	cpc	r25, r31
    2938:	09 f4       	brne	.+2      	; 0x293c <f_read+0x128>
    293a:	67 c0       	rjmp	.+206    	; 0x2a0a <f_read+0x1f6>
				fp->curr_clust = clst;				/* Update current cluster */
    293c:	eb 81       	ldd	r30, Y+3	; 0x03
    293e:	fc 81       	ldd	r31, Y+4	; 0x04
    2940:	62 8b       	std	Z+18, r22	; 0x12
    2942:	73 8b       	std	Z+19, r23	; 0x13
    2944:	84 8b       	std	Z+20, r24	; 0x14
    2946:	95 8b       	std	Z+21, r25	; 0x15
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    2948:	ab 81       	ldd	r26, Y+3	; 0x03
    294a:	bc 81       	ldd	r27, Y+4	; 0x04
    294c:	0d 91       	ld	r16, X+
    294e:	1c 91       	ld	r17, X
    2950:	11 97       	sbiw	r26, 0x01	; 1
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2952:	52 96       	adiw	r26, 0x12	; 18
    2954:	2d 91       	ld	r18, X+
    2956:	3d 91       	ld	r19, X+
    2958:	4d 91       	ld	r20, X+
    295a:	5c 91       	ld	r21, X
    295c:	55 97       	sbiw	r26, 0x15	; 21
    295e:	22 50       	subi	r18, 0x02	; 2
    2960:	30 40       	sbci	r19, 0x00	; 0
    2962:	40 40       	sbci	r20, 0x00	; 0
    2964:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2966:	f8 01       	movw	r30, r16
    2968:	86 89       	ldd	r24, Z+22	; 0x16
    296a:	97 89       	ldd	r25, Z+23	; 0x17
    296c:	a0 8d       	ldd	r26, Z+24	; 0x18
    296e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2970:	02 97       	sbiw	r24, 0x02	; 2
    2972:	a1 09       	sbc	r26, r1
    2974:	b1 09       	sbc	r27, r1
    2976:	28 17       	cp	r18, r24
    2978:	39 07       	cpc	r19, r25
    297a:	4a 07       	cpc	r20, r26
    297c:	5b 07       	cpc	r21, r27
    297e:	b8 f4       	brcc	.+46     	; 0x29ae <f_read+0x19a>
	return clst * fs->csize + fs->database;
    2980:	82 80       	ldd	r8, Z+2	; 0x02
    2982:	68 2d       	mov	r22, r8
    2984:	70 e0       	ldi	r23, 0x00	; 0
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    298e:	9b 01       	movw	r18, r22
    2990:	ac 01       	movw	r20, r24
    2992:	f8 01       	movw	r30, r16
    2994:	86 a1       	ldd	r24, Z+38	; 0x26
    2996:	97 a1       	ldd	r25, Z+39	; 0x27
    2998:	a0 a5       	ldd	r26, Z+40	; 0x28
    299a:	b1 a5       	ldd	r27, Z+41	; 0x29
    299c:	28 0f       	add	r18, r24
    299e:	39 1f       	adc	r19, r25
    29a0:	4a 1f       	adc	r20, r26
    29a2:	5b 1f       	adc	r21, r27
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    29a4:	21 15       	cp	r18, r1
    29a6:	31 05       	cpc	r19, r1
    29a8:	41 05       	cpc	r20, r1
    29aa:	51 05       	cpc	r21, r1
    29ac:	49 f4       	brne	.+18     	; 0x29c0 <f_read+0x1ac>
    29ae:	ab 81       	ldd	r26, Y+3	; 0x03
    29b0:	bc 81       	ldd	r27, Y+4	; 0x04
    29b2:	14 96       	adiw	r26, 0x04	; 4
    29b4:	8c 91       	ld	r24, X
    29b6:	14 97       	sbiw	r26, 0x04	; 4
    29b8:	80 68       	ori	r24, 0x80	; 128
    29ba:	14 96       	adiw	r26, 0x04	; 4
    29bc:	8c 93       	st	X, r24
    29be:	b1 cf       	rjmp	.-158    	; 0x2922 <f_read+0x10e>
			sect += csect;
    29c0:	69 01       	movw	r12, r18
    29c2:	7a 01       	movw	r14, r20
    29c4:	c9 0c       	add	r12, r9
    29c6:	d1 1c       	adc	r13, r1
    29c8:	e1 1c       	adc	r14, r1
    29ca:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
    29cc:	52 01       	movw	r10, r4
    29ce:	ab 2c       	mov	r10, r11
    29d0:	bb 24       	eor	r11, r11
    29d2:	a6 94       	lsr	r10
			if (cc) {								/* Read maximum contiguous sectors directly */
    29d4:	a1 14       	cp	r10, r1
    29d6:	b1 04       	cpc	r11, r1
    29d8:	09 f4       	brne	.+2      	; 0x29dc <f_read+0x1c8>
    29da:	4c c0       	rjmp	.+152    	; 0x2a74 <f_read+0x260>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    29dc:	29 2d       	mov	r18, r9
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	c5 01       	movw	r24, r10
    29e2:	82 0f       	add	r24, r18
    29e4:	93 1f       	adc	r25, r19
    29e6:	68 2d       	mov	r22, r8
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	68 17       	cp	r22, r24
    29ec:	79 07       	cpc	r23, r25
    29ee:	18 f4       	brcc	.+6      	; 0x29f6 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
    29f0:	5b 01       	movw	r10, r22
    29f2:	a2 1a       	sub	r10, r18
    29f4:	b3 0a       	sbc	r11, r19
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    29f6:	f8 01       	movw	r30, r16
    29f8:	81 81       	ldd	r24, Z+1	; 0x01
    29fa:	b1 01       	movw	r22, r2
    29fc:	a7 01       	movw	r20, r14
    29fe:	96 01       	movw	r18, r12
    2a00:	0a 2d       	mov	r16, r10
    2a02:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <disk_read>
    2a06:	89 2b       	or	r24, r25
    2a08:	49 f0       	breq	.+18     	; 0x2a1c <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
    2a0a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a0c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a0e:	14 96       	adiw	r26, 0x04	; 4
    2a10:	8c 91       	ld	r24, X
    2a12:	14 97       	sbiw	r26, 0x04	; 4
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	14 96       	adiw	r26, 0x04	; 4
    2a18:	8c 93       	st	X, r24
    2a1a:	4b c0       	rjmp	.+150    	; 0x2ab2 <f_read+0x29e>
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    2a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a20:	ed 91       	ld	r30, X+
    2a22:	fc 91       	ld	r31, X
    2a24:	84 81       	ldd	r24, Z+4	; 0x04
    2a26:	88 23       	and	r24, r24
    2a28:	01 f1       	breq	.+64     	; 0x2a6a <f_read+0x256>
    2a2a:	22 a5       	ldd	r18, Z+42	; 0x2a
    2a2c:	33 a5       	ldd	r19, Z+43	; 0x2b
    2a2e:	44 a5       	ldd	r20, Z+44	; 0x2c
    2a30:	55 a5       	ldd	r21, Z+45	; 0x2d
    2a32:	2c 19       	sub	r18, r12
    2a34:	3d 09       	sbc	r19, r13
    2a36:	4e 09       	sbc	r20, r14
    2a38:	5f 09       	sbc	r21, r15
    2a3a:	c5 01       	movw	r24, r10
    2a3c:	a0 e0       	ldi	r26, 0x00	; 0
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	28 17       	cp	r18, r24
    2a42:	39 07       	cpc	r19, r25
    2a44:	4a 07       	cpc	r20, r26
    2a46:	5b 07       	cpc	r21, r27
    2a48:	80 f4       	brcc	.+32     	; 0x2a6a <f_read+0x256>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    2a4a:	69 e0       	ldi	r22, 0x09	; 9
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	44 1f       	adc	r20, r20
    2a52:	55 1f       	adc	r21, r21
    2a54:	6a 95       	dec	r22
    2a56:	d1 f7       	brne	.-12     	; 0x2a4c <f_read+0x238>
    2a58:	c1 01       	movw	r24, r2
    2a5a:	82 0f       	add	r24, r18
    2a5c:	93 1f       	adc	r25, r19
    2a5e:	be 96       	adiw	r30, 0x2e	; 46
    2a60:	bf 01       	movw	r22, r30
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	52 e0       	ldi	r21, 0x02	; 2
    2a66:	0e 94 35 0a 	call	0x146a	; 0x146a <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    2a6a:	85 01       	movw	r16, r10
    2a6c:	10 2f       	mov	r17, r16
    2a6e:	00 27       	eor	r16, r16
    2a70:	11 0f       	add	r17, r17
    2a72:	3e c0       	rjmp	.+124    	; 0x2af0 <f_read+0x2dc>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2a74:	eb 81       	ldd	r30, Y+3	; 0x03
    2a76:	fc 81       	ldd	r31, Y+4	; 0x04
    2a78:	c6 8a       	std	Z+22, r12	; 0x16
    2a7a:	d7 8a       	std	Z+23, r13	; 0x17
    2a7c:	e0 8e       	std	Z+24, r14	; 0x18
    2a7e:	f1 8e       	std	Z+25, r15	; 0x19
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2a80:	ab 81       	ldd	r26, Y+3	; 0x03
    2a82:	bc 81       	ldd	r27, Y+4	; 0x04
    2a84:	16 96       	adiw	r26, 0x06	; 6
    2a86:	ed 90       	ld	r14, X+
    2a88:	fd 90       	ld	r15, X+
    2a8a:	0d 91       	ld	r16, X+
    2a8c:	1c 91       	ld	r17, X
    2a8e:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    2a90:	56 96       	adiw	r26, 0x16	; 22
    2a92:	4d 91       	ld	r20, X+
    2a94:	5d 91       	ld	r21, X+
    2a96:	6d 91       	ld	r22, X+
    2a98:	7c 91       	ld	r23, X
    2a9a:	59 97       	sbiw	r26, 0x19	; 25
    2a9c:	8d 91       	ld	r24, X+
    2a9e:	9c 91       	ld	r25, X
    2aa0:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    2aa4:	89 2b       	or	r24, r25
    2aa6:	49 f0       	breq	.+18     	; 0x2aba <f_read+0x2a6>
			ABORT(fp->fs, FR_DISK_ERR);
    2aa8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aaa:	fc 81       	ldd	r31, Y+4	; 0x04
    2aac:	84 81       	ldd	r24, Z+4	; 0x04
    2aae:	80 68       	ori	r24, 0x80	; 128
    2ab0:	84 83       	std	Z+4, r24	; 0x04
    2ab2:	31 e0       	ldi	r19, 0x01	; 1
    2ab4:	63 2e       	mov	r6, r19
    2ab6:	71 2c       	mov	r7, r1
    2ab8:	3c c0       	rjmp	.+120    	; 0x2b32 <f_read+0x31e>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2aba:	c7 01       	movw	r24, r14
    2abc:	91 70       	andi	r25, 0x01	; 1
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	32 e0       	ldi	r19, 0x02	; 2
    2ac2:	28 1b       	sub	r18, r24
    2ac4:	39 0b       	sbc	r19, r25
    2ac6:	82 01       	movw	r16, r4
    2ac8:	24 15       	cp	r18, r4
    2aca:	35 05       	cpc	r19, r5
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <f_read+0x2bc>
    2ace:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2ad0:	ab 81       	ldd	r26, Y+3	; 0x03
    2ad2:	bc 81       	ldd	r27, Y+4	; 0x04
    2ad4:	16 96       	adiw	r26, 0x06	; 6
    2ad6:	8d 91       	ld	r24, X+
    2ad8:	9c 91       	ld	r25, X
    2ada:	17 97       	sbiw	r26, 0x07	; 7
    2adc:	91 70       	andi	r25, 0x01	; 1
    2ade:	8e 96       	adiw	r24, 0x2e	; 46
    2ae0:	6d 91       	ld	r22, X+
    2ae2:	7c 91       	ld	r23, X
    2ae4:	68 0f       	add	r22, r24
    2ae6:	79 1f       	adc	r23, r25
    2ae8:	c1 01       	movw	r24, r2
    2aea:	a8 01       	movw	r20, r16
    2aec:	0e 94 35 0a 	call	0x146a	; 0x146a <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2af0:	20 0e       	add	r2, r16
    2af2:	31 1e       	adc	r3, r17
    2af4:	c8 01       	movw	r24, r16
    2af6:	a0 e0       	ldi	r26, 0x00	; 0
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	eb 81       	ldd	r30, Y+3	; 0x03
    2afc:	fc 81       	ldd	r31, Y+4	; 0x04
    2afe:	26 81       	ldd	r18, Z+6	; 0x06
    2b00:	37 81       	ldd	r19, Z+7	; 0x07
    2b02:	40 85       	ldd	r20, Z+8	; 0x08
    2b04:	51 85       	ldd	r21, Z+9	; 0x09
    2b06:	28 0f       	add	r18, r24
    2b08:	39 1f       	adc	r19, r25
    2b0a:	4a 1f       	adc	r20, r26
    2b0c:	5b 1f       	adc	r21, r27
    2b0e:	26 83       	std	Z+6, r18	; 0x06
    2b10:	37 83       	std	Z+7, r19	; 0x07
    2b12:	40 87       	std	Z+8, r20	; 0x08
    2b14:	51 87       	std	Z+9, r21	; 0x09
    2b16:	e9 81       	ldd	r30, Y+1	; 0x01
    2b18:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	80 0f       	add	r24, r16
    2b20:	91 1f       	adc	r25, r17
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
    2b26:	40 1a       	sub	r4, r16
    2b28:	51 0a       	sbc	r5, r17
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data read */
    2b2a:	41 14       	cp	r4, r1
    2b2c:	51 04       	cpc	r5, r1
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <f_read+0x31e>
    2b30:	b4 ce       	rjmp	.-664    	; 0x289a <f_read+0x86>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2b32:	c3 01       	movw	r24, r6
    2b34:	24 96       	adiw	r28, 0x04	; 4
    2b36:	e2 e1       	ldi	r30, 0x12	; 18
    2b38:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__epilogue_restores__>

00002b3c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2b3c:	0f 93       	push	r16
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	ec 01       	movw	r28, r24
    2b44:	9a 01       	movw	r18, r20
    2b46:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2b48:	bc 01       	movw	r22, r24
    2b4a:	62 5d       	subi	r22, 0xD2	; 210
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	01 e0       	ldi	r16, 0x01	; 1
    2b52:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <disk_read>
    2b56:	89 2b       	or	r24, r25
    2b58:	11 f0       	breq	.+4      	; 0x2b5e <check_fs+0x22>
    2b5a:	23 e0       	ldi	r18, 0x03	; 3
    2b5c:	29 c0       	rjmp	.+82     	; 0x2bb0 <check_fs+0x74>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2b5e:	c4 5d       	subi	r28, 0xD4	; 212
    2b60:	dd 4f       	sbci	r29, 0xFD	; 253
    2b62:	88 81       	ld	r24, Y
    2b64:	99 81       	ldd	r25, Y+1	; 0x01
    2b66:	cc 52       	subi	r28, 0x2C	; 44
    2b68:	d2 40       	sbci	r29, 0x02	; 2
    2b6a:	85 55       	subi	r24, 0x55	; 85
    2b6c:	9a 4a       	sbci	r25, 0xAA	; 170
    2b6e:	11 f0       	breq	.+4      	; 0x2b74 <check_fs+0x38>
    2b70:	22 e0       	ldi	r18, 0x02	; 2
    2b72:	1e c0       	rjmp	.+60     	; 0x2bb0 <check_fs+0x74>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2b74:	cc 59       	subi	r28, 0x9C	; 156
    2b76:	df 4f       	sbci	r29, 0xFF	; 255
    2b78:	88 81       	ld	r24, Y
    2b7a:	99 81       	ldd	r25, Y+1	; 0x01
    2b7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2b7e:	bb 81       	ldd	r27, Y+3	; 0x03
    2b80:	c4 56       	subi	r28, 0x64	; 100
    2b82:	d0 40       	sbci	r29, 0x00	; 0
    2b84:	b0 70       	andi	r27, 0x00	; 0
    2b86:	86 54       	subi	r24, 0x46	; 70
    2b88:	91 44       	sbci	r25, 0x41	; 65
    2b8a:	a4 45       	sbci	r26, 0x54	; 84
    2b8c:	b0 40       	sbci	r27, 0x00	; 0
    2b8e:	11 f4       	brne	.+4      	; 0x2b94 <check_fs+0x58>
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	0e c0       	rjmp	.+28     	; 0x2bb0 <check_fs+0x74>
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	c0 58       	subi	r28, 0x80	; 128
    2b98:	df 4f       	sbci	r29, 0xFF	; 255
    2b9a:	88 81       	ld	r24, Y
    2b9c:	99 81       	ldd	r25, Y+1	; 0x01
    2b9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2ba0:	bb 81       	ldd	r27, Y+3	; 0x03
    2ba2:	b0 70       	andi	r27, 0x00	; 0
    2ba4:	86 54       	subi	r24, 0x46	; 70
    2ba6:	91 44       	sbci	r25, 0x41	; 65
    2ba8:	a4 45       	sbci	r26, 0x54	; 84
    2baa:	b0 40       	sbci	r27, 0x00	; 0
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <check_fs+0x74>
    2bae:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    2bb0:	82 2f       	mov	r24, r18
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	0f 91       	pop	r16
    2bb8:	08 95       	ret

00002bba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2bc4:	6a 81       	ldd	r22, Y+2	; 0x02
    2bc6:	7b 81       	ldd	r23, Y+3	; 0x03
    2bc8:	88 81       	ld	r24, Y
    2bca:	99 81       	ldd	r25, Y+1	; 0x01
    2bcc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <validate>
    2bd0:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <f_sync+0x1e>
    2bd6:	a7 c0       	rjmp	.+334    	; 0x2d26 <f_sync+0x16c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bda:	85 ff       	sbrs	r24, 5
    2bdc:	a4 c0       	rjmp	.+328    	; 0x2d26 <f_sync+0x16c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2bde:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2be0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2be2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2be4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2be6:	88 81       	ld	r24, Y
    2be8:	99 81       	ldd	r25, Y+1	; 0x01
    2bea:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    2bee:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <f_sync+0x3c>
    2bf4:	98 c0       	rjmp	.+304    	; 0x2d26 <f_sync+0x16c>
				dir = fp->dir_ptr;
    2bf6:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2bf8:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	83 85       	ldd	r24, Z+11	; 0x0b
    2bfe:	80 62       	ori	r24, 0x20	; 32
    2c00:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c06:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c08:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c0a:	84 8f       	std	Z+28, r24	; 0x1c
    2c0c:	95 8f       	std	Z+29, r25	; 0x1d
    2c0e:	a6 8f       	std	Z+30, r26	; 0x1e
    2c10:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
    2c12:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c14:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c16:	93 8f       	std	Z+27, r25	; 0x1b
    2c18:	82 8f       	std	Z+26, r24	; 0x1a
    2c1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1e:	a8 89       	ldd	r26, Y+16	; 0x10
    2c20:	b9 89       	ldd	r27, Y+17	; 0x11
    2c22:	cd 01       	movw	r24, r26
    2c24:	aa 27       	eor	r26, r26
    2c26:	bb 27       	eor	r27, r27
    2c28:	95 8b       	std	Z+21, r25	; 0x15
    2c2a:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();						/* Update updated time */
    2c2c:	0e 94 17 03 	call	0x62e	; 0x62e <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2c30:	f8 01       	movw	r30, r16
    2c32:	66 8b       	std	Z+22, r22	; 0x16
    2c34:	77 8b       	std	Z+23, r23	; 0x17
    2c36:	80 8f       	std	Z+24, r24	; 0x18
    2c38:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3c:	8f 7d       	andi	r24, 0xDF	; 223
    2c3e:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2c40:	e8 81       	ld	r30, Y
    2c42:	f9 81       	ldd	r31, Y+1	; 0x01
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2c48:	09 90       	ld	r0, Y+
    2c4a:	d8 81       	ld	r29, Y
    2c4c:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    2c4e:	ce 01       	movw	r24, r28
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    2c5c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <f_sync+0xaa>
    2c62:	61 c0       	rjmp	.+194    	; 0x2d26 <f_sync+0x16c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    2c64:	88 81       	ld	r24, Y
    2c66:	83 30       	cpi	r24, 0x03	; 3
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <f_sync+0xb2>
    2c6a:	52 c0       	rjmp	.+164    	; 0x2d10 <f_sync+0x156>
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	88 23       	and	r24, r24
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <f_sync+0xba>
    2c72:	4e c0       	rjmp	.+156    	; 0x2d10 <f_sync+0x156>
			fs->winsect = 0;
    2c74:	1a a6       	std	Y+42, r1	; 0x2a
    2c76:	1b a6       	std	Y+43, r1	; 0x2b
    2c78:	1c a6       	std	Y+44, r1	; 0x2c
    2c7a:	1d a6       	std	Y+45, r1	; 0x2d
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    2c7c:	be 01       	movw	r22, r28
    2c7e:	62 5d       	subi	r22, 0xD2	; 210
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	fb 01       	movw	r30, r22
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	92 e0       	ldi	r25, 0x02	; 2
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <f_sync+0xd2>

	while (cnt--)
		*d++ = (BYTE)val;
    2c8a:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	2f ef       	ldi	r18, 0xFF	; 255
    2c90:	8f 3f       	cpi	r24, 0xFF	; 255
    2c92:	92 07       	cpc	r25, r18
    2c94:	d1 f7       	brne	.-12     	; 0x2c8a <f_sync+0xd0>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2c96:	c4 5d       	subi	r28, 0xD4	; 212
    2c98:	dd 4f       	sbci	r29, 0xFD	; 253
    2c9a:	85 e5       	ldi	r24, 0x55	; 85
    2c9c:	9a ea       	ldi	r25, 0xAA	; 170
    2c9e:	99 83       	std	Y+1, r25	; 0x01
    2ca0:	88 83       	st	Y, r24
    2ca2:	cc 52       	subi	r28, 0x2C	; 44
    2ca4:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2ca6:	82 e5       	ldi	r24, 0x52	; 82
    2ca8:	92 e5       	ldi	r25, 0x52	; 82
    2caa:	a1 e6       	ldi	r26, 0x61	; 97
    2cac:	b1 e4       	ldi	r27, 0x41	; 65
    2cae:	8e a7       	std	Y+46, r24	; 0x2e
    2cb0:	9f a7       	std	Y+47, r25	; 0x2f
    2cb2:	a8 ab       	std	Y+48, r26	; 0x30
    2cb4:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2cb6:	ce 5e       	subi	r28, 0xEE	; 238
    2cb8:	dd 4f       	sbci	r29, 0xFD	; 253
    2cba:	82 e7       	ldi	r24, 0x72	; 114
    2cbc:	92 e7       	ldi	r25, 0x72	; 114
    2cbe:	a1 e4       	ldi	r26, 0x41	; 65
    2cc0:	b1 e6       	ldi	r27, 0x61	; 97
    2cc2:	88 83       	st	Y, r24
    2cc4:	99 83       	std	Y+1, r25	; 0x01
    2cc6:	aa 83       	std	Y+2, r26	; 0x02
    2cc8:	bb 83       	std	Y+3, r27	; 0x03
    2cca:	c2 51       	subi	r28, 0x12	; 18
    2ccc:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2cce:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd2:	a8 89       	ldd	r26, Y+16	; 0x10
    2cd4:	b9 89       	ldd	r27, Y+17	; 0x11
    2cd6:	ca 5e       	subi	r28, 0xEA	; 234
    2cd8:	dd 4f       	sbci	r29, 0xFD	; 253
    2cda:	88 83       	st	Y, r24
    2cdc:	99 83       	std	Y+1, r25	; 0x01
    2cde:	aa 83       	std	Y+2, r26	; 0x02
    2ce0:	bb 83       	std	Y+3, r27	; 0x03
    2ce2:	c6 51       	subi	r28, 0x16	; 22
    2ce4:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    2ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cea:	ac 85       	ldd	r26, Y+12	; 0x0c
    2cec:	bd 85       	ldd	r27, Y+13	; 0x0d
    2cee:	c6 5e       	subi	r28, 0xE6	; 230
    2cf0:	dd 4f       	sbci	r29, 0xFD	; 253
    2cf2:	88 83       	st	Y, r24
    2cf4:	99 83       	std	Y+1, r25	; 0x01
    2cf6:	aa 83       	std	Y+2, r26	; 0x02
    2cf8:	bb 83       	std	Y+3, r27	; 0x03
    2cfa:	ca 51       	subi	r28, 0x1A	; 26
    2cfc:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2cfe:	2a 89       	ldd	r18, Y+18	; 0x12
    2d00:	3b 89       	ldd	r19, Y+19	; 0x13
    2d02:	4c 89       	ldd	r20, Y+20	; 0x14
    2d04:	5d 89       	ldd	r21, Y+21	; 0x15
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	01 e0       	ldi	r16, 0x01	; 1
    2d0a:	0e 94 4f 08 	call	0x109e	; 0x109e <disk_write>
			fs->fsi_flag = 0;
    2d0e:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	63 e0       	ldi	r22, 0x03	; 3
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	0e 94 cb 08 	call	0x1196	; 0x1196 <disk_ioctl>
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	11 f0       	breq	.+4      	; 0x2d24 <f_sync+0x16a>
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2d26:	c9 01       	movw	r24, r18
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	1f 91       	pop	r17
    2d2e:	0f 91       	pop	r16
    2d30:	08 95       	ret

00002d32 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2d38:	0e 94 dd 15 	call	0x2bba	; 0x2bba <f_sync>
    2d3c:	9c 01       	movw	r18, r24
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	11 f4       	brne	.+4      	; 0x2d46 <f_close+0x14>
    2d42:	19 82       	std	Y+1, r1	; 0x01
    2d44:	18 82       	st	Y, r1
	return res;
#endif
}
    2d46:	c9 01       	movw	r24, r18
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2d4e:	a5 e3       	ldi	r26, 0x35	; 53
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	ed ea       	ldi	r30, 0xAD	; 173
    2d54:	f6 e1       	ldi	r31, 0x16	; 22
    2d56:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__prologue_saves__>
    2d5a:	9b ab       	std	Y+51, r25	; 0x33
    2d5c:	8a ab       	std	Y+50, r24	; 0x32
    2d5e:	7d ab       	std	Y+53, r23	; 0x35
    2d60:	6c ab       	std	Y+52, r22	; 0x34
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2d62:	dc 01       	movw	r26, r24
    2d64:	1d 92       	st	X+, r1
    2d66:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2d68:	4f 71       	andi	r20, 0x1F	; 31
    2d6a:	4b a7       	std	Y+43, r20	; 0x2b
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    2d6c:	fb 01       	movw	r30, r22
    2d6e:	80 81       	ld	r24, Z
    2d70:	28 2f       	mov	r18, r24
    2d72:	33 27       	eor	r19, r19
    2d74:	27 fd       	sbrc	r18, 7
    2d76:	30 95       	com	r19
    2d78:	20 53       	subi	r18, 0x30	; 48
    2d7a:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    2d7c:	2a 30       	cpi	r18, 0x0A	; 10
    2d7e:	31 05       	cpc	r19, r1
    2d80:	58 f4       	brcc	.+22     	; 0x2d98 <f_open+0x4a>
    2d82:	81 81       	ldd	r24, Z+1	; 0x01
    2d84:	8a 33       	cpi	r24, 0x3A	; 58
    2d86:	41 f4       	brne	.+16     	; 0x2d98 <f_open+0x4a>
		p += 2; *path = p;				/* Return pointer to the path name */
    2d88:	32 96       	adiw	r30, 0x02	; 2
    2d8a:	fd ab       	std	Y+53, r31	; 0x35
    2d8c:	ec ab       	std	Y+52, r30	; 0x34
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    2d8e:	23 2b       	or	r18, r19
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <f_open+0x4a>
    2d92:	0b e0       	ldi	r16, 0x0B	; 11
    2d94:	10 e0       	ldi	r17, 0x00	; 0
    2d96:	6a c2       	rjmp	.+1236   	; 0x326c <f_open+0x51e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    2d98:	e0 90 2e 01 	lds	r14, 0x012E
    2d9c:	f0 90 2f 01 	lds	r15, 0x012F
    2da0:	fe 86       	std	Y+14, r15	; 0x0e
    2da2:	ed 86       	std	Y+13, r14	; 0x0d
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2da4:	e1 14       	cp	r14, r1
    2da6:	f1 04       	cpc	r15, r1
    2da8:	19 f4       	brne	.+6      	; 0x2db0 <f_open+0x62>
    2daa:	0c e0       	ldi	r16, 0x0C	; 12
    2dac:	10 e0       	ldi	r17, 0x00	; 0
    2dae:	5e c2       	rjmp	.+1212   	; 0x326c <f_open+0x51e>

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2db0:	1b a5       	ldd	r17, Y+43	; 0x2b
    2db2:	1e 7f       	andi	r17, 0xFE	; 254
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    2db4:	d7 01       	movw	r26, r14
    2db6:	8c 91       	ld	r24, X
    2db8:	88 23       	and	r24, r24
    2dba:	61 f0       	breq	.+24     	; 0x2dd4 <f_open+0x86>
		stat = disk_status(fs->drv);
    2dbc:	11 96       	adiw	r26, 0x01	; 1
    2dbe:	8c 91       	ld	r24, X
    2dc0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    2dc4:	80 fd       	sbrc	r24, 0
    2dc6:	06 c0       	rjmp	.+12     	; 0x2dd4 <f_open+0x86>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2dc8:	11 23       	and	r17, r17
    2dca:	09 f4       	brne	.+2      	; 0x2dce <f_open+0x80>
    2dcc:	4a c2       	rjmp	.+1172   	; 0x3262 <f_open+0x514>
    2dce:	82 fd       	sbrc	r24, 2
    2dd0:	45 c2       	rjmp	.+1162   	; 0x325c <f_open+0x50e>
    2dd2:	47 c2       	rjmp	.+1166   	; 0x3262 <f_open+0x514>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2dd4:	f7 01       	movw	r30, r14
    2dd6:	10 82       	st	Z, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    2dd8:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	0e 94 14 07 	call	0xe28	; 0xe28 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2de0:	80 ff       	sbrs	r24, 0
    2de2:	03 c0       	rjmp	.+6      	; 0x2dea <f_open+0x9c>
    2de4:	03 e0       	ldi	r16, 0x03	; 3
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	41 c2       	rjmp	.+1154   	; 0x326c <f_open+0x51e>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2dea:	11 23       	and	r17, r17
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <f_open+0xa4>
    2dee:	82 fd       	sbrc	r24, 2
    2df0:	35 c2       	rjmp	.+1130   	; 0x325c <f_open+0x50e>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    2df2:	c7 01       	movw	r24, r14
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	50 e0       	ldi	r21, 0x00	; 0
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <f_open+0xc0>
    2e04:	1c a6       	std	Y+44, r1	; 0x2c
    2e06:	1d a6       	std	Y+45, r1	; 0x2d
    2e08:	1e a6       	std	Y+46, r1	; 0x2e
    2e0a:	1f a6       	std	Y+47, r1	; 0x2f
    2e0c:	14 c0       	rjmp	.+40     	; 0x2e36 <f_open+0xe8>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2e0e:	f7 01       	movw	r30, r14
    2e10:	e4 51       	subi	r30, 0x14	; 20
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2e14:	84 81       	ldd	r24, Z+4	; 0x04
    2e16:	88 23       	and	r24, r24
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <f_open+0xce>
    2e1a:	26 c2       	rjmp	.+1100   	; 0x3268 <f_open+0x51a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2e1c:	20 85       	ldd	r18, Z+8	; 0x08
    2e1e:	31 85       	ldd	r19, Z+9	; 0x09
    2e20:	42 85       	ldd	r20, Z+10	; 0x0a
    2e22:	53 85       	ldd	r21, Z+11	; 0x0b
    2e24:	2c a7       	std	Y+44, r18	; 0x2c
    2e26:	3d a7       	std	Y+45, r19	; 0x2d
    2e28:	4e a7       	std	Y+46, r20	; 0x2e
    2e2a:	5f a7       	std	Y+47, r21	; 0x2f
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2e2c:	c7 01       	movw	r24, r14
    2e2e:	ba 01       	movw	r22, r20
    2e30:	a9 01       	movw	r20, r18
    2e32:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2e36:	83 30       	cpi	r24, 0x03	; 3
    2e38:	19 f4       	brne	.+6      	; 0x2e40 <f_open+0xf2>
    2e3a:	01 e0       	ldi	r16, 0x01	; 1
    2e3c:	10 e0       	ldi	r17, 0x00	; 0
    2e3e:	16 c2       	rjmp	.+1068   	; 0x326c <f_open+0x51e>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    2e40:	88 23       	and	r24, r24
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <f_open+0xf8>
    2e44:	11 c2       	rjmp	.+1058   	; 0x3268 <f_open+0x51a>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    2e46:	d7 01       	movw	r26, r14
    2e48:	d9 96       	adiw	r26, 0x39	; 57
    2e4a:	8d 91       	ld	r24, X+
    2e4c:	9c 91       	ld	r25, X
    2e4e:	da 97       	sbiw	r26, 0x3a	; 58
    2e50:	80 50       	subi	r24, 0x00	; 0
    2e52:	92 40       	sbci	r25, 0x02	; 2
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <f_open+0x10a>
    2e56:	08 c2       	rjmp	.+1040   	; 0x3268 <f_open+0x51a>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2e58:	e4 e4       	ldi	r30, 0x44	; 68
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	ee 0e       	add	r14, r30
    2e5e:	ff 1e       	adc	r15, r31
    2e60:	d7 01       	movw	r26, r14
    2e62:	8d 91       	ld	r24, X+
    2e64:	9c 91       	ld	r25, X
    2e66:	ec eb       	ldi	r30, 0xBC	; 188
    2e68:	ff ef       	ldi	r31, 0xFF	; 255
    2e6a:	ee 0e       	add	r14, r30
    2e6c:	ff 1e       	adc	r15, r31
    2e6e:	3c 01       	movw	r6, r24
    2e70:	88 24       	eor	r8, r8
    2e72:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    2e74:	61 14       	cp	r6, r1
    2e76:	71 04       	cpc	r7, r1
    2e78:	81 04       	cpc	r8, r1
    2e7a:	91 04       	cpc	r9, r1
    2e7c:	69 f4       	brne	.+26     	; 0x2e98 <f_open+0x14a>
    2e7e:	22 e5       	ldi	r18, 0x52	; 82
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	e2 0e       	add	r14, r18
    2e84:	f3 1e       	adc	r15, r19
    2e86:	d7 01       	movw	r26, r14
    2e88:	6d 90       	ld	r6, X+
    2e8a:	7d 90       	ld	r7, X+
    2e8c:	8d 90       	ld	r8, X+
    2e8e:	9c 90       	ld	r9, X
    2e90:	ee ea       	ldi	r30, 0xAE	; 174
    2e92:	ff ef       	ldi	r31, 0xFF	; 255
    2e94:	ee 0e       	add	r14, r30
    2e96:	ff 1e       	adc	r15, r31
	fs->fsize = fasize;
    2e98:	d7 01       	movw	r26, r14
    2e9a:	5a 96       	adiw	r26, 0x1a	; 26
    2e9c:	6d 92       	st	X+, r6
    2e9e:	7d 92       	st	X+, r7
    2ea0:	8d 92       	st	X+, r8
    2ea2:	9c 92       	st	X, r9
    2ea4:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    2ea6:	de 96       	adiw	r26, 0x3e	; 62
    2ea8:	4c 91       	ld	r20, X
    2eaa:	de 97       	sbiw	r26, 0x3e	; 62
    2eac:	13 96       	adiw	r26, 0x03	; 3
    2eae:	4c 93       	st	X, r20
    2eb0:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2eb2:	84 2f       	mov	r24, r20
    2eb4:	81 50       	subi	r24, 0x01	; 1
    2eb6:	82 30       	cpi	r24, 0x02	; 2
    2eb8:	08 f0       	brcs	.+2      	; 0x2ebc <f_open+0x16e>
    2eba:	d6 c1       	rjmp	.+940    	; 0x3268 <f_open+0x51a>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2ebc:	db 96       	adiw	r26, 0x3b	; 59
    2ebe:	2c 91       	ld	r18, X
    2ec0:	db 97       	sbiw	r26, 0x3b	; 59
    2ec2:	12 96       	adiw	r26, 0x02	; 2
    2ec4:	2c 93       	st	X, r18
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    2ec6:	22 23       	and	r18, r18
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <f_open+0x17e>
    2eca:	ce c1       	rjmp	.+924    	; 0x3268 <f_open+0x51a>
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	c9 01       	movw	r24, r18
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	82 23       	and	r24, r18
    2ed4:	93 23       	and	r25, r19
    2ed6:	89 2b       	or	r24, r25
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <f_open+0x18e>
    2eda:	c6 c1       	rjmp	.+908    	; 0x3268 <f_open+0x51a>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2edc:	ef e3       	ldi	r30, 0x3F	; 63
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	ee 0e       	add	r14, r30
    2ee2:	ff 1e       	adc	r15, r31
    2ee4:	d7 01       	movw	r26, r14
    2ee6:	0d 91       	ld	r16, X+
    2ee8:	1c 91       	ld	r17, X
    2eea:	e1 ec       	ldi	r30, 0xC1	; 193
    2eec:	ff ef       	ldi	r31, 0xFF	; 255
    2eee:	ee 0e       	add	r14, r30
    2ef0:	ff 1e       	adc	r15, r31
    2ef2:	d7 01       	movw	r26, r14
    2ef4:	19 96       	adiw	r26, 0x09	; 9
    2ef6:	1c 93       	st	X, r17
    2ef8:	0e 93       	st	-X, r16
    2efa:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2efc:	c8 01       	movw	r24, r16
    2efe:	8f 70       	andi	r24, 0x0F	; 15
    2f00:	90 70       	andi	r25, 0x00	; 0
    2f02:	89 2b       	or	r24, r25
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <f_open+0x1ba>
    2f06:	b0 c1       	rjmp	.+864    	; 0x3268 <f_open+0x51a>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2f08:	e1 e4       	ldi	r30, 0x41	; 65
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	ee 0e       	add	r14, r30
    2f0e:	ff 1e       	adc	r15, r31
    2f10:	d7 01       	movw	r26, r14
    2f12:	8d 91       	ld	r24, X+
    2f14:	9c 91       	ld	r25, X
    2f16:	ef eb       	ldi	r30, 0xBF	; 191
    2f18:	ff ef       	ldi	r31, 0xFF	; 255
    2f1a:	ee 0e       	add	r14, r30
    2f1c:	ff 1e       	adc	r15, r31
    2f1e:	5c 01       	movw	r10, r24
    2f20:	cc 24       	eor	r12, r12
    2f22:	dd 24       	eor	r13, r13
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2f24:	a1 14       	cp	r10, r1
    2f26:	b1 04       	cpc	r11, r1
    2f28:	c1 04       	cpc	r12, r1
    2f2a:	d1 04       	cpc	r13, r1
    2f2c:	69 f4       	brne	.+26     	; 0x2f48 <f_open+0x1fa>
    2f2e:	2e e4       	ldi	r18, 0x4E	; 78
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	e2 0e       	add	r14, r18
    2f34:	f3 1e       	adc	r15, r19
    2f36:	d7 01       	movw	r26, r14
    2f38:	ad 90       	ld	r10, X+
    2f3a:	bd 90       	ld	r11, X+
    2f3c:	cd 90       	ld	r12, X+
    2f3e:	dc 90       	ld	r13, X
    2f40:	e2 eb       	ldi	r30, 0xB2	; 178
    2f42:	ff ef       	ldi	r31, 0xFF	; 255
    2f44:	ee 0e       	add	r14, r30
    2f46:	ff 1e       	adc	r15, r31

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2f48:	d7 01       	movw	r26, r14
    2f4a:	dc 96       	adiw	r26, 0x3c	; 60
    2f4c:	4d 90       	ld	r4, X+
    2f4e:	5c 90       	ld	r5, X
    2f50:	dd 97       	sbiw	r26, 0x3d	; 61
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    2f52:	41 14       	cp	r4, r1
    2f54:	51 04       	cpc	r5, r1
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <f_open+0x20c>
    2f58:	87 c1       	rjmp	.+782    	; 0x3268 <f_open+0x51a>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    2f5a:	24 2f       	mov	r18, r20
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	c4 01       	movw	r24, r8
    2f64:	b3 01       	movw	r22, r6
    2f66:	0e 94 31 1c 	call	0x3862	; 0x3862 <__mulsi3>
    2f6a:	6b a3       	std	Y+35, r22	; 0x23
    2f6c:	7c a3       	std	Y+36, r23	; 0x24
    2f6e:	8d a3       	std	Y+37, r24	; 0x25
    2f70:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
    2f72:	12 01       	movw	r2, r4
    2f74:	44 24       	eor	r4, r4
    2f76:	55 24       	eor	r5, r5
    2f78:	e4 e0       	ldi	r30, 0x04	; 4
    2f7a:	16 95       	lsr	r17
    2f7c:	07 95       	ror	r16
    2f7e:	ea 95       	dec	r30
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <f_open+0x22c>
    2f82:	38 01       	movw	r6, r16
    2f84:	88 24       	eor	r8, r8
    2f86:	99 24       	eor	r9, r9
    2f88:	62 0c       	add	r6, r2
    2f8a:	73 1c       	adc	r7, r3
    2f8c:	84 1c       	adc	r8, r4
    2f8e:	95 1c       	adc	r9, r5
    2f90:	66 0e       	add	r6, r22
    2f92:	77 1e       	adc	r7, r23
    2f94:	88 1e       	adc	r8, r24
    2f96:	99 1e       	adc	r9, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2f98:	a6 14       	cp	r10, r6
    2f9a:	b7 04       	cpc	r11, r7
    2f9c:	c8 04       	cpc	r12, r8
    2f9e:	d9 04       	cpc	r13, r9
    2fa0:	08 f4       	brcc	.+2      	; 0x2fa4 <f_open+0x256>
    2fa2:	62 c1       	rjmp	.+708    	; 0x3268 <f_open+0x51a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2fa4:	a6 18       	sub	r10, r6
    2fa6:	b7 08       	sbc	r11, r7
    2fa8:	c8 08       	sbc	r12, r8
    2faa:	d9 08       	sbc	r13, r9
    2fac:	f7 01       	movw	r30, r14
    2fae:	22 81       	ldd	r18, Z+2	; 0x02
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	c6 01       	movw	r24, r12
    2fb8:	b5 01       	movw	r22, r10
    2fba:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <__udivmodsi4>
    2fbe:	c9 01       	movw	r24, r18
    2fc0:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	a1 05       	cpc	r26, r1
    2fc6:	b1 05       	cpc	r27, r1
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <f_open+0x27e>
    2fca:	4e c1       	rjmp	.+668    	; 0x3268 <f_open+0x51a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2fcc:	86 3f       	cpi	r24, 0xF6	; 246
    2fce:	ff e0       	ldi	r31, 0x0F	; 15
    2fd0:	9f 07       	cpc	r25, r31
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	af 07       	cpc	r26, r31
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	bf 07       	cpc	r27, r31
    2fda:	10 f4       	brcc	.+4      	; 0x2fe0 <f_open+0x292>
    2fdc:	11 e0       	ldi	r17, 0x01	; 1
    2fde:	0b c0       	rjmp	.+22     	; 0x2ff6 <f_open+0x2a8>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2fe0:	86 3f       	cpi	r24, 0xF6	; 246
    2fe2:	2f ef       	ldi	r18, 0xFF	; 255
    2fe4:	92 07       	cpc	r25, r18
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	a2 07       	cpc	r26, r18
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	b2 07       	cpc	r27, r18
    2fee:	10 f0       	brcs	.+4      	; 0x2ff4 <f_open+0x2a6>
    2ff0:	13 e0       	ldi	r17, 0x03	; 3
    2ff2:	01 c0       	rjmp	.+2      	; 0x2ff6 <f_open+0x2a8>
    2ff4:	12 e0       	ldi	r17, 0x02	; 2

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2ff6:	72 e0       	ldi	r23, 0x02	; 2
    2ff8:	a7 2e       	mov	r10, r23
    2ffa:	b1 2c       	mov	r11, r1
    2ffc:	c1 2c       	mov	r12, r1
    2ffe:	d1 2c       	mov	r13, r1
    3000:	a8 0e       	add	r10, r24
    3002:	b9 1e       	adc	r11, r25
    3004:	ca 1e       	adc	r12, r26
    3006:	db 1e       	adc	r13, r27
    3008:	d7 01       	movw	r26, r14
    300a:	56 96       	adiw	r26, 0x16	; 22
    300c:	ad 92       	st	X+, r10
    300e:	bd 92       	st	X+, r11
    3010:	cd 92       	st	X+, r12
    3012:	dc 92       	st	X, r13
    3014:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    3016:	2c a5       	ldd	r18, Y+44	; 0x2c
    3018:	3d a5       	ldd	r19, Y+45	; 0x2d
    301a:	4e a5       	ldd	r20, Y+46	; 0x2e
    301c:	5f a5       	ldd	r21, Y+47	; 0x2f
    301e:	62 0e       	add	r6, r18
    3020:	73 1e       	adc	r7, r19
    3022:	84 1e       	adc	r8, r20
    3024:	95 1e       	adc	r9, r21
    3026:	96 96       	adiw	r26, 0x26	; 38
    3028:	6d 92       	st	X+, r6
    302a:	7d 92       	st	X+, r7
    302c:	8d 92       	st	X+, r8
    302e:	9c 92       	st	X, r9
    3030:	99 97       	sbiw	r26, 0x29	; 41
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3032:	da 01       	movw	r26, r20
    3034:	c9 01       	movw	r24, r18
    3036:	82 0d       	add	r24, r2
    3038:	93 1d       	adc	r25, r3
    303a:	a4 1d       	adc	r26, r4
    303c:	b5 1d       	adc	r27, r5
    303e:	f7 01       	movw	r30, r14
    3040:	86 8f       	std	Z+30, r24	; 0x1e
    3042:	97 8f       	std	Z+31, r25	; 0x1f
    3044:	a0 a3       	std	Z+32, r26	; 0x20
    3046:	b1 a3       	std	Z+33, r27	; 0x21
    3048:	20 85       	ldd	r18, Z+8	; 0x08
    304a:	31 85       	ldd	r19, Z+9	; 0x09
	if (fmt == FS_FAT32) {
    304c:	13 30       	cpi	r17, 0x03	; 3
    304e:	f9 f4       	brne	.+62     	; 0x308e <f_open+0x340>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3050:	23 2b       	or	r18, r19
    3052:	09 f0       	breq	.+2      	; 0x3056 <f_open+0x308>
    3054:	09 c1       	rjmp	.+530    	; 0x3268 <f_open+0x51a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3056:	2a e5       	ldi	r18, 0x5A	; 90
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	e2 0e       	add	r14, r18
    305c:	f3 1e       	adc	r15, r19
    305e:	f7 01       	movw	r30, r14
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	a2 81       	ldd	r26, Z+2	; 0x02
    3066:	b3 81       	ldd	r27, Z+3	; 0x03
    3068:	26 ea       	ldi	r18, 0xA6	; 166
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	e2 0e       	add	r14, r18
    306e:	f3 1e       	adc	r15, r19
    3070:	f7 01       	movw	r30, r14
    3072:	82 a3       	std	Z+34, r24	; 0x22
    3074:	93 a3       	std	Z+35, r25	; 0x23
    3076:	a4 a3       	std	Z+36, r26	; 0x24
    3078:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    307a:	a6 01       	movw	r20, r12
    307c:	95 01       	movw	r18, r10
    307e:	62 e0       	ldi	r22, 0x02	; 2
    3080:	22 0f       	add	r18, r18
    3082:	33 1f       	adc	r19, r19
    3084:	44 1f       	adc	r20, r20
    3086:	55 1f       	adc	r21, r21
    3088:	6a 95       	dec	r22
    308a:	d1 f7       	brne	.-12     	; 0x3080 <f_open+0x332>
    308c:	31 c0       	rjmp	.+98     	; 0x30f0 <f_open+0x3a2>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    308e:	23 2b       	or	r18, r19
    3090:	09 f4       	brne	.+2      	; 0x3094 <f_open+0x346>
    3092:	ea c0       	rjmp	.+468    	; 0x3268 <f_open+0x51a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3094:	2b a1       	ldd	r18, Y+35	; 0x23
    3096:	3c a1       	ldd	r19, Y+36	; 0x24
    3098:	4d a1       	ldd	r20, Y+37	; 0x25
    309a:	5e a1       	ldd	r21, Y+38	; 0x26
    309c:	82 0f       	add	r24, r18
    309e:	93 1f       	adc	r25, r19
    30a0:	a4 1f       	adc	r26, r20
    30a2:	b5 1f       	adc	r27, r21
    30a4:	f7 01       	movw	r30, r14
    30a6:	82 a3       	std	Z+34, r24	; 0x22
    30a8:	93 a3       	std	Z+35, r25	; 0x23
    30aa:	a4 a3       	std	Z+36, r26	; 0x24
    30ac:	b5 a3       	std	Z+37, r27	; 0x25
    30ae:	d6 01       	movw	r26, r12
    30b0:	c5 01       	movw	r24, r10
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	aa 1f       	adc	r26, r26
    30b8:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    30ba:	12 30       	cpi	r17, 0x02	; 2
    30bc:	19 f4       	brne	.+6      	; 0x30c4 <f_open+0x376>
    30be:	9c 01       	movw	r18, r24
    30c0:	ad 01       	movw	r20, r26
    30c2:	16 c0       	rjmp	.+44     	; 0x30f0 <f_open+0x3a2>
    30c4:	9c 01       	movw	r18, r24
    30c6:	ad 01       	movw	r20, r26
    30c8:	2a 0d       	add	r18, r10
    30ca:	3b 1d       	adc	r19, r11
    30cc:	4c 1d       	adc	r20, r12
    30ce:	5d 1d       	adc	r21, r13
    30d0:	56 95       	lsr	r21
    30d2:	47 95       	ror	r20
    30d4:	37 95       	ror	r19
    30d6:	27 95       	ror	r18
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e0       	ldi	r26, 0x00	; 0
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	a8 22       	and	r10, r24
    30e2:	b9 22       	and	r11, r25
    30e4:	ca 22       	and	r12, r26
    30e6:	db 22       	and	r13, r27
    30e8:	2a 0d       	add	r18, r10
    30ea:	3b 1d       	adc	r19, r11
    30ec:	4c 1d       	adc	r20, r12
    30ee:	5d 1d       	adc	r21, r13
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
    30f0:	21 50       	subi	r18, 0x01	; 1
    30f2:	3e 4f       	sbci	r19, 0xFE	; 254
    30f4:	4f 4f       	sbci	r20, 0xFF	; 255
    30f6:	5f 4f       	sbci	r21, 0xFF	; 255
    30f8:	b9 e0       	ldi	r27, 0x09	; 9
    30fa:	56 95       	lsr	r21
    30fc:	47 95       	ror	r20
    30fe:	37 95       	ror	r19
    3100:	27 95       	ror	r18
    3102:	ba 95       	dec	r27
    3104:	d1 f7       	brne	.-12     	; 0x30fa <f_open+0x3ac>
    3106:	f7 01       	movw	r30, r14
    3108:	82 8d       	ldd	r24, Z+26	; 0x1a
    310a:	93 8d       	ldd	r25, Z+27	; 0x1b
    310c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    310e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3110:	82 17       	cp	r24, r18
    3112:	93 07       	cpc	r25, r19
    3114:	a4 07       	cpc	r26, r20
    3116:	b5 07       	cpc	r27, r21
    3118:	08 f4       	brcc	.+2      	; 0x311c <f_open+0x3ce>
    311a:	a6 c0       	rjmp	.+332    	; 0x3268 <f_open+0x51a>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    311c:	8f ef       	ldi	r24, 0xFF	; 255
    311e:	9f ef       	ldi	r25, 0xFF	; 255
    3120:	af ef       	ldi	r26, 0xFF	; 255
    3122:	bf ef       	ldi	r27, 0xFF	; 255
    3124:	86 87       	std	Z+14, r24	; 0x0e
    3126:	97 87       	std	Z+15, r25	; 0x0f
    3128:	a0 8b       	std	Z+16, r26	; 0x10
    312a:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    312c:	d7 01       	movw	r26, r14
    312e:	1a 96       	adiw	r26, 0x0a	; 10
    3130:	1d 92       	st	X+, r1
    3132:	1d 92       	st	X+, r1
    3134:	1d 92       	st	X+, r1
    3136:	1c 92       	st	X, r1
    3138:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    313a:	13 30       	cpi	r17, 0x03	; 3
    313c:	09 f0       	breq	.+2      	; 0x3140 <f_open+0x3f2>
    313e:	78 c0       	rjmp	.+240    	; 0x3230 <f_open+0x4e2>
	 	fs->fsi_flag = 0;
    3140:	15 96       	adiw	r26, 0x05	; 5
    3142:	1c 92       	st	X, r1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3144:	ee e5       	ldi	r30, 0x5E	; 94
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	ee 0e       	add	r14, r30
    314a:	ff 1e       	adc	r15, r31
    314c:	d7 01       	movw	r26, r14
    314e:	2d 91       	ld	r18, X+
    3150:	3c 91       	ld	r19, X
    3152:	e2 ea       	ldi	r30, 0xA2	; 162
    3154:	ff ef       	ldi	r31, 0xFF	; 255
    3156:	ee 0e       	add	r14, r30
    3158:	ff 1e       	adc	r15, r31
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3160:	9d a5       	ldd	r25, Y+45	; 0x2d
    3162:	ae a5       	ldd	r26, Y+46	; 0x2e
    3164:	bf a5       	ldd	r27, Y+47	; 0x2f
    3166:	28 0f       	add	r18, r24
    3168:	39 1f       	adc	r19, r25
    316a:	4a 1f       	adc	r20, r26
    316c:	5b 1f       	adc	r21, r27
    316e:	d7 01       	movw	r26, r14
    3170:	52 96       	adiw	r26, 0x12	; 18
    3172:	2d 93       	st	X+, r18
    3174:	3d 93       	st	X+, r19
    3176:	4d 93       	st	X+, r20
    3178:	5c 93       	st	X, r21
    317a:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    317c:	b7 01       	movw	r22, r14
    317e:	62 5d       	subi	r22, 0xD2	; 210
    3180:	7f 4f       	sbci	r23, 0xFF	; 255
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	8c 91       	ld	r24, X
    3186:	01 e0       	ldi	r16, 0x01	; 1
    3188:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <disk_read>
    318c:	89 2b       	or	r24, r25
    318e:	09 f0       	breq	.+2      	; 0x3192 <f_open+0x444>
    3190:	4f c0       	rjmp	.+158    	; 0x3230 <f_open+0x4e2>
    3192:	ec e2       	ldi	r30, 0x2C	; 44
    3194:	f2 e0       	ldi	r31, 0x02	; 2
    3196:	ee 0e       	add	r14, r30
    3198:	ff 1e       	adc	r15, r31
    319a:	d7 01       	movw	r26, r14
    319c:	8d 91       	ld	r24, X+
    319e:	9c 91       	ld	r25, X
    31a0:	e4 ed       	ldi	r30, 0xD4	; 212
    31a2:	fd ef       	ldi	r31, 0xFD	; 253
    31a4:	ee 0e       	add	r14, r30
    31a6:	ff 1e       	adc	r15, r31
    31a8:	85 55       	subi	r24, 0x55	; 85
    31aa:	9a 4a       	sbci	r25, 0xAA	; 170
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <f_open+0x462>
    31ae:	40 c0       	rjmp	.+128    	; 0x3230 <f_open+0x4e2>
    31b0:	f7 01       	movw	r30, r14
    31b2:	86 a5       	ldd	r24, Z+46	; 0x2e
    31b4:	97 a5       	ldd	r25, Z+47	; 0x2f
    31b6:	a0 a9       	ldd	r26, Z+48	; 0x30
    31b8:	b1 a9       	ldd	r27, Z+49	; 0x31
    31ba:	82 55       	subi	r24, 0x52	; 82
    31bc:	92 45       	sbci	r25, 0x52	; 82
    31be:	a1 46       	sbci	r26, 0x61	; 97
    31c0:	b1 44       	sbci	r27, 0x41	; 65
    31c2:	b1 f5       	brne	.+108    	; 0x3230 <f_open+0x4e2>
    31c4:	22 e1       	ldi	r18, 0x12	; 18
    31c6:	32 e0       	ldi	r19, 0x02	; 2
    31c8:	e2 0e       	add	r14, r18
    31ca:	f3 1e       	adc	r15, r19
    31cc:	f7 01       	movw	r30, r14
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	a2 81       	ldd	r26, Z+2	; 0x02
    31d4:	b3 81       	ldd	r27, Z+3	; 0x03
    31d6:	2e ee       	ldi	r18, 0xEE	; 238
    31d8:	3d ef       	ldi	r19, 0xFD	; 253
    31da:	e2 0e       	add	r14, r18
    31dc:	f3 1e       	adc	r15, r19
    31de:	82 57       	subi	r24, 0x72	; 114
    31e0:	92 47       	sbci	r25, 0x72	; 114
    31e2:	a1 44       	sbci	r26, 0x41	; 65
    31e4:	b1 46       	sbci	r27, 0x61	; 97
    31e6:	21 f5       	brne	.+72     	; 0x3230 <f_open+0x4e2>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    31e8:	4a e1       	ldi	r20, 0x1A	; 26
    31ea:	52 e0       	ldi	r21, 0x02	; 2
    31ec:	e4 0e       	add	r14, r20
    31ee:	f5 1e       	adc	r15, r21
    31f0:	f7 01       	movw	r30, r14
    31f2:	80 81       	ld	r24, Z
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	a2 81       	ldd	r26, Z+2	; 0x02
    31f8:	b3 81       	ldd	r27, Z+3	; 0x03
    31fa:	26 ee       	ldi	r18, 0xE6	; 230
    31fc:	3d ef       	ldi	r19, 0xFD	; 253
    31fe:	e2 0e       	add	r14, r18
    3200:	f3 1e       	adc	r15, r19
    3202:	f7 01       	movw	r30, r14
    3204:	82 87       	std	Z+10, r24	; 0x0a
    3206:	93 87       	std	Z+11, r25	; 0x0b
    3208:	a4 87       	std	Z+12, r26	; 0x0c
    320a:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    320c:	26 e1       	ldi	r18, 0x16	; 22
    320e:	32 e0       	ldi	r19, 0x02	; 2
    3210:	e2 0e       	add	r14, r18
    3212:	f3 1e       	adc	r15, r19
    3214:	f7 01       	movw	r30, r14
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	a2 81       	ldd	r26, Z+2	; 0x02
    321c:	b3 81       	ldd	r27, Z+3	; 0x03
    321e:	2a ee       	ldi	r18, 0xEA	; 234
    3220:	3d ef       	ldi	r19, 0xFD	; 253
    3222:	e2 0e       	add	r14, r18
    3224:	f3 1e       	adc	r15, r19
    3226:	f7 01       	movw	r30, r14
    3228:	86 87       	std	Z+14, r24	; 0x0e
    322a:	97 87       	std	Z+15, r25	; 0x0f
    322c:	a0 8b       	std	Z+16, r26	; 0x10
    322e:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    3230:	d7 01       	movw	r26, r14
    3232:	1c 93       	st	X, r17
	fs->id = ++Fsid;		/* File system mount ID */
    3234:	80 91 30 01 	lds	r24, 0x0130
    3238:	90 91 31 01 	lds	r25, 0x0131
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	90 93 31 01 	sts	0x0131, r25
    3242:	80 93 30 01 	sts	0x0130, r24
    3246:	17 96       	adiw	r26, 0x07	; 7
    3248:	9c 93       	st	X, r25
    324a:	8e 93       	st	-X, r24
    324c:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    324e:	f7 01       	movw	r30, r14
    3250:	12 a6       	std	Z+42, r1	; 0x2a
    3252:	13 a6       	std	Z+43, r1	; 0x2b
    3254:	14 a6       	std	Z+44, r1	; 0x2c
    3256:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    3258:	14 82       	std	Z+4, r1	; 0x04
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <f_open+0x514>
    325c:	0a e0       	ldi	r16, 0x0A	; 10
    325e:	10 e0       	ldi	r17, 0x00	; 0
    3260:	05 c0       	rjmp	.+10     	; 0x326c <f_open+0x51e>
    3262:	00 e0       	ldi	r16, 0x00	; 0
    3264:	10 e0       	ldi	r17, 0x00	; 0
    3266:	02 c0       	rjmp	.+4      	; 0x326c <f_open+0x51e>
    3268:	0d e0       	ldi	r16, 0x0D	; 13
    326a:	10 e0       	ldi	r17, 0x00	; 0
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    326c:	ce 01       	movw	r24, r28
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	9a a3       	std	Y+34, r25	; 0x22
    3272:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
    3274:	01 15       	cp	r16, r1
    3276:	11 05       	cpc	r17, r1
    3278:	09 f0       	breq	.+2      	; 0x327c <f_open+0x52e>
    327a:	3b c1       	rjmp	.+630    	; 0x34f2 <f_open+0x7a4>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    327c:	ac a9       	ldd	r26, Y+52	; 0x34
    327e:	bd a9       	ldd	r27, Y+53	; 0x35
    3280:	8c 91       	ld	r24, X
    3282:	8f 32       	cpi	r24, 0x2F	; 47
    3284:	11 f0       	breq	.+4      	; 0x328a <f_open+0x53c>
    3286:	8c 35       	cpi	r24, 0x5C	; 92
    3288:	29 f4       	brne	.+10     	; 0x3294 <f_open+0x546>
		path++;
    328a:	ec a9       	ldd	r30, Y+52	; 0x34
    328c:	fd a9       	ldd	r31, Y+53	; 0x35
    328e:	31 96       	adiw	r30, 0x01	; 1
    3290:	fd ab       	std	Y+53, r31	; 0x35
    3292:	ec ab       	std	Y+52, r30	; 0x34
	dj->sclust = 0;						/* Start from the root dir */
    3294:	1b 8a       	std	Y+19, r1	; 0x13
    3296:	1c 8a       	std	Y+20, r1	; 0x14
    3298:	1d 8a       	std	Y+21, r1	; 0x15
    329a:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    329c:	ac a9       	ldd	r26, Y+52	; 0x34
    329e:	bd a9       	ldd	r27, Y+53	; 0x35
    32a0:	8c 91       	ld	r24, X
    32a2:	80 32       	cpi	r24, 0x20	; 32
    32a4:	50 f4       	brcc	.+20     	; 0x32ba <f_open+0x56c>
		res = dir_sdi(dj, 0);
    32a6:	ce 01       	movw	r24, r28
    32a8:	0d 96       	adiw	r24, 0x0d	; 13
    32aa:	60 e0       	ldi	r22, 0x00	; 0
    32ac:	70 e0       	ldi	r23, 0x00	; 0
    32ae:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <dir_sdi>
    32b2:	8c 01       	movw	r16, r24
		dj->dir = 0;
    32b4:	18 a2       	std	Y+32, r1	; 0x20
    32b6:	1f 8e       	std	Y+31, r1	; 0x1f
    32b8:	1c c1       	rjmp	.+568    	; 0x34f2 <f_open+0x7a4>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    32ba:	a0 e2       	ldi	r26, 0x20	; 32
    32bc:	9a 2e       	mov	r9, r26
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    32be:	05 e0       	ldi	r16, 0x05	; 5
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    32c0:	fd e0       	ldi	r31, 0x0D	; 13
    32c2:	af 2e       	mov	r10, r31
    32c4:	b1 2c       	mov	r11, r1
    32c6:	ac 0e       	add	r10, r28
    32c8:	bd 1e       	adc	r11, r29
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    32ca:	a9 a1       	ldd	r26, Y+33	; 0x21
    32cc:	ba a1       	ldd	r27, Y+34	; 0x22
    32ce:	fd 01       	movw	r30, r26
    32d0:	8b e0       	ldi	r24, 0x0B	; 11
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	01 c0       	rjmp	.+2      	; 0x32d8 <f_open+0x58a>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    32d6:	91 92       	st	Z+, r9
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	2f ef       	ldi	r18, 0xFF	; 255
    32dc:	8f 3f       	cpi	r24, 0xFF	; 255
    32de:	92 07       	cpc	r25, r18
    32e0:	d1 f7       	brne	.-12     	; 0x32d6 <f_open+0x588>
    32e2:	10 e0       	ldi	r17, 0x00	; 0
    32e4:	e8 e0       	ldi	r30, 0x08	; 8
    32e6:	ce 2e       	mov	r12, r30
    32e8:	d1 2c       	mov	r13, r1
    32ea:	ee 24       	eor	r14, r14
    32ec:	ff 24       	eor	r15, r15
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	50 e0       	ldi	r21, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    32f2:	ec a9       	ldd	r30, Y+52	; 0x34
    32f4:	fd a9       	ldd	r31, Y+53	; 0x35
    32f6:	ee 0d       	add	r30, r14
    32f8:	ff 1d       	adc	r31, r15
    32fa:	20 81       	ld	r18, Z
    32fc:	08 94       	sec
    32fe:	e1 1c       	adc	r14, r1
    3300:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    3302:	21 32       	cpi	r18, 0x21	; 33
    3304:	08 f4       	brcc	.+2      	; 0x3308 <f_open+0x5ba>
    3306:	69 c0       	rjmp	.+210    	; 0x33da <f_open+0x68c>
    3308:	2f 32       	cpi	r18, 0x2F	; 47
    330a:	09 f4       	brne	.+2      	; 0x330e <f_open+0x5c0>
    330c:	a7 c2       	rjmp	.+1358   	; 0x385c <f_open+0xb0e>
    330e:	2c 35       	cpi	r18, 0x5C	; 92
    3310:	09 f4       	brne	.+2      	; 0x3314 <f_open+0x5c6>
    3312:	a4 c2       	rjmp	.+1352   	; 0x385c <f_open+0xb0e>
		if (c == '.' || i >= ni) {
    3314:	2e 32       	cpi	r18, 0x2E	; 46
    3316:	19 f0       	breq	.+6      	; 0x331e <f_open+0x5d0>
    3318:	4c 15       	cp	r20, r12
    331a:	5d 05       	cpc	r21, r13
    331c:	80 f0       	brcs	.+32     	; 0x333e <f_open+0x5f0>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    331e:	38 e0       	ldi	r19, 0x08	; 8
    3320:	c3 16       	cp	r12, r19
    3322:	d1 04       	cpc	r13, r1
    3324:	09 f0       	breq	.+2      	; 0x3328 <f_open+0x5da>
    3326:	de c0       	rjmp	.+444    	; 0x34e4 <f_open+0x796>
    3328:	2e 32       	cpi	r18, 0x2E	; 46
    332a:	09 f0       	breq	.+2      	; 0x332e <f_open+0x5e0>
    332c:	db c0       	rjmp	.+438    	; 0x34e4 <f_open+0x796>
			i = 8; ni = 11;
			b <<= 2; continue;
    332e:	11 0f       	add	r17, r17
    3330:	11 0f       	add	r17, r17
    3332:	7b e0       	ldi	r23, 0x0B	; 11
    3334:	c7 2e       	mov	r12, r23
    3336:	d1 2c       	mov	r13, r1
    3338:	48 e0       	ldi	r20, 0x08	; 8
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	da cf       	rjmp	.-76     	; 0x32f2 <f_open+0x5a4>
		}
		if (c >= 0x80) {				/* Extended char? */
    333e:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    3340:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    3342:	82 2f       	mov	r24, r18
    3344:	81 58       	subi	r24, 0x81	; 129
    3346:	8f 31       	cpi	r24, 0x1F	; 31
    3348:	18 f0       	brcs	.+6      	; 0x3350 <f_open+0x602>
    334a:	8f 55       	subi	r24, 0x5F	; 95
    334c:	8d 31       	cpi	r24, 0x1D	; 29
    334e:	10 f5       	brcc	.+68     	; 0x3394 <f_open+0x646>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    3350:	ec a9       	ldd	r30, Y+52	; 0x34
    3352:	fd a9       	ldd	r31, Y+53	; 0x35
    3354:	ee 0d       	add	r30, r14
    3356:	ff 1d       	adc	r31, r15
    3358:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    335a:	83 2f       	mov	r24, r19
    335c:	80 54       	subi	r24, 0x40	; 64
    335e:	8f 33       	cpi	r24, 0x3F	; 63
    3360:	20 f0       	brcs	.+8      	; 0x336a <f_open+0x61c>
    3362:	80 54       	subi	r24, 0x40	; 64
    3364:	8d 37       	cpi	r24, 0x7D	; 125
    3366:	08 f0       	brcs	.+2      	; 0x336a <f_open+0x61c>
    3368:	bd c0       	rjmp	.+378    	; 0x34e4 <f_open+0x796>
    336a:	c6 01       	movw	r24, r12
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	48 17       	cp	r20, r24
    3370:	59 07       	cpc	r21, r25
    3372:	08 f0       	brcs	.+2      	; 0x3376 <f_open+0x628>
    3374:	b7 c0       	rjmp	.+366    	; 0x34e4 <f_open+0x796>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    3376:	08 94       	sec
    3378:	e1 1c       	adc	r14, r1
    337a:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    337c:	fd 01       	movw	r30, r26
    337e:	e4 0f       	add	r30, r20
    3380:	f5 1f       	adc	r31, r21
    3382:	20 83       	st	Z, r18
    3384:	ca 01       	movw	r24, r20
    3386:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    3388:	fd 01       	movw	r30, r26
    338a:	e8 0f       	add	r30, r24
    338c:	f9 1f       	adc	r31, r25
    338e:	30 83       	st	Z, r19
    3390:	ac 01       	movw	r20, r24
    3392:	20 c0       	rjmp	.+64     	; 0x33d4 <f_open+0x686>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    3394:	62 2f       	mov	r22, r18
    3396:	70 e0       	ldi	r23, 0x00	; 0
    3398:	e3 e0       	ldi	r30, 0x03	; 3
    339a:	f1 e0       	ldi	r31, 0x01	; 1
    339c:	01 c0       	rjmp	.+2      	; 0x33a0 <f_open+0x652>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    339e:	31 96       	adiw	r30, 0x01	; 1
    33a0:	80 81       	ld	r24, Z
    33a2:	88 23       	and	r24, r24
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <f_open+0x666>
    33a6:	99 27       	eor	r25, r25
    33a8:	87 fd       	sbrc	r24, 7
    33aa:	90 95       	com	r25
    33ac:	86 17       	cp	r24, r22
    33ae:	97 07       	cpc	r25, r23
    33b0:	b1 f7       	brne	.-20     	; 0x339e <f_open+0x650>
    33b2:	98 c0       	rjmp	.+304    	; 0x34e4 <f_open+0x796>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    33b4:	82 2f       	mov	r24, r18
    33b6:	81 54       	subi	r24, 0x41	; 65
    33b8:	8a 31       	cpi	r24, 0x1A	; 26
    33ba:	10 f4       	brcc	.+4      	; 0x33c0 <f_open+0x672>
				b |= 2;
    33bc:	12 60       	ori	r17, 0x02	; 2
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <f_open+0x67e>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    33c0:	82 2f       	mov	r24, r18
    33c2:	81 56       	subi	r24, 0x61	; 97
    33c4:	8a 31       	cpi	r24, 0x1A	; 26
    33c6:	10 f4       	brcc	.+4      	; 0x33cc <f_open+0x67e>
					b |= 1; c -= 0x20;
    33c8:	11 60       	ori	r17, 0x01	; 1
    33ca:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    33cc:	fd 01       	movw	r30, r26
    33ce:	e4 0f       	add	r30, r20
    33d0:	f5 1f       	adc	r31, r21
    33d2:	20 83       	st	Z, r18
    33d4:	4f 5f       	subi	r20, 0xFF	; 255
    33d6:	5f 4f       	sbci	r21, 0xFF	; 255
    33d8:	8c cf       	rjmp	.-232    	; 0x32f2 <f_open+0x5a4>
    33da:	91 2f       	mov	r25, r17
    33dc:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    33de:	45 2b       	or	r20, r21
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <f_open+0x696>
    33e2:	80 c0       	rjmp	.+256    	; 0x34e4 <f_open+0x796>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    33e4:	8c 91       	ld	r24, X
    33e6:	85 3e       	cpi	r24, 0xE5	; 229
    33e8:	09 f4       	brne	.+2      	; 0x33ec <f_open+0x69e>
    33ea:	0c 93       	st	X, r16

	if (ni == 8) b <<= 2;
    33ec:	48 e0       	ldi	r20, 0x08	; 8
    33ee:	c4 16       	cp	r12, r20
    33f0:	d1 04       	cpc	r13, r1
    33f2:	19 f4       	brne	.+6      	; 0x33fa <f_open+0x6ac>
    33f4:	91 2f       	mov	r25, r17
    33f6:	99 0f       	add	r25, r25
    33f8:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    33fa:	29 2f       	mov	r18, r25
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	c9 01       	movw	r24, r18
    3400:	83 70       	andi	r24, 0x03	; 3
    3402:	90 70       	andi	r25, 0x00	; 0
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	09 f4       	brne	.+2      	; 0x340a <f_open+0x6bc>
    3408:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    340a:	2c 70       	andi	r18, 0x0C	; 12
    340c:	30 70       	andi	r19, 0x00	; 0
    340e:	24 30       	cpi	r18, 0x04	; 4
    3410:	31 05       	cpc	r19, r1
    3412:	09 f4       	brne	.+2      	; 0x3416 <f_open+0x6c8>
    3414:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    3416:	1b 96       	adiw	r26, 0x0b	; 11
    3418:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    341a:	c5 01       	movw	r24, r10
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <dir_sdi>
    3424:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	79 f5       	brne	.+94     	; 0x3488 <f_open+0x73a>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    342a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    342c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    342e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3430:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3432:	8d 85       	ldd	r24, Y+13	; 0x0d
    3434:	9e 85       	ldd	r25, Y+14	; 0x0e
    3436:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    343a:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	21 f5       	brne	.+72     	; 0x3488 <f_open+0x73a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3440:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3442:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3444:	80 81       	ld	r24, Z
    3446:	88 23       	and	r24, r24
    3448:	19 f4       	brne	.+6      	; 0x3450 <f_open+0x702>
    344a:	44 e0       	ldi	r20, 0x04	; 4
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	1c c0       	rjmp	.+56     	; 0x3488 <f_open+0x73a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3450:	83 85       	ldd	r24, Z+11	; 0x0b
    3452:	83 fd       	sbrc	r24, 3
    3454:	13 c0       	rjmp	.+38     	; 0x347c <f_open+0x72e>
    3456:	89 a1       	ldd	r24, Y+33	; 0x21
    3458:	9a a1       	ldd	r25, Y+34	; 0x22
    345a:	9c 01       	movw	r18, r24
    345c:	d9 01       	movw	r26, r18
    345e:	2b e0       	ldi	r18, 0x0B	; 11
    3460:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    3462:	21 50       	subi	r18, 0x01	; 1
    3464:	30 40       	sbci	r19, 0x00	; 0
    3466:	8f ef       	ldi	r24, 0xFF	; 255
    3468:	2f 3f       	cpi	r18, 0xFF	; 255
    346a:	38 07       	cpc	r19, r24
    346c:	69 f0       	breq	.+26     	; 0x3488 <f_open+0x73a>
    346e:	90 81       	ld	r25, Z
    3470:	8c 91       	ld	r24, X
    3472:	98 17       	cp	r25, r24
    3474:	19 f4       	brne	.+6      	; 0x347c <f_open+0x72e>
    3476:	31 96       	adiw	r30, 0x01	; 1
    3478:	11 96       	adiw	r26, 0x01	; 1
    347a:	f3 cf       	rjmp	.-26     	; 0x3462 <f_open+0x714>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    347c:	c5 01       	movw	r24, r10
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	0e 94 9c 12 	call	0x2538	; 0x2538 <dir_next>
    3486:	ce cf       	rjmp	.-100    	; 0x3424 <f_open+0x6d6>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    3488:	e9 a1       	ldd	r30, Y+33	; 0x21
    348a:	fa a1       	ldd	r31, Y+34	; 0x22
    348c:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    348e:	41 15       	cp	r20, r1
    3490:	51 05       	cpc	r21, r1
    3492:	39 f0       	breq	.+14     	; 0x34a2 <f_open+0x754>
    3494:	8a 01       	movw	r16, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    3496:	44 30       	cpi	r20, 0x04	; 4
    3498:	51 05       	cpc	r21, r1
    349a:	39 f5       	brne	.+78     	; 0x34ea <f_open+0x79c>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    349c:	82 ff       	sbrs	r24, 2
    349e:	27 c0       	rjmp	.+78     	; 0x34ee <f_open+0x7a0>
    34a0:	28 c0       	rjmp	.+80     	; 0x34f2 <f_open+0x7a4>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    34a2:	82 fd       	sbrc	r24, 2
    34a4:	22 c0       	rjmp	.+68     	; 0x34ea <f_open+0x79c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    34a6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34a8:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    34aa:	83 85       	ldd	r24, Z+11	; 0x0b
    34ac:	84 ff       	sbrs	r24, 4
    34ae:	1f c0       	rjmp	.+62     	; 0x34ee <f_open+0x7a0>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    34b0:	ac a9       	ldd	r26, Y+52	; 0x34
    34b2:	bd a9       	ldd	r27, Y+53	; 0x35
    34b4:	ae 0d       	add	r26, r14
    34b6:	bf 1d       	adc	r27, r15
    34b8:	bd ab       	std	Y+53, r27	; 0x35
    34ba:	ac ab       	std	Y+52, r26	; 0x34
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    34bc:	84 89       	ldd	r24, Z+20	; 0x14
    34be:	95 89       	ldd	r25, Z+21	; 0x15
    34c0:	a0 e0       	ldi	r26, 0x00	; 0
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	dc 01       	movw	r26, r24
    34c6:	99 27       	eor	r25, r25
    34c8:	88 27       	eor	r24, r24
    34ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    34cc:	33 8d       	ldd	r19, Z+27	; 0x1b
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	50 e0       	ldi	r21, 0x00	; 0
    34d2:	82 2b       	or	r24, r18
    34d4:	93 2b       	or	r25, r19
    34d6:	a4 2b       	or	r26, r20
    34d8:	b5 2b       	or	r27, r21
    34da:	8b 8b       	std	Y+19, r24	; 0x13
    34dc:	9c 8b       	std	Y+20, r25	; 0x14
    34de:	ad 8b       	std	Y+21, r26	; 0x15
    34e0:	be 8b       	std	Y+22, r27	; 0x16
    34e2:	f3 ce       	rjmp	.-538    	; 0x32ca <f_open+0x57c>
    34e4:	06 e0       	ldi	r16, 0x06	; 6
    34e6:	10 e0       	ldi	r17, 0x00	; 0
    34e8:	04 c0       	rjmp	.+8      	; 0x34f2 <f_open+0x7a4>
    34ea:	8a 01       	movw	r16, r20
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <f_open+0x7a4>
    34ee:	05 e0       	ldi	r16, 0x05	; 5
    34f0:	10 e0       	ldi	r17, 0x00	; 0
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    34f2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34f4:	f8 a1       	ldd	r31, Y+32	; 0x20
    34f6:	f9 ab       	std	Y+49, r31	; 0x31
    34f8:	e8 ab       	std	Y+48, r30	; 0x30

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    34fa:	01 15       	cp	r16, r1
    34fc:	11 05       	cpc	r17, r1
    34fe:	21 f4       	brne	.+8      	; 0x3508 <f_open+0x7ba>
		if (!dir)	/* Current dir itself */
    3500:	ef 2b       	or	r30, r31
    3502:	11 f4       	brne	.+4      	; 0x3508 <f_open+0x7ba>
    3504:	06 e0       	ldi	r16, 0x06	; 6
    3506:	10 e0       	ldi	r17, 0x00	; 0
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3508:	fb a5       	ldd	r31, Y+43	; 0x2b
    350a:	2f 2f       	mov	r18, r31
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	c9 01       	movw	r24, r18
    3510:	8c 71       	andi	r24, 0x1C	; 28
    3512:	90 70       	andi	r25, 0x00	; 0
    3514:	89 2b       	or	r24, r25
    3516:	09 f4       	brne	.+2      	; 0x351a <f_open+0x7cc>
    3518:	04 c1       	rjmp	.+520    	; 0x3722 <f_open+0x9d4>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    351a:	01 15       	cp	r16, r1
    351c:	11 05       	cpc	r17, r1
    351e:	09 f4       	brne	.+2      	; 0x3522 <f_open+0x7d4>
    3520:	52 c0       	rjmp	.+164    	; 0x35c6 <f_open+0x878>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    3522:	04 30       	cpi	r16, 0x04	; 4
    3524:	11 05       	cpc	r17, r1
    3526:	09 f0       	breq	.+2      	; 0x352a <f_open+0x7dc>
    3528:	42 c0       	rjmp	.+132    	; 0x35ae <f_open+0x860>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    352a:	5d e0       	ldi	r21, 0x0D	; 13
    352c:	e5 2e       	mov	r14, r21
    352e:	f1 2c       	mov	r15, r1
    3530:	ec 0e       	add	r14, r28
    3532:	fd 1e       	adc	r15, r29
    3534:	c7 01       	movw	r24, r14
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	70 e0       	ldi	r23, 0x00	; 0
    353a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <dir_sdi>
    353e:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	a9 f5       	brne	.+106    	; 0x35ae <f_open+0x860>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    3544:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3546:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3548:	6d 8d       	ldd	r22, Y+29	; 0x1d
    354a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    3554:	8c 01       	movw	r16, r24
			if (res != FR_OK) break;
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	51 f5       	brne	.+84     	; 0x35ae <f_open+0x860>
			c = *dj->dir;
    355a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    355c:	f8 a1       	ldd	r31, Y+32	; 0x20
    355e:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    3560:	e5 3e       	cpi	r30, 0xE5	; 229
    3562:	09 f4       	brne	.+2      	; 0x3566 <f_open+0x818>
    3564:	6e c1       	rjmp	.+732    	; 0x3842 <f_open+0xaf4>
    3566:	ee 23       	and	r30, r30
    3568:	09 f4       	brne	.+2      	; 0x356c <f_open+0x81e>
    356a:	6b c1       	rjmp	.+726    	; 0x3842 <f_open+0xaf4>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    356c:	c7 01       	movw	r24, r14
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	0e 94 9c 12 	call	0x2538	; 0x2538 <dir_next>
    3576:	8c 01       	movw	r16, r24
		} while (res == FR_OK);
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	21 f3       	breq	.-56     	; 0x3544 <f_open+0x7f6>
    357c:	18 c0       	rjmp	.+48     	; 0x35ae <f_open+0x860>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    357e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3580:	58 a1       	ldd	r21, Y+32	; 0x20
    3582:	ca 01       	movw	r24, r20
    3584:	fc 01       	movw	r30, r24
    3586:	80 e2       	ldi	r24, 0x20	; 32
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	01 c0       	rjmp	.+2      	; 0x358e <f_open+0x840>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    358c:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	2f ef       	ldi	r18, 0xFF	; 255
    3592:	8f 3f       	cpi	r24, 0xFF	; 255
    3594:	92 07       	cpc	r25, r18
    3596:	d1 f7       	brne	.-12     	; 0x358c <f_open+0x83e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    3598:	69 a1       	ldd	r22, Y+33	; 0x21
    359a:	7a a1       	ldd	r23, Y+34	; 0x22
    359c:	ca 01       	movw	r24, r20
    359e:	4b e0       	ldi	r20, 0x0B	; 11
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	0e 94 35 0a 	call	0x146a	; 0x146a <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    35a6:	ed 85       	ldd	r30, Y+13	; 0x0d
    35a8:	fe 85       	ldd	r31, Y+14	; 0x0e
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	84 83       	std	Z+4, r24	; 0x04
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    35ae:	4f 8d       	ldd	r20, Y+31	; 0x1f
    35b0:	58 a1       	ldd	r21, Y+32	; 0x20
    35b2:	59 ab       	std	Y+49, r21	; 0x31
    35b4:	48 ab       	std	Y+48, r20	; 0x30
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    35b6:	01 15       	cp	r16, r1
    35b8:	11 05       	cpc	r17, r1
    35ba:	09 f0       	breq	.+2      	; 0x35be <f_open+0x870>
    35bc:	1a c1       	rjmp	.+564    	; 0x37f2 <f_open+0xaa4>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    35be:	5b a5       	ldd	r21, Y+43	; 0x2b
    35c0:	58 60       	ori	r21, 0x08	; 8
    35c2:	5b a7       	std	Y+43, r21	; 0x2b
    35c4:	09 c0       	rjmp	.+18     	; 0x35d8 <f_open+0x88a>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    35c6:	a8 a9       	ldd	r26, Y+48	; 0x30
    35c8:	b9 a9       	ldd	r27, Y+49	; 0x31
    35ca:	1b 96       	adiw	r26, 0x0b	; 11
    35cc:	8c 91       	ld	r24, X
    35ce:	81 71       	andi	r24, 0x11	; 17
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <f_open+0x886>
    35d2:	34 c1       	rjmp	.+616    	; 0x383c <f_open+0xaee>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    35d4:	f2 fd       	sbrc	r31, 2
    35d6:	12 c1       	rjmp	.+548    	; 0x37fc <f_open+0xaae>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    35d8:	bb a5       	ldd	r27, Y+43	; 0x2b
    35da:	b3 ff       	sbrs	r27, 3
    35dc:	b3 c0       	rjmp	.+358    	; 0x3744 <f_open+0x9f6>
			dw = get_fattime();					/* Created time */
    35de:	0e 94 17 03 	call	0x62e	; 0x62e <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    35e2:	e8 a9       	ldd	r30, Y+48	; 0x30
    35e4:	f9 a9       	ldd	r31, Y+49	; 0x31
    35e6:	66 87       	std	Z+14, r22	; 0x0e
    35e8:	77 87       	std	Z+15, r23	; 0x0f
    35ea:	80 8b       	std	Z+16, r24	; 0x10
    35ec:	91 8b       	std	Z+17, r25	; 0x11
			dir[DIR_Attr] = 0;					/* Reset attribute */
    35ee:	13 86       	std	Z+11, r1	; 0x0b
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    35f0:	a8 a9       	ldd	r26, Y+48	; 0x30
    35f2:	b9 a9       	ldd	r27, Y+49	; 0x31
    35f4:	5c 96       	adiw	r26, 0x1c	; 28
    35f6:	1d 92       	st	X+, r1
    35f8:	1d 92       	st	X+, r1
    35fa:	1d 92       	st	X+, r1
    35fc:	1c 92       	st	X, r1
    35fe:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
    3600:	54 96       	adiw	r26, 0x14	; 20
    3602:	8d 91       	ld	r24, X+
    3604:	9c 91       	ld	r25, X
    3606:	55 97       	sbiw	r26, 0x15	; 21
    3608:	a0 e0       	ldi	r26, 0x00	; 0
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	7c 01       	movw	r14, r24
    360e:	dd 24       	eor	r13, r13
    3610:	cc 24       	eor	r12, r12
    3612:	e8 a9       	ldd	r30, Y+48	; 0x30
    3614:	f9 a9       	ldd	r31, Y+49	; 0x31
    3616:	82 8d       	ldd	r24, Z+26	; 0x1a
    3618:	93 8d       	ldd	r25, Z+27	; 0x1b
    361a:	a0 e0       	ldi	r26, 0x00	; 0
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	c8 2a       	or	r12, r24
    3620:	d9 2a       	or	r13, r25
    3622:	ea 2a       	or	r14, r26
    3624:	fb 2a       	or	r15, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    3626:	13 8e       	std	Z+27, r1	; 0x1b
    3628:	12 8e       	std	Z+26, r1	; 0x1a
    362a:	15 8a       	std	Z+21, r1	; 0x15
    362c:	14 8a       	std	Z+20, r1	; 0x14
			dj.fs->wflag = 1;
    362e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3630:	fe 85       	ldd	r31, Y+14	; 0x0e
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    3636:	c1 14       	cp	r12, r1
    3638:	d1 04       	cpc	r13, r1
    363a:	e1 04       	cpc	r14, r1
    363c:	f1 04       	cpc	r15, r1
    363e:	09 f4       	brne	.+2      	; 0x3642 <f_open+0x8f4>
    3640:	81 c0       	rjmp	.+258    	; 0x3744 <f_open+0x9f6>
				dw = dj.fs->winsect;
    3642:	2d 84       	ldd	r2, Y+13	; 0x0d
    3644:	3e 84       	ldd	r3, Y+14	; 0x0e
    3646:	d1 01       	movw	r26, r2
    3648:	9a 96       	adiw	r26, 0x2a	; 42
    364a:	2d 91       	ld	r18, X+
    364c:	3d 91       	ld	r19, X+
    364e:	4d 91       	ld	r20, X+
    3650:	5c 91       	ld	r21, X
    3652:	9d 97       	sbiw	r26, 0x2d	; 45
    3654:	2f a3       	std	Y+39, r18	; 0x27
    3656:	38 a7       	std	Y+40, r19	; 0x28
    3658:	49 a7       	std	Y+41, r20	; 0x29
    365a:	5a a7       	std	Y+42, r21	; 0x2a
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    365c:	b1 e0       	ldi	r27, 0x01	; 1
    365e:	cb 16       	cp	r12, r27
    3660:	d1 04       	cpc	r13, r1
    3662:	e1 04       	cpc	r14, r1
    3664:	f1 04       	cpc	r15, r1
    3666:	09 f4       	brne	.+2      	; 0x366a <f_open+0x91c>
    3668:	cf c0       	rjmp	.+414    	; 0x3808 <f_open+0xaba>
    366a:	f1 01       	movw	r30, r2
    366c:	86 89       	ldd	r24, Z+22	; 0x16
    366e:	97 89       	ldd	r25, Z+23	; 0x17
    3670:	a0 8d       	ldd	r26, Z+24	; 0x18
    3672:	b1 8d       	ldd	r27, Z+25	; 0x19
    3674:	c8 16       	cp	r12, r24
    3676:	d9 06       	cpc	r13, r25
    3678:	ea 06       	cpc	r14, r26
    367a:	fb 06       	cpc	r15, r27
    367c:	08 f0       	brcs	.+2      	; 0x3680 <f_open+0x932>
    367e:	c4 c0       	rjmp	.+392    	; 0x3808 <f_open+0xaba>
    3680:	46 01       	movw	r8, r12
    3682:	57 01       	movw	r10, r14
    3684:	42 c0       	rjmp	.+132    	; 0x370a <f_open+0x9bc>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    3686:	c1 01       	movw	r24, r2
    3688:	b5 01       	movw	r22, r10
    368a:	a4 01       	movw	r20, r8
    368c:	0e 94 25 0c 	call	0x184a	; 0x184a <get_fat>
    3690:	2b 01       	movw	r4, r22
    3692:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    3694:	61 15       	cp	r22, r1
    3696:	71 05       	cpc	r23, r1
    3698:	81 05       	cpc	r24, r1
    369a:	91 05       	cpc	r25, r1
    369c:	09 f4       	brne	.+2      	; 0x36a0 <f_open+0x952>
    369e:	b7 c0       	rjmp	.+366    	; 0x380e <f_open+0xac0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    36a0:	61 30       	cpi	r22, 0x01	; 1
    36a2:	71 05       	cpc	r23, r1
    36a4:	81 05       	cpc	r24, r1
    36a6:	91 05       	cpc	r25, r1
    36a8:	09 f4       	brne	.+2      	; 0x36ac <f_open+0x95e>
    36aa:	ae c0       	rjmp	.+348    	; 0x3808 <f_open+0xaba>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    36ac:	6f 3f       	cpi	r22, 0xFF	; 255
    36ae:	2f ef       	ldi	r18, 0xFF	; 255
    36b0:	72 07       	cpc	r23, r18
    36b2:	2f ef       	ldi	r18, 0xFF	; 255
    36b4:	82 07       	cpc	r24, r18
    36b6:	2f ef       	ldi	r18, 0xFF	; 255
    36b8:	92 07       	cpc	r25, r18
    36ba:	09 f4       	brne	.+2      	; 0x36be <f_open+0x970>
    36bc:	a2 c0       	rjmp	.+324    	; 0x3802 <f_open+0xab4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    36be:	c1 01       	movw	r24, r2
    36c0:	b5 01       	movw	r22, r10
    36c2:	a4 01       	movw	r20, r8
    36c4:	00 e0       	ldi	r16, 0x00	; 0
    36c6:	10 e0       	ldi	r17, 0x00	; 0
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	0e 94 38 0b 	call	0x1670	; 0x1670 <put_fat>
    36d0:	8c 01       	movw	r16, r24
			if (res != FR_OK) break;
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	09 f0       	breq	.+2      	; 0x36d8 <f_open+0x98a>
    36d6:	8d c0       	rjmp	.+282    	; 0x37f2 <f_open+0xaa4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    36d8:	f1 01       	movw	r30, r2
    36da:	86 85       	ldd	r24, Z+14	; 0x0e
    36dc:	97 85       	ldd	r25, Z+15	; 0x0f
    36de:	a0 89       	ldd	r26, Z+16	; 0x10
    36e0:	b1 89       	ldd	r27, Z+17	; 0x11
    36e2:	8f 3f       	cpi	r24, 0xFF	; 255
    36e4:	ff ef       	ldi	r31, 0xFF	; 255
    36e6:	9f 07       	cpc	r25, r31
    36e8:	ff ef       	ldi	r31, 0xFF	; 255
    36ea:	af 07       	cpc	r26, r31
    36ec:	ff ef       	ldi	r31, 0xFF	; 255
    36ee:	bf 07       	cpc	r27, r31
    36f0:	51 f0       	breq	.+20     	; 0x3706 <f_open+0x9b8>
				fs->free_clust++;
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	a1 1d       	adc	r26, r1
    36f6:	b1 1d       	adc	r27, r1
    36f8:	f1 01       	movw	r30, r2
    36fa:	86 87       	std	Z+14, r24	; 0x0e
    36fc:	97 87       	std	Z+15, r25	; 0x0f
    36fe:	a0 8b       	std	Z+16, r26	; 0x10
    3700:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag = 1;
    3702:	21 e0       	ldi	r18, 0x01	; 1
    3704:	25 83       	std	Z+5, r18	; 0x05
    3706:	53 01       	movw	r10, r6
    3708:	42 01       	movw	r8, r4
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    370a:	f1 01       	movw	r30, r2
    370c:	86 89       	ldd	r24, Z+22	; 0x16
    370e:	97 89       	ldd	r25, Z+23	; 0x17
    3710:	a0 8d       	ldd	r26, Z+24	; 0x18
    3712:	b1 8d       	ldd	r27, Z+25	; 0x19
    3714:	88 16       	cp	r8, r24
    3716:	99 06       	cpc	r9, r25
    3718:	aa 06       	cpc	r10, r26
    371a:	bb 06       	cpc	r11, r27
    371c:	08 f4       	brcc	.+2      	; 0x3720 <f_open+0x9d2>
    371e:	b3 cf       	rjmp	.-154    	; 0x3686 <f_open+0x938>
    3720:	76 c0       	rjmp	.+236    	; 0x380e <f_open+0xac0>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    3722:	01 15       	cp	r16, r1
    3724:	11 05       	cpc	r17, r1
    3726:	09 f0       	breq	.+2      	; 0x372a <f_open+0x9dc>
    3728:	64 c0       	rjmp	.+200    	; 0x37f2 <f_open+0xaa4>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    372a:	a8 a9       	ldd	r26, Y+48	; 0x30
    372c:	b9 a9       	ldd	r27, Y+49	; 0x31
    372e:	1b 96       	adiw	r26, 0x0b	; 11
    3730:	8c 91       	ld	r24, X
    3732:	84 ff       	sbrs	r24, 4
    3734:	03 c0       	rjmp	.+6      	; 0x373c <f_open+0x9ee>
    3736:	04 e0       	ldi	r16, 0x04	; 4
    3738:	10 e0       	ldi	r17, 0x00	; 0
    373a:	5b c0       	rjmp	.+182    	; 0x37f2 <f_open+0xaa4>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    373c:	f1 ff       	sbrs	r31, 1
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <f_open+0x9f6>
    3740:	80 fd       	sbrc	r24, 0
    3742:	7c c0       	rjmp	.+248    	; 0x383c <f_open+0xaee>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    3744:	bb a5       	ldd	r27, Y+43	; 0x2b
    3746:	b3 ff       	sbrs	r27, 3
    3748:	02 c0       	rjmp	.+4      	; 0x374e <f_open+0xa00>
			mode |= FA__WRITTEN;
    374a:	b0 62       	ori	r27, 0x20	; 32
    374c:	bb a7       	std	Y+43, r27	; 0x2b
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    374e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3750:	7e 85       	ldd	r23, Y+14	; 0x0e
    3752:	fb 01       	movw	r30, r22
    3754:	22 a5       	ldd	r18, Z+42	; 0x2a
    3756:	33 a5       	ldd	r19, Z+43	; 0x2b
    3758:	44 a5       	ldd	r20, Z+44	; 0x2c
    375a:	55 a5       	ldd	r21, Z+45	; 0x2d
    375c:	aa a9       	ldd	r26, Y+50	; 0x32
    375e:	bb a9       	ldd	r27, Y+51	; 0x33
    3760:	5a 96       	adiw	r26, 0x1a	; 26
    3762:	2d 93       	st	X+, r18
    3764:	3d 93       	st	X+, r19
    3766:	4d 93       	st	X+, r20
    3768:	5c 93       	st	X, r21
    376a:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    376c:	e8 a9       	ldd	r30, Y+48	; 0x30
    376e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3770:	5f 96       	adiw	r26, 0x1f	; 31
    3772:	fc 93       	st	X, r31
    3774:	ee 93       	st	-X, r30
    3776:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    3778:	fb a5       	ldd	r31, Y+43	; 0x2b
    377a:	14 96       	adiw	r26, 0x04	; 4
    377c:	fc 93       	st	X, r31
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
    377e:	a8 a9       	ldd	r26, Y+48	; 0x30
    3780:	b9 a9       	ldd	r27, Y+49	; 0x31
    3782:	54 96       	adiw	r26, 0x14	; 20
    3784:	8d 91       	ld	r24, X+
    3786:	9c 91       	ld	r25, X
    3788:	55 97       	sbiw	r26, 0x15	; 21
    378a:	a0 e0       	ldi	r26, 0x00	; 0
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	dc 01       	movw	r26, r24
    3790:	99 27       	eor	r25, r25
    3792:	88 27       	eor	r24, r24
    3794:	e8 a9       	ldd	r30, Y+48	; 0x30
    3796:	f9 a9       	ldd	r31, Y+49	; 0x31
    3798:	22 8d       	ldd	r18, Z+26	; 0x1a
    379a:	33 8d       	ldd	r19, Z+27	; 0x1b
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	82 2b       	or	r24, r18
    37a2:	93 2b       	or	r25, r19
    37a4:	a4 2b       	or	r26, r20
    37a6:	b5 2b       	or	r27, r21
    37a8:	ea a9       	ldd	r30, Y+50	; 0x32
    37aa:	fb a9       	ldd	r31, Y+51	; 0x33
    37ac:	86 87       	std	Z+14, r24	; 0x0e
    37ae:	97 87       	std	Z+15, r25	; 0x0f
    37b0:	a0 8b       	std	Z+16, r26	; 0x10
    37b2:	b1 8b       	std	Z+17, r27	; 0x11
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    37b4:	e8 a9       	ldd	r30, Y+48	; 0x30
    37b6:	f9 a9       	ldd	r31, Y+49	; 0x31
    37b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    37ba:	95 8d       	ldd	r25, Z+29	; 0x1d
    37bc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    37be:	b7 8d       	ldd	r27, Z+31	; 0x1f
    37c0:	ea a9       	ldd	r30, Y+50	; 0x32
    37c2:	fb a9       	ldd	r31, Y+51	; 0x33
    37c4:	82 87       	std	Z+10, r24	; 0x0a
    37c6:	93 87       	std	Z+11, r25	; 0x0b
    37c8:	a4 87       	std	Z+12, r26	; 0x0c
    37ca:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    37cc:	16 82       	std	Z+6, r1	; 0x06
    37ce:	17 82       	std	Z+7, r1	; 0x07
    37d0:	10 86       	std	Z+8, r1	; 0x08
    37d2:	11 86       	std	Z+9, r1	; 0x09
		fp->dsect = 0;
    37d4:	16 8a       	std	Z+22, r1	; 0x16
    37d6:	17 8a       	std	Z+23, r1	; 0x17
    37d8:	10 8e       	std	Z+24, r1	; 0x18
    37da:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    37dc:	71 83       	std	Z+1, r23	; 0x01
    37de:	60 83       	st	Z, r22
    37e0:	db 01       	movw	r26, r22
    37e2:	16 96       	adiw	r26, 0x06	; 6
    37e4:	8d 91       	ld	r24, X+
    37e6:	9c 91       	ld	r25, X
    37e8:	17 97       	sbiw	r26, 0x07	; 7
    37ea:	93 83       	std	Z+3, r25	; 0x03
    37ec:	82 83       	std	Z+2, r24	; 0x02
    37ee:	00 e0       	ldi	r16, 0x00	; 0
    37f0:	10 e0       	ldi	r17, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    37f2:	c8 01       	movw	r24, r16
    37f4:	e5 96       	adiw	r28, 0x35	; 53
    37f6:	e2 e1       	ldi	r30, 0x12	; 18
    37f8:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__epilogue_restores__>
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    37fc:	08 e0       	ldi	r16, 0x08	; 8
    37fe:	10 e0       	ldi	r17, 0x00	; 0
    3800:	f8 cf       	rjmp	.-16     	; 0x37f2 <f_open+0xaa4>
    3802:	01 e0       	ldi	r16, 0x01	; 1
    3804:	10 e0       	ldi	r17, 0x00	; 0
    3806:	f5 cf       	rjmp	.-22     	; 0x37f2 <f_open+0xaa4>
    3808:	02 e0       	ldi	r16, 0x02	; 2
    380a:	10 e0       	ldi	r17, 0x00	; 0
    380c:	f2 cf       	rjmp	.-28     	; 0x37f2 <f_open+0xaa4>
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    380e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3810:	fe 85       	ldd	r31, Y+14	; 0x0e
    3812:	08 94       	sec
    3814:	c1 08       	sbc	r12, r1
    3816:	d1 08       	sbc	r13, r1
    3818:	e1 08       	sbc	r14, r1
    381a:	f1 08       	sbc	r15, r1
    381c:	c2 86       	std	Z+10, r12	; 0x0a
    381e:	d3 86       	std	Z+11, r13	; 0x0b
    3820:	e4 86       	std	Z+12, r14	; 0x0c
    3822:	f5 86       	std	Z+13, r15	; 0x0d
					res = move_window(dj.fs, dw);
    3824:	cf 01       	movw	r24, r30
    3826:	4f a1       	ldd	r20, Y+39	; 0x27
    3828:	58 a5       	ldd	r21, Y+40	; 0x28
    382a:	69 a5       	ldd	r22, Y+41	; 0x29
    382c:	7a a5       	ldd	r23, Y+42	; 0x2a
    382e:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    3832:	8c 01       	movw	r16, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	09 f4       	brne	.+2      	; 0x383a <f_open+0xaec>
    3838:	85 cf       	rjmp	.-246    	; 0x3744 <f_open+0x9f6>
    383a:	db cf       	rjmp	.-74     	; 0x37f2 <f_open+0xaa4>
    383c:	07 e0       	ldi	r16, 0x07	; 7
    383e:	10 e0       	ldi	r17, 0x00	; 0
    3840:	d8 cf       	rjmp	.-80     	; 0x37f2 <f_open+0xaa4>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    3842:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3844:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3846:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3848:	7e 8d       	ldd	r23, Y+30	; 0x1e
    384a:	8d 85       	ldd	r24, Y+13	; 0x0d
    384c:	9e 85       	ldd	r25, Y+14	; 0x0e
    384e:	0e 94 ce 0a 	call	0x159c	; 0x159c <move_window>
    3852:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	09 f4       	brne	.+2      	; 0x385a <f_open+0xb0c>
    3858:	92 ce       	rjmp	.-732    	; 0x357e <f_open+0x830>
    385a:	a9 ce       	rjmp	.-686    	; 0x35ae <f_open+0x860>
    385c:	91 2f       	mov	r25, r17
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	be cd       	rjmp	.-1156   	; 0x33de <f_open+0x690>

00003862 <__mulsi3>:
    3862:	62 9f       	mul	r22, r18
    3864:	d0 01       	movw	r26, r0
    3866:	73 9f       	mul	r23, r19
    3868:	f0 01       	movw	r30, r0
    386a:	82 9f       	mul	r24, r18
    386c:	e0 0d       	add	r30, r0
    386e:	f1 1d       	adc	r31, r1
    3870:	64 9f       	mul	r22, r20
    3872:	e0 0d       	add	r30, r0
    3874:	f1 1d       	adc	r31, r1
    3876:	92 9f       	mul	r25, r18
    3878:	f0 0d       	add	r31, r0
    387a:	83 9f       	mul	r24, r19
    387c:	f0 0d       	add	r31, r0
    387e:	74 9f       	mul	r23, r20
    3880:	f0 0d       	add	r31, r0
    3882:	65 9f       	mul	r22, r21
    3884:	f0 0d       	add	r31, r0
    3886:	99 27       	eor	r25, r25
    3888:	72 9f       	mul	r23, r18
    388a:	b0 0d       	add	r27, r0
    388c:	e1 1d       	adc	r30, r1
    388e:	f9 1f       	adc	r31, r25
    3890:	63 9f       	mul	r22, r19
    3892:	b0 0d       	add	r27, r0
    3894:	e1 1d       	adc	r30, r1
    3896:	f9 1f       	adc	r31, r25
    3898:	bd 01       	movw	r22, r26
    389a:	cf 01       	movw	r24, r30
    389c:	11 24       	eor	r1, r1
    389e:	08 95       	ret

000038a0 <__divmodhi4>:
    38a0:	97 fb       	bst	r25, 7
    38a2:	09 2e       	mov	r0, r25
    38a4:	07 26       	eor	r0, r23
    38a6:	0a d0       	rcall	.+20     	; 0x38bc <__divmodhi4_neg1>
    38a8:	77 fd       	sbrc	r23, 7
    38aa:	04 d0       	rcall	.+8      	; 0x38b4 <__divmodhi4_neg2>
    38ac:	65 d0       	rcall	.+202    	; 0x3978 <__udivmodhi4>
    38ae:	06 d0       	rcall	.+12     	; 0x38bc <__divmodhi4_neg1>
    38b0:	00 20       	and	r0, r0
    38b2:	1a f4       	brpl	.+6      	; 0x38ba <__divmodhi4_exit>

000038b4 <__divmodhi4_neg2>:
    38b4:	70 95       	com	r23
    38b6:	61 95       	neg	r22
    38b8:	7f 4f       	sbci	r23, 0xFF	; 255

000038ba <__divmodhi4_exit>:
    38ba:	08 95       	ret

000038bc <__divmodhi4_neg1>:
    38bc:	f6 f7       	brtc	.-4      	; 0x38ba <__divmodhi4_exit>
    38be:	90 95       	com	r25
    38c0:	81 95       	neg	r24
    38c2:	9f 4f       	sbci	r25, 0xFF	; 255
    38c4:	08 95       	ret

000038c6 <__udivmodsi4>:
    38c6:	a1 e2       	ldi	r26, 0x21	; 33
    38c8:	1a 2e       	mov	r1, r26
    38ca:	aa 1b       	sub	r26, r26
    38cc:	bb 1b       	sub	r27, r27
    38ce:	fd 01       	movw	r30, r26
    38d0:	0d c0       	rjmp	.+26     	; 0x38ec <__udivmodsi4_ep>

000038d2 <__udivmodsi4_loop>:
    38d2:	aa 1f       	adc	r26, r26
    38d4:	bb 1f       	adc	r27, r27
    38d6:	ee 1f       	adc	r30, r30
    38d8:	ff 1f       	adc	r31, r31
    38da:	a2 17       	cp	r26, r18
    38dc:	b3 07       	cpc	r27, r19
    38de:	e4 07       	cpc	r30, r20
    38e0:	f5 07       	cpc	r31, r21
    38e2:	20 f0       	brcs	.+8      	; 0x38ec <__udivmodsi4_ep>
    38e4:	a2 1b       	sub	r26, r18
    38e6:	b3 0b       	sbc	r27, r19
    38e8:	e4 0b       	sbc	r30, r20
    38ea:	f5 0b       	sbc	r31, r21

000038ec <__udivmodsi4_ep>:
    38ec:	66 1f       	adc	r22, r22
    38ee:	77 1f       	adc	r23, r23
    38f0:	88 1f       	adc	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	1a 94       	dec	r1
    38f6:	69 f7       	brne	.-38     	; 0x38d2 <__udivmodsi4_loop>
    38f8:	60 95       	com	r22
    38fa:	70 95       	com	r23
    38fc:	80 95       	com	r24
    38fe:	90 95       	com	r25
    3900:	9b 01       	movw	r18, r22
    3902:	ac 01       	movw	r20, r24
    3904:	bd 01       	movw	r22, r26
    3906:	cf 01       	movw	r24, r30
    3908:	08 95       	ret

0000390a <__prologue_saves__>:
    390a:	2f 92       	push	r2
    390c:	3f 92       	push	r3
    390e:	4f 92       	push	r4
    3910:	5f 92       	push	r5
    3912:	6f 92       	push	r6
    3914:	7f 92       	push	r7
    3916:	8f 92       	push	r8
    3918:	9f 92       	push	r9
    391a:	af 92       	push	r10
    391c:	bf 92       	push	r11
    391e:	cf 92       	push	r12
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	ca 1b       	sub	r28, r26
    3934:	db 0b       	sbc	r29, r27
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	09 94       	ijmp

00003942 <__epilogue_restores__>:
    3942:	2a 88       	ldd	r2, Y+18	; 0x12
    3944:	39 88       	ldd	r3, Y+17	; 0x11
    3946:	48 88       	ldd	r4, Y+16	; 0x10
    3948:	5f 84       	ldd	r5, Y+15	; 0x0f
    394a:	6e 84       	ldd	r6, Y+14	; 0x0e
    394c:	7d 84       	ldd	r7, Y+13	; 0x0d
    394e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3950:	9b 84       	ldd	r9, Y+11	; 0x0b
    3952:	aa 84       	ldd	r10, Y+10	; 0x0a
    3954:	b9 84       	ldd	r11, Y+9	; 0x09
    3956:	c8 84       	ldd	r12, Y+8	; 0x08
    3958:	df 80       	ldd	r13, Y+7	; 0x07
    395a:	ee 80       	ldd	r14, Y+6	; 0x06
    395c:	fd 80       	ldd	r15, Y+5	; 0x05
    395e:	0c 81       	ldd	r16, Y+4	; 0x04
    3960:	1b 81       	ldd	r17, Y+3	; 0x03
    3962:	aa 81       	ldd	r26, Y+2	; 0x02
    3964:	b9 81       	ldd	r27, Y+1	; 0x01
    3966:	ce 0f       	add	r28, r30
    3968:	d1 1d       	adc	r29, r1
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	ed 01       	movw	r28, r26
    3976:	08 95       	ret

00003978 <__udivmodhi4>:
    3978:	aa 1b       	sub	r26, r26
    397a:	bb 1b       	sub	r27, r27
    397c:	51 e1       	ldi	r21, 0x11	; 17
    397e:	07 c0       	rjmp	.+14     	; 0x398e <__udivmodhi4_ep>

00003980 <__udivmodhi4_loop>:
    3980:	aa 1f       	adc	r26, r26
    3982:	bb 1f       	adc	r27, r27
    3984:	a6 17       	cp	r26, r22
    3986:	b7 07       	cpc	r27, r23
    3988:	10 f0       	brcs	.+4      	; 0x398e <__udivmodhi4_ep>
    398a:	a6 1b       	sub	r26, r22
    398c:	b7 0b       	sbc	r27, r23

0000398e <__udivmodhi4_ep>:
    398e:	88 1f       	adc	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	5a 95       	dec	r21
    3994:	a9 f7       	brne	.-22     	; 0x3980 <__udivmodhi4_loop>
    3996:	80 95       	com	r24
    3998:	90 95       	com	r25
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	08 95       	ret

000039a0 <_exit>:
    39a0:	f8 94       	cli

000039a2 <__stop_program>:
    39a2:	ff cf       	rjmp	.-2      	; 0x39a2 <__stop_program>
